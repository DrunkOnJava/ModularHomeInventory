{
  "permissions": {
    "allow": [
      "Bash(make:*)",
      "Bash(xcodebuild:*)",
      "Bash(rm:*)",
      "Bash(xcrun simctl launch:*)",
      "Bash(fd:*)",
      "Bash(grep:*)",
      "Bash(cat:*)",
      "Bash(xcrun simctl boot:*)",
      "Bash(true)",
      "Bash(xcrun simctl install:*)",
      "Bash(defaults read:*)",
      "Bash(/usr/libexec/PlistBuddy:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(ls:*)",
      "Bash(mv:*)",
      "Bash(xcrun simctl get_app_container:*)",
      "WebFetch(domain:docs.fastlane.tools)",
      "Bash(xcparse:*)",
      "Bash(swift build:*)",
      "Bash(chmod:*)",
      "Bash(bundle exec fastlane:*)",
      "Bash(swift run_component_screenshots.swift:*)",
      "Bash(./scripts/generate_example_screenshots.sh:*)",
      "Bash(ruby:*)",
      "Bash(chmod:*)",
      "Bash(ruby:*)",
      "Bash(cp:*)",
      "Bash(unzip:*)",
      "Bash(swift build:*)",
      "Bash(bundle install)",
      "Bash(brew install:*)",
      "Bash(xcrun simctl spawn:*)",
      "Bash(plutil:*)",
      "Bash(xcrun simctl io:*)",
      "Bash(log show:*)",
      "Bash(pkill:*)",
      "Bash(mkdir:*)",
      "Bash(periphery version:*)",
      "Bash(mkdir:*)",
      "Bash(swiftlint lint:*)",
      "Bash(bundle check:*)",
      "Bash(swiftlint analyze:*)",
      "Bash(swiftlint:*)",
      "Bash(# Create temp files to store results\necho \"Files with comprehensive headers:\" > /tmp/with_headers.txt\necho \"Files without comprehensive headers:\" > /tmp/without_headers.txt\n\n# Get all Swift files using glob\nfor file in ./Modules/**/*.swift ./Source/**/*.swift ./HomeInventoryModularTests/**/*.swift ./HomeInventoryModularUITests/**/*.swift ./Views/**/*.swift ./scripts/**/*.swift ./fastlane/**/*.swift; do\n    if [ -f \"$file\" ]; then\n        # Check if file has all required sections\n        if grep -q \"Apple Configuration:\" \"$file\" && grep -q \"Makefile Configuration:\" \"$file\" && grep -q \"Google Sign-In Configuration:\" \"$file\"; then\n            echo \"$file\" >> /tmp/with_headers.txt\n        else\n            echo \"$file\" >> /tmp/without_headers.txt\n        fi\n    fi\ndone\n\n# Count results\necho \"=== Summary ===\"\necho \"Files WITH comprehensive headers: $(grep -c \"^\" /tmp/with_headers.txt || echo 0)\"\necho \"Files WITHOUT comprehensive headers: $(grep -c \"^\" /tmp/without_headers.txt || echo 0)\"\necho \"\"\necho \"=== Files missing comprehensive headers ===\"\ncat /tmp/without_headers.txt | sort)",
      "Bash(bundle install)",
      "Bash(bundle exec fastlane:*)",
      "Bash(bundle update:*)",
      "Bash(swift package:*)",
      "Bash(xcodegen generate:*)",
      "Bash(xcrun altool:*)",
      "Bash(/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift --version)",
      "Bash(open:*)",
      "Bash(claude mcp)",
      "Bash(claude mcp add:*)",
      "Bash(npm search:*)",
      "Bash(claude mcp:*)",
      "Bash(npx @modelcontextprotocol/server-time:*)",
      "Bash(./verify_mcp_servers.sh:*)",
      "Bash(xcrun swift:*)",
      "Bash(osascript:*)",
      "Bash(python3:*)",
      "Bash(./run_in_iterm.sh)",
      "Bash(xcrun:*)",
      "Bash(/Library/Developer/Toolchains/swift-5.9-RELEASE.xctoolchain/usr/bin/swift --version)",
      "Bash(DEVELOPER_DIR=/Library/Developer/Toolchains/swift-5.9-RELEASE.xctoolchain /Library/Developer/Toolchains/swift-5.9-RELEASE.xctoolchain/usr/bin/swift --version)",
      "Bash(security find-generic-password:*)",
      "Bash(./scripts/mcp_keychain_manager.sh list:*)",
      "Bash(/Users/griffin/Projects/ModularHomeInventory/scripts/check_build_status.sh:*)",
      "Bash(touch:*)",
      "Bash(/Users/griffin/Projects/ModularHomeInventory/scripts/fix_export_compliance.sh:*)",
      "Bash(sed:*)",
      "Bash(TOOLCHAINS=swift-5.9-RELEASE xcodebuild archive )",
      "Bash(-project HomeInventoryModular.xcodeproj )",
      "Bash(-scheme HomeInventoryModular )",
      "Bash(-configuration Release )",
      "Bash(-archivePath ~/Desktop/HomeInventory_Build11.xcarchive )",
      "Bash(-destination \"generic/platform=iOS\" )",
      "Bash(-allowProvisioningUpdates )",
      "Bash(CODE_SIGN_STYLE=Automatic )",
      "Bash(DEVELOPMENT_TEAM=2VXBQV4XC9 )",
      "Bash(INFOPLIST_FILE=HomeInventoryModular/Info.plist )",
      "Bash(-derivedDataPath ~/Library/Developer/Xcode/DerivedData/HomeInventoryModular-build11)",
      "Bash(TOOLCHAINS=swift-5.9-RELEASE xcodebuild -exportArchive -archivePath ~/Desktop/HomeInventory_Build10.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ~/Desktop/HomeInventory_Build10_Fixed)",
      "Bash(TOOLCHAINS=swift-5.9-RELEASE xcodebuild -exportArchive -archivePath ~/Desktop/HomeInventory_Build10.xcarchive -exportOptionsPlist ExportOptions.plist -exportPath ~/Desktop/HomeInventory_Build11_Export)",
      "Bash(./run_simple_snapshots.sh:*)",
      "Bash(./generate_working_snapshots.sh:*)",
      "Bash(./run_minimal_snapshot.sh:*)",
      "Bash(./snapshot_demo.swift)",
      "Bash(HomeInventoryModularTests/ItemDetailViewSnapshotTests.swift )",
      "Bash(HomeInventoryModularTests/Items/AddItemViewSnapshotTests.swift )",
      "Bash(HomeInventoryModularTests/Items/ItemsListViewSnapshotTests.swift )",
      "Bash(HomeInventoryModularTests/Receipts/ReceiptsViewSnapshotTests.swift)",
      "Bash(swift test:*)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-items.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-receipts.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-itemsdetailed.sh)",
      "Bash(dns-sd:*)",
      "Bash(arp:*)",
      "Bash(ping:*)",
      "Bash(/sbin/ping:*)",
      "Bash(iperf3:*)",
      "Bash(time scp:*)",
      "Bash(dd:*)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-search.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-datamanagement.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-security.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-notifications.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-errorstates.sh)",
      "Bash(RECORD_SNAPSHOTS=YES ./scripts/test-runners/test-empty-states-snapshot-tests.sh)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -project HomeInventoryModular.xcodeproj -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest' -only-testing:HomeInventoryModularTests/SuccessStatesTests -only-testing:HomeInventoryModularTests/FormValidationTests -only-testing:HomeInventoryModularTests/ModalsAndSheetsTests -only-testing:HomeInventoryModularTests/OnboardingFlowTests 2 >& 1)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -project HomeInventoryModular.xcodeproj -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max,OS=latest' -only-testing:HomeInventoryModularTests/InteractionStatesTests -only-testing:HomeInventoryModularTests/DataVisualizationTests -only-testing:HomeInventoryModularTests/SettingsVariationsTests 2 >& 1)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -workspace HomeInventoryModular.xcworkspace -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 13' -only-testing:HomeInventoryModularTests/DataManagementSnapshotTests/testBackupManagerView)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -project HomeInventoryModular.xcodeproj -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' -only-testing:HomeInventoryModularTests/AdvancedUIStatesTests)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -project HomeInventoryModular.xcodeproj -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' -only-testing:HomeInventoryModularTests/EdgeCaseScenarioTests/testNetworkTimeoutView)",
      "Bash(RECORD_SNAPSHOTS=YES xcodebuild test -project HomeInventoryModular.xcodeproj -scheme HomeInventoryModular -destination 'platform=iOS Simulator,name=iPhone 16 Pro Max' -only-testing:HomeInventoryModularTests/AccessibilityVariationsTests/testVoiceOverOptimizedView)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(./scripts/test-runners/test-items.sh:*)",
      "Bash(fastlane test_all:*)"
    ],
    "deny": []
  },
  "enabledMcpjsonServers": [
    "filesystem",
    "github",
    "memory",
    "brave-search",
    "puppeteer",
    "postgres",
    "google-maps",
    "sequential-thinking",
    "redis",
    "everything",
    "slack",
    "everart",
    "kubernetes"
  ]
}