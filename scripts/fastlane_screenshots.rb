#!/usr/bin/env ruby

require 'fastlane'
require 'simctl'
require 'json'
require 'fileutils'

class FastlaneScreenshots
  def initialize
    @project_dir = File.expand_path('..', __dir__)
    @output_dir = File.join(@project_dir, 'Screenshots', 'FastlaneCapture')
    FileUtils.mkdir_p(@output_dir)
    
    puts "🚀 Fastlane-powered Screenshot Automation"
    puts "=" * 45
    puts ""
  end
  
  def run
    setup_fastlane_environment
    create_dynamic_snapfile
    run_custom_screenshot_process
    organize_screenshots
    generate_summary
  end
  
  private
  
  def setup_fastlane_environment
    puts "⚙️ Setting up Fastlane environment..."
    
    # Set Fastlane environment variables
    ENV['FASTLANE_SKIP_UPDATE_CHECK'] = 'true'
    ENV['FASTLANE_HIDE_CHANGELOG'] = 'true'
    ENV['FASTLANE_DISABLE_COLORS'] = 'false'
    
    puts "   ✅ Fastlane configured"
  end
  
  def create_dynamic_snapfile
    puts "📝 Creating dynamic Snapfile..."
    
    snapfile_content = <<~SNAPFILE
      # Dynamic Snapfile generated by Ruby automation
      
      devices([
        "iPhone 16 Pro Max",
        "iPhone 16 Pro",
        "iPad Pro 13-inch (M4)"
      ])
      
      languages([
        "en-US"
      ])
      
      # Use our custom test target
      scheme("HomeInventoryModular")
      workspace("./HomeInventoryModular.xcworkspace")
      test_target_name("HomeInventoryModularUITests")
      
      # App configuration
      app_identifier("com.homeinventory.app")
      
      # Output configuration
      output_directory("#{@output_dir}")
      clear_previous_screenshots(true)
      
      # UI configuration
      override_status_bar(true)
      launch_arguments(["-FASTLANE_SNAPSHOT", "-UI_TESTING"])
      
      # Performance settings
      concurrent_simulators(false)
      headless(false)
      skip_open_summary(true)
      
      # Test configuration
      only_testing([
        "HomeInventoryModularUITests/HomeInventoryModularUITests/testTakeScreenshots"
      ])
    SNAPFILE
    
    snapfile_path = File.join(@project_dir, 'fastlane', 'Snapfile.dynamic')
    File.write(snapfile_path, snapfile_content)
    
    puts "   📄 Dynamic Snapfile created: #{snapfile_path}"
  end
  
  def run_custom_screenshot_process
    puts ""
    puts "📸 Running custom screenshot process..."
    
    # Build the app first
    build_app
    
    # Run screenshots with different strategies
    run_snapshot_capture
    run_manual_capture_sequence
  end
  
  def build_app
    puts "   🔨 Building app..."
    
    Fastlane::Actions.sh("make build", chdir: @project_dir) do |status, result, command|
      if status.success?
        puts "     ✅ Build successful"
      else
        puts "     ❌ Build failed: #{result}"
        exit 1
      end
    end
  end
  
  def run_snapshot_capture
    puts "   📱 Running Fastlane snapshot capture..."
    
    begin
      # Change to fastlane directory
      Dir.chdir(File.join(@project_dir, 'fastlane')) do
        # Run snapshot with our dynamic configuration
        Fastlane::Actions::CaptureScreenshotsAction.run(
          workspace: './HomeInventoryModular.xcworkspace',
          scheme: 'HomeInventoryModular',
          devices: ['iPhone 16 Pro Max'],
          languages: ['en-US'],
          output_directory: @output_dir,
          clear_previous_screenshots: false,
          override_status_bar: true,
          app_identifier: 'com.homeinventory.app',
          test_target_name: 'HomeInventoryModularUITests',
          concurrent_simulators: false,
          headless: false,
          skip_open_summary: true,
          buildlog_path: File.join(@project_dir, 'fastlane', 'logs'),
          only_testing: ['HomeInventoryModularUITests/HomeInventoryModularUITests/testTakeScreenshots']
        )
      end
      
      puts "     ✅ Fastlane snapshot complete"
      
    rescue => e
      puts "     ⚠️ Fastlane snapshot failed: #{e.message}"
      puts "     🔄 Falling back to manual capture..."
    end
  end
  
  def run_manual_capture_sequence
    puts "   🎯 Running manual capture sequence..."
    
    simulator_id = 'DD192264-DFAA-4582-B2FE-D6FC444C9DDF'
    app_bundle_id = 'com.homeinventory.app'
    
    # Ensure simulator is booted
    Fastlane::Actions.sh("xcrun simctl boot #{simulator_id}", error_callback: ->(result) {})
    sleep 2
    
    # Launch app
    Fastlane::Actions.sh("xcrun simctl launch #{simulator_id} #{app_bundle_id}")
    sleep 3
    
    # Capture sequence
    capture_sequence = [
      { name: 'main_screen', description: 'Main app screen', wait: 2 },
      { name: 'after_interaction_1', description: 'After first interaction', tap: [200, 400], wait: 2 },
      { name: 'tab_navigation_1', description: 'First tab', tap: [78, 800], wait: 2 },
      { name: 'tab_navigation_2', description: 'Second tab', tap: [157, 800], wait: 2 },
      { name: 'tab_navigation_3', description: 'Third tab', tap: [236, 800], wait: 2 },
      { name: 'add_button_flow', description: 'Add button flow', tap: [350, 100], wait: 3 },
      { name: 'settings_flow', description: 'Settings flow', tap: [314, 800], wait: 2 }
    ]
    
    capture_sequence.each_with_index do |step, index|
      puts "     📸 [#{index + 1}/#{capture_sequence.length}] #{step[:description]}"
      
      # Perform tap if specified
      if step[:tap]
        x, y = step[:tap]
        Fastlane::Actions.sh("xcrun simctl io #{simulator_id} spawn tap #{x} #{y}", error_callback: ->(result) {})
        sleep 1
      end
      
      # Wait for UI to settle
      sleep step[:wait]
      
      # Capture screenshot
      output_path = File.join(@output_dir, "manual_#{step[:name]}.png")
      Fastlane::Actions.sh("xcrun simctl io #{simulator_id} screenshot '#{output_path}'")
      
      if File.exist?(output_path)
        file_size = File.size(output_path)
        puts "       ✅ Captured: #{File.basename(output_path)} (#{format_file_size(file_size)})"
      end
    end
  end
  
  def organize_screenshots
    puts ""
    puts "📁 Organizing screenshots..."
    
    # Create organized subdirectories
    subdirs = ['app_flow', 'manual_capture', 'fastlane_generated']
    subdirs.each { |dir| FileUtils.mkdir_p(File.join(@output_dir, dir)) }
    
    # Move screenshots to appropriate folders
    Dir.glob(File.join(@output_dir, '*.png')).each do |screenshot|
      filename = File.basename(screenshot)
      
      destination_dir = case filename
                       when /^manual_/
                         'manual_capture'
                       when /^screenshot_/
                         'fastlane_generated'
                       else
                         'app_flow'
                       end
      
      destination = File.join(@output_dir, destination_dir, filename)
      FileUtils.mv(screenshot, destination)
    end
    
    puts "   ✅ Screenshots organized into categories"
  end
  
  def generate_summary
    puts ""
    puts "📊 Screenshot Generation Summary"
    puts "=" * 35
    
    total_screenshots = 0
    total_size = 0
    
    ['app_flow', 'manual_capture', 'fastlane_generated'].each do |category|
      category_dir = File.join(@output_dir, category)
      screenshots = Dir.glob(File.join(category_dir, '*.png'))
      
      if screenshots.any?
        category_size = screenshots.sum { |f| File.size(f) }
        total_screenshots += screenshots.length
        total_size += category_size
        
        puts ""
        puts "📂 #{category.capitalize.gsub('_', ' ')}: #{screenshots.length} screenshots (#{format_file_size(category_size)})"
        
        screenshots.sort.each do |screenshot|
          filename = File.basename(screenshot)
          size = format_file_size(File.size(screenshot))
          puts "   📸 #{filename} (#{size})"
        end
      end
    end
    
    puts ""
    puts "📋 Total Summary:"
    puts "   📁 Output directory: #{@output_dir}"
    puts "   📸 Total screenshots: #{total_screenshots}"
    puts "   💾 Total size: #{format_file_size(total_size)}"
    
    puts ""
    puts "💡 Next Steps:"
    puts "   1. Review screenshots in each category"
    puts "   2. Delete any duplicates or low-quality captures"
    puts "   3. Rename files to match actual app content"
    puts "   4. Add sample data to app for more varied screenshots"
    
    puts ""
    puts "🔄 To run again: ruby scripts/fastlane_screenshots.rb"
  end
  
  def format_file_size(bytes)
    if bytes < 1024
      "#{bytes}B"
    elsif bytes < 1024 * 1024
      "#{(bytes / 1024.0).round(1)}KB"
    else
      "#{(bytes / (1024.0 * 1024.0)).round(1)}MB"
    end
  end
end

# Run the Fastlane screenshot automation
if __FILE__ == $0
  FastlaneScreenshots.new.run
end