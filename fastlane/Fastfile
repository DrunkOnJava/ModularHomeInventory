# Fastfile for HomeInventory

default_platform(:ios)

platform :ios do
  # Helper lane to handle build number increment
  private_lane :ensure_build_number do
    # Get current build number
    current_build = get_build_number(xcodeproj: "HomeInventoryModular.xcodeproj").to_i
    
    # Ensure it's at least 2 (since build 1 exists)
    if current_build < 2
      increment_build_number(
        build_number: 2,
        xcodeproj: "HomeInventoryModular.xcodeproj"
      )
    end
  end

  desc "Build the app for development"
  lane :build_dev do
    ensure_build_number
    
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build",
      output_name: "HomeInventory_Dev"
    )
    
    UI.success("✅ Development build complete!")
  end

  desc "Build the app for TestFlight (without upload)"
  lane :build_only do
    ensure_build_number
    
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build",
      output_name: "HomeInventory",
      clean: true,
      export_options: {
        signingStyle: "automatic",
        teamID: "2VXBQV4XC9"
      }
    )
    
    UI.success("✅ App built successfully! IPA available at ./build/HomeInventory.ipa")
  end

  desc "Build and upload to TestFlight using Xcode archive"
  lane :testflight_xcode do |options|
    # Skip git check if forced
    unless options[:force]
      ensure_git_status_clean
    end
    
    ensure_build_number
    
    # First, let's just build the archive
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release",
      skip_archive: false,
      archive_path: "./build/HomeInventory.xcarchive",
      skip_package_ipa: true,
      clean: true
    )
    
    UI.success("✅ Archive created successfully!")
    
    # Now try to export and upload using xcodebuild
    sh("xcodebuild -exportArchive -archivePath ./build/HomeInventory.xcarchive -exportOptionsPlist ./ExportOptions.plist -exportPath ./build/")
    
    # Upload to TestFlight
    upload_to_testflight(
      ipa: "./build/HomeInventoryModular.ipa",
      app_identifier: "com.homeinventory.app",
      skip_waiting_for_build_processing: true,
      skip_submission: false,
      distribute_external: false,
      changelog: "🎉 Home Inventory v1.0.5 - Major Update!\n\n📱 ENHANCED iPAD EXPERIENCE\n• New sidebar navigation with split view support\n• Apple Pencil annotation support\n• Comprehensive keyboard shortcuts\n• Drag & drop functionality\n\n🔐 ADVANCED SECURITY\n• Two-factor authentication (2FA)\n• Private mode with biometric lock\n• Auto-lock with configurable timeout\n• AES-256 encrypted backups\n\n📊 POWERFUL ANALYTICS & REPORTS\n• PDF report generation for insurance\n• Category spending analysis\n• Depreciation tracking\n• Budget dashboard with limits\n\n💰 FINANCIAL FEATURES\n• Multi-currency support with real-time conversion\n• Insurance integration dashboard\n• Warranty management and reminders\n• Maintenance scheduling\n\n📧 GMAIL INTEGRATION\n• Automatic receipt import from Gmail\n• AI-powered receipt categorization\n• Bulk import capabilities\n• Smart email filtering\n\n🏠 FAMILY & COLLABORATION\n• Family sharing with permission controls\n• Collaborative inventory lists\n• Activity tracking and history\n• Multi-user support\n\n🔍 ADVANCED SEARCH\n• Natural language search\n• Voice search commands\n• Image similarity search\n• Smart filtering options\n\n☁️ SYNC & BACKUP\n• Multi-platform synchronization\n• Automatic cloud backups\n• Offline mode support\n• Smart conflict resolution\n\n⚡ PERFORMANCE IMPROVEMENTS\n• 40% faster app launch\n• 25% reduced memory usage\n• Enhanced battery efficiency\n• Improved network performance\n\n🎨 UI/UX ENHANCEMENTS\n• Full dark mode support\n• Enhanced accessibility\n• Smooth animations\n• Dynamic type support\n\n🐛 BUG FIXES & STABILITY\n• Fixed receipt import crashes\n• Resolved sync conflicts\n• Improved barcode scanner reliability\n• Better error handling\n\n🔒 PRIVACY & SECURITY\n• GDPR/CCPA compliant\n• Local biometric authentication\n• No third-party data sharing\n• Full encryption compliance\n\nTesting Instructions:\n• Test item management and barcode scanning\n• Try Gmail receipt import\n• Verify sync across devices\n• Test iPad-specific features\n• Check accessibility with VoiceOver\n\nFeedback: griffinradcliffe@gmail.com",
      beta_app_description: "Home Inventory - The most comprehensive personal inventory management app. Track belongings, manage warranties, generate insurance reports, and collaborate with family. Features advanced security, multi-currency support, Gmail integration, and powerful analytics. Perfect for insurance documentation, moving, and organization.",
      beta_app_feedback_email: "griffinradcliffe@gmail.com"
    )
    
    UI.success("✅ Successfully uploaded to TestFlight!")
  end

  desc "Build and upload to TestFlight"
  lane :testflight do |options|
    # Skip git check if forced
    unless options[:force]
      ensure_git_status_clean
    end
    
    # Auto-increment build number for TestFlight
    increment_build_number(xcodeproj: "HomeInventoryModular.xcodeproj")
    
    # Build the app - let Xcode handle provisioning
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release", 
      export_method: "app-store",
      clean: true,
      xcargs: "-allowProvisioningUpdates"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      app_identifier: "com.homeinventory.app",
      skip_waiting_for_build_processing: true,
      skip_submission: false,
      distribute_external: false,
      changelog: "🎉 Home Inventory v1.0.5 - Major Update!\n\n📱 ENHANCED iPAD EXPERIENCE\n• New sidebar navigation with split view support\n• Apple Pencil annotation support\n• Comprehensive keyboard shortcuts\n• Drag & drop functionality\n\n🔐 ADVANCED SECURITY\n• Two-factor authentication (2FA)\n• Private mode with biometric lock\n• Auto-lock with configurable timeout\n• AES-256 encrypted backups\n\n📊 POWERFUL ANALYTICS & REPORTS\n• PDF report generation for insurance\n• Category spending analysis\n• Depreciation tracking\n• Budget dashboard with limits\n\n💰 FINANCIAL FEATURES\n• Multi-currency support with real-time conversion\n• Insurance integration dashboard\n• Warranty management and reminders\n• Maintenance scheduling\n\n📧 GMAIL INTEGRATION\n• Automatic receipt import from Gmail\n• AI-powered receipt categorization\n• Bulk import capabilities\n• Smart email filtering\n\n🏠 FAMILY & COLLABORATION\n• Family sharing with permission controls\n• Collaborative inventory lists\n• Activity tracking and history\n• Multi-user support\n\n🔍 ADVANCED SEARCH\n• Natural language search\n• Voice search commands\n• Image similarity search\n• Smart filtering options\n\n☁️ SYNC & BACKUP\n• Multi-platform synchronization\n• Automatic cloud backups\n• Offline mode support\n• Smart conflict resolution\n\n⚡ PERFORMANCE IMPROVEMENTS\n• 40% faster app launch\n• 25% reduced memory usage\n• Enhanced battery efficiency\n• Improved network performance\n\n🎨 UI/UX ENHANCEMENTS\n• Full dark mode support\n• Enhanced accessibility\n• Smooth animations\n• Dynamic type support\n\n🐛 BUG FIXES & STABILITY\n• Fixed receipt import crashes\n• Resolved sync conflicts\n• Improved barcode scanner reliability\n• Better error handling\n\n🔒 PRIVACY & SECURITY\n• GDPR/CCPA compliant\n• Local biometric authentication\n• No third-party data sharing\n• Full encryption compliance\n\nTesting Instructions:\n• Test item management and barcode scanning\n• Try Gmail receipt import\n• Verify sync across devices\n• Test iPad-specific features\n• Check accessibility with VoiceOver\n\nFeedback: griffinradcliffe@gmail.com",
      beta_app_description: "Home Inventory - The most comprehensive personal inventory management app. Track belongings, manage warranties, generate insurance reports, and collaborate with family. Features advanced security, multi-currency support, Gmail integration, and powerful analytics. Perfect for insurance documentation, moving, and organization.",
      beta_app_feedback_email: "griffinradcliffe@gmail.com"
    )
    
    UI.success("✅ Successfully uploaded to TestFlight!")
    
    # Only commit if git was clean
    unless options[:force]
      commit_version_bump(
        message: "[skip ci] Bump build number for TestFlight",
        xcodeproj: "HomeInventoryModular.xcodeproj"
      )
      
      push_to_git_remote
    end
  end

  desc "Fix common build issues"
  lane :fix_build do
    # Clean build folder
    clean_build_artifacts
    
    # Clear derived data
    clear_derived_data
    
    # Resolve packages
    sh("xcodebuild -resolvePackageDependencies -scheme HomeInventoryModular -project ../HomeInventoryModular.xcodeproj")
    
    UI.success("✅ Build issues fixed! Try building again.")
  end

  desc "Resolve SPM dependencies"
  lane :resolve_dependencies do
    sh("xcodebuild -resolvePackageDependencies -workspace ../HomeInventoryModular.xcworkspace -scheme HomeInventoryModular")
    UI.success("✅ Dependencies resolved!")
  end


  desc "Validate the app before submission"
  lane :validate do
    # Build the app
    build_only
    
    # Validate with App Store Connect
    validate_app(
      ipa: "./build/HomeInventory.ipa",
      platform: "ios"
    )
    
    UI.success("✅ App validation passed!")
  end

  # Error handler
  error do |lane, exception, options|
    UI.error("❌ Error in lane #{lane}: #{exception.message}")
    
    if exception.message.include?("Code signing") || exception.message.include?("provisioning")
      UI.important("💡 Try running 'fastlane fix_build' to resolve common issues")
      UI.important("💡 You may need to open Xcode and ensure automatic signing is enabled")
    end
  end

  # Direct IPA upload lane  
  lane :upload_ipa do
    UI.message('📤 Uploading IPA to TestFlight...')
    
    # Upload the IPA we just created
    upload_to_testflight(
      ipa: './build/HomeInventoryModular-1.0.6.ipa',
      app_identifier: 'com.homeinventory.app',
      app_platform: 'ios',
      team_id: '2VXBQV4XC9',
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      changelog: '🎉 Home Inventory v1.0.6

🆕 NEW FEATURES:
• Professional Insurance Reports - Generate comprehensive PDFs for insurance providers
• View-Only Sharing Mode - Share your inventory with privacy controls

✨ IMPROVEMENTS:
• Enhanced iPad split view navigation
• Better performance with large inventories
• Improved sync reliability
• Updated SwiftLint compliance

🐛 BUG FIXES:
• Fixed item price formatting
• Resolved optional date handling
• Corrected CloudKit sync errors
• Improved error handling

Testing Focus:
• Generate insurance reports
• Test view-only sharing
• Verify privacy controls',
      beta_app_description: 'Home Inventory - The ultimate personal inventory management solution. NEW: Professional insurance reports and secure view-only sharing!',
      beta_app_feedback_email: 'griffinradcliffe@gmail.com',
      uses_non_exempt_encryption: true
    )
    
    UI.success('✅ Successfully uploaded to TestFlight!')
  end
  
  # Test automation lanes
  
  desc "Run all tests"
  lane :test_all do
    scan(
      scheme: "HomeInventoryModular",
      clean: true,
      code_coverage: true,
      output_types: "html,junit",
      output_directory: "./test-results",
      result_bundle: true,
      parallel_testing: true,
      max_concurrent_simulators: 4
    )
  end
  
  desc "Run unit tests only"
  lane :test_unit do
    scan(
      scheme: "HomeInventoryModular",
      only_testing: [
        "CoreTests",
        "ItemsTests",
        "BarcodeScannerTests",
        "ReceiptsTests",
        "GmailTests",
        "SyncTests",
        "PremiumTests",
        "AppSettingsTests"
      ],
      code_coverage: true,
      parallel_testing: true
    )
  end
  
  desc "Run integration tests"
  lane :test_integration do
    scan(
      scheme: "HomeInventoryModular",
      only_testing: ["HomeInventoryModularTests/IntegrationTests"],
      parallel_testing: false
    )
  end
  
  desc "Run performance tests"
  lane :test_performance do
    scan(
      scheme: "HomeInventoryModular",
      only_testing: ["HomeInventoryModularTests/PerformanceTests"],
      configuration: "Release"
    )
  end
  
  desc "Run snapshot tests"
  lane :test_snapshots do
    scan(
      scheme: "HomeInventoryModular",
      only_testing: [
        "HomeInventoryModularTests/EnhancedTests",
        "HomeInventoryModularTests/AdditionalTests",
        "HomeInventoryModularTests/ExpandedTests"
      ],
      parallel_testing: true,
      max_concurrent_simulators: 2
    )
  end
  
  desc "Run security tests"
  lane :test_security do
    scan(
      scheme: "HomeInventoryModular",
      only_testing: ["HomeInventoryModularTests/SecurityTests"]
    )
  end
  
  desc "Run UI tests on multiple devices"
  lane :test_ui_matrix do
    devices = [
      "iPhone 15 Pro",
      "iPhone 14",
      "iPhone SE (3rd generation)",
      "iPad Pro (12.9-inch) (6th generation)",
      "iPad Air (5th generation)"
    ]
    
    devices.each do |device|
      scan(
        scheme: "HomeInventoryModular",
        only_testing: ["HomeInventoryModularTests/UIGestureTests"],
        device: device,
        code_coverage: false
      )
    end
  end
  
  # CI/CD lanes
  
  desc "CI - Pull Request validation"
  lane :ci_pr do
    # Lint
    swiftlint(
      mode: :lint,
      config_file: ".swiftlint.yml",
      strict: true,
      raise_if_swiftlint_error: true
    )
    
    # Format check
    sh("swiftformat --lint . --config .swiftformat")
    
    # Run quick tests
    test_unit
    
    # Generate test report
    xcov(
      scheme: "HomeInventoryModular",
      output_directory: "./coverage",
      minimum_coverage_percentage: 70.0
    )
  end
  
  desc "CI - Nightly build and test"
  lane :ci_nightly do
    # Full test suite
    test_all
    
    # Performance benchmarks
    test_performance
    
    # Security scan
    test_security
    
    # Generate reports
    trainer(
      output_directory: "./test-results",
      fail_build: false
    )
  end
  
  # Utility lanes
  
  desc "Generate test coverage report"
  lane :coverage_report do
    xcov(
      scheme: "HomeInventoryModular",
      output_directory: "./coverage",
      html_report: true,
      markdown_report: true,
      json_report: true,
      minimum_coverage_percentage: 70.0,
      include_targets: "Core,Items,BarcodeScanner,Receipts,Gmail,Sync,Premium,AppSettings",
      exclude_targets: "Pods,TestUtilities"
    )
  end
  
  desc "Run Danger for PR review"
  lane :danger_check do
    danger(
      dangerfile: "./Dangerfile.swift",
      github_api_token: ENV["GITHUB_TOKEN"],
      verbose: true
    )
  end
  
  desc "Setup test environment"
  lane :setup_tests do
    # Resolve SPM dependencies
    resolve_dependencies
    
    # Generate Xcode project if using XcodeGen
    sh("xcodegen generate") if File.exist?("project.yml")
    
    # Download test fixtures
    sh("./scripts/download_test_fixtures.sh") if File.exist?("./scripts/download_test_fixtures.sh")
  end
  
  desc "Clean test artifacts"
  lane :clean_tests do
    clean_build_artifacts
    
    # Remove test results
    sh("rm -rf ./test-results")
    sh("rm -rf ./coverage")
    sh("rm -rf ./fastlane/test_output")
    
    # Clear simulator caches
    sh("xcrun simctl shutdown all")
    sh("xcrun simctl erase all")
  end
end