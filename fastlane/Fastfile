# Fastfile for HomeInventory

default_platform(:ios)

platform :ios do
  # Helper lane to handle build number increment
  private_lane :ensure_build_number do
    # Get current build number
    current_build = get_build_number(xcodeproj: "HomeInventoryModular.xcodeproj").to_i
    
    # Ensure it's at least 2 (since build 1 exists)
    if current_build < 2
      increment_build_number(
        build_number: 2,
        xcodeproj: "HomeInventoryModular.xcodeproj"
      )
    end
  end

  desc "Build the app for development"
  lane :build_dev do
    ensure_build_number
    
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Debug",
      export_method: "development",
      output_directory: "./build",
      output_name: "HomeInventory_Dev"
    )
    
    UI.success("✅ Development build complete!")
  end

  desc "Build the app for TestFlight (without upload)"
  lane :build_only do
    ensure_build_number
    
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./build",
      output_name: "HomeInventory",
      clean: true,
      export_options: {
        signingStyle: "automatic",
        teamID: "2VXBQV4XC9"
      }
    )
    
    UI.success("✅ App built successfully! IPA available at ./build/HomeInventory.ipa")
  end

  desc "Build and upload to TestFlight using Xcode archive"
  lane :testflight_xcode do |options|
    # Skip git check if forced
    unless options[:force]
      ensure_git_status_clean
    end
    
    ensure_build_number
    
    # First, let's just build the archive
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release",
      skip_archive: false,
      archive_path: "./build/HomeInventory.xcarchive",
      skip_package_ipa: true,
      clean: true
    )
    
    UI.success("✅ Archive created successfully!")
    
    # Now try to export and upload using xcodebuild
    sh("xcodebuild -exportArchive -archivePath ./build/HomeInventory.xcarchive -exportOptionsPlist ./ExportOptions.plist -exportPath ./build/")
    
    # Upload to TestFlight
    upload_to_testflight(
      ipa: "./build/HomeInventoryModular.ipa",
      app_identifier: "com.homeinventory.app",
      skip_waiting_for_build_processing: true,
      skip_submission: false,
      distribute_external: false,
      changelog: "Version 1.0.0 Build 2\n\n• Complete rebuild with modular architecture\n• Enhanced UI with SwiftUI\n• Better organization features\n• Improved barcode scanning\n• iCloud sync support",
      beta_app_description: "MyHome Inventory Pro helps you catalog and manage all your belongings with powerful organization features.",
      beta_app_feedback_email: "griffinradcliffe@gmail.com"
    )
    
    UI.success("✅ Successfully uploaded to TestFlight!")
  end

  desc "Build and upload to TestFlight"
  lane :testflight do |options|
    # Skip git check if forced
    unless options[:force]
      ensure_git_status_clean
    end
    
    ensure_build_number
    
    # Build the app - let Xcode handle provisioning
    build_app(
      scheme: "HomeInventoryModular",
      configuration: "Release", 
      export_method: "app-store",
      clean: true,
      xcargs: "-allowProvisioningUpdates"
    )
    
    # Upload to TestFlight
    upload_to_testflight(
      app_identifier: "com.homeinventory.app",
      skip_waiting_for_build_processing: true,
      skip_submission: false,
      distribute_external: false,
      changelog: "Version 1.0.0 Build 2\n\n• Complete rebuild with modular architecture\n• Enhanced UI with SwiftUI\n• Better organization features\n• Improved barcode scanning\n• iCloud sync support",
      beta_app_description: "MyHome Inventory Pro helps you catalog and manage all your belongings with powerful organization features.",
      beta_app_feedback_email: "griffinradcliffe@gmail.com"
    )
    
    UI.success("✅ Successfully uploaded to TestFlight!")
    
    # Only commit if git was clean
    unless options[:force]
      commit_version_bump(
        message: "[skip ci] Bump build number for TestFlight",
        xcodeproj: "HomeInventoryModular.xcodeproj"
      )
      
      push_to_git_remote
    end
  end

  desc "Fix common build issues"
  lane :fix_build do
    # Clean build folder
    clean_build_artifacts
    
    # Clear derived data
    clear_derived_data
    
    # Resolve packages
    sh("xcodebuild -resolvePackageDependencies -scheme HomeInventoryModular -project ../HomeInventoryModular.xcodeproj")
    
    UI.success("✅ Build issues fixed! Try building again.")
  end

  desc "Resolve SPM dependencies"
  lane :resolve_dependencies do
    sh("xcodebuild -resolvePackageDependencies -workspace ../HomeInventoryModular.xcworkspace -scheme HomeInventoryModular")
    UI.success("✅ Dependencies resolved!")
  end

  desc "Generate App Store screenshots using snapshot"
  lane :screenshots do
    # Use the new screenshot generation system
    UI.message("📸 Running comprehensive screenshot generation...")
    
    # Clean previous screenshots
    clear_screenshots
    
    # Capture using snapshot with our custom UI tests
    capture_screenshots(
      workspace: "HomeInventoryModular.xcworkspace",
      scheme: "HomeInventoryModular",
      output_directory: "./fastlane/screenshots",
      clear_previous_screenshots: true,
      override_status_bar: true,
      test_without_building: false,
      configuration: "Debug"
    )
    
    UI.success("✅ Screenshots generated successfully!")
  end
  
  desc "Clear all screenshot directories"
  lane :clear_screenshots do
    sh("rm -rf ../Screenshots/")
    sh("rm -rf ./screenshots/")
    sh("rm -rf ~/Documents/ComponentScreenshots/")
    sh("rm -rf ~/Documents/UITestScreenshots/")
    UI.success("✅ Screenshot directories cleaned!")
  end

  desc "Validate the app before submission"
  lane :validate do
    # Build the app
    build_only
    
    # Validate with App Store Connect
    validate_app(
      ipa: "./build/HomeInventory.ipa",
      platform: "ios"
    )
    
    UI.success("✅ App validation passed!")
  end

  # Error handler
  error do |lane, exception, options|
    UI.error("❌ Error in lane #{lane}: #{exception.message}")
    
    if exception.message.include?("Code signing") || exception.message.include?("provisioning")
      UI.important("💡 Try running 'fastlane fix_build' to resolve common issues")
      UI.important("💡 You may need to open Xcode and ensure automatic signing is enabled")
    end
  end
end