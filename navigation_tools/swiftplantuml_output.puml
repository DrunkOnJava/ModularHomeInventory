@startuml
' STYLE START
hide empty members
skinparam shadowing false
' STYLE END
set namespaceSeparator none


class "ReceiptsModuleAPI" as ReceiptsModuleAPI << (P, GoldenRod) protocol >> { 
  +makeReceiptsListView()
  +makeReceiptDetailView(receipt:)
  +makeReceiptImportView(completion:)
  +makeReceiptPreviewView(parsedData:completion:) 
}
class "RetailerParser" as RetailerParser << (P, GoldenRod) protocol >> { 
  ~retailerName : String
  ~canParse(_:)
  ~parse(_:) 
}
class "ItemTemplateRepository" as ItemTemplateRepository << (P, GoldenRod) protocol >> { 
  +fetchByCategory(_:)
  +search(query:) 
}
class "CollectionRepository" as CollectionRepository << (P, GoldenRod) protocol >> { 
  +fetchByItemId(_:)
  +addItem(_:to:)
  +removeItem(_:from:)
  +fetchActive()
  +fetchArchived()
  +archive(_:)
  +unarchive(_:) 
}
class "TagRepository" as TagRepository << (P, GoldenRod) protocol >> { 
  +fetchByItemId(_:)
  +search(query:)
  +incrementItemCount(for:)
  +decrementItemCount(for:)
  +fetchMostUsed(limit:)
  +findByName(_:) 
}
class "StorageUnitRepository" as StorageUnitRepository << (P, GoldenRod) protocol >> { 
  +fetchByLocation(_:)
  +fetchByType(_:)
  +search(query:)
  +fetchWithAvailableCapacity()
  +updateItemCount(for:count:)
  +fetchByItemId(_:) 
}
class "ScanHistoryRepository" as ScanHistoryRepository << (P, GoldenRod) protocol >> { 
  +fetchAll()
  +fetchRecent(limit:)
  +fetch(id:)
  +save(_:)
  +delete(_:)
  +deleteAll()
  +fetchByBarcode(_:)
  +fetchByDateRange(from:to:) 
}
class "BudgetRepository" as BudgetRepository << (P, GoldenRod) protocol >> { 
  +create(_:)
  +update(_:)
  +delete(_:)
  +fetch(id:)
  +fetchAll()
  +fetchActive()
  +fetchByCategory(_:)
  +getCurrentStatus(for:)
  +getHistoricalStatuses(for:limit:)
  +updateStatus(_:)
  +createAlert(_:)
  +fetchAlerts(for:)
  +fetchUnreadAlerts()
  +markAlertAsRead(_:)
  +recordTransaction(_:)
  +fetchTransactions(for:in:)
  +deleteTransaction(_:)
  +recordHistoryEntry(_:)
  +fetchHistory(for:limit:)
  +calculateSpending(for:in:)
  +getAverageSpending(for:periods:)
  +getBudgetPerformance(for:) 
}
class "CategoryRepository" as CategoryRepository << (P, GoldenRod) protocol >> { 
  +fetchBuiltIn()
  +fetchCustom()
  +fetchByParent(id:)
  +canDelete(_:) 
}
class "SearchHistoryRepository" as SearchHistoryRepository << (P, GoldenRod) protocol >> { 
  +fetchRecent(limit:)
  +save(_:)
  +delete(_:)
  +deleteAll()
  +search(query:) 
}
class "SavedSearchRepository" as SavedSearchRepository << (P, GoldenRod) protocol >> { 
  +fetchAll()
  +fetchPinned()
  +save(_:)
  +update(_:)
  +delete(_:)
  +deleteAll()
  +recordUsage(of:) 
}
class "PhotoStorageProtocol" as PhotoStorageProtocol << (P, GoldenRod) protocol >> { 
  +savePhoto(_:for:)
  +loadPhoto(for:)
  +deletePhoto(for:)
  +generateThumbnail(_:size:) 
}
class "PhotoRepository" as PhotoRepository << (P, GoldenRod) protocol >> { 
  +savePhoto(_:image:)
  +loadPhotos(for:)
  +loadPhoto(id:)
  +deletePhoto(id:)
  +updatePhotoOrder(itemId:photoIds:)
  +updatePhotoCaption(id:caption:) 
}
class "DocumentStorageProtocol" as DocumentStorageProtocol << (P, GoldenRod) protocol >> { 
  +saveDocument(_:documentId:)
  +loadDocument(documentId:)
  +deleteDocument(documentId:)
  +getDocumentURL(documentId:)
  +documentExists(documentId:) 
}
class "DocumentRepository" as DocumentRepository << (P, GoldenRod) protocol >> { 
  +fetchByItemId(_:)
  +fetchByCategory(_:)
  +search(query:)
  +fetchByTags(_:)
  +updateSearchableText(documentId:text:)
  +getTotalStorageSize() 
}
class "OfflineScanQueueRepository" as OfflineScanQueueRepository << (P, GoldenRod) protocol >> { 
  +fetchPending()
  +fetchByStatus(_:)
  +updateStatus(id:status:)
  +incrementRetryCount(id:)
  +clearCompleted() 
}
class "Storage" as Storage << (P, GoldenRod) protocol >> { 
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +deleteAll() 
}
class "EmailServiceProtocol" as EmailServiceProtocol << (P, GoldenRod) protocol >> { 
  +fetchEmails(from:matching:)
  +parseReceiptFromEmail(_:) 
}
class "WarrantyRepository" as WarrantyRepository << (P, GoldenRod) protocol >> { 
  +fetchAll()
  +fetch(by:)
  +fetchWarranties(for:)
  +fetchExpiring(within:)
  +fetchExpired()
  +save(_:)
  +delete(_:)
  +warrantiesPublisher : AnyPublisher<[Warranty], Never> 
}
class "SettingsStorageProtocol" as SettingsStorageProtocol << (P, GoldenRod) protocol >> { 
  +string(forKey:)
  +set(_:forKey:)
  +bool(forKey:)
  +set(_:forKey:)
  +integer(forKey:)
  +set(_:forKey:)
  +double(forKey:)
  +set(_:forKey:) 
}
class "Repository" as Repository << (P, GoldenRod) protocol >> { 
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:) 
}
class "ItemRepository" as ItemRepository << (P, GoldenRod) protocol >> { 
  +search(query:)
  +fuzzySearch(query:threshold:)
  +searchWithCriteria(_:)
  +fetchByCategory(_:)
  +fetchByCategoryId(_:)
  +fetchByLocation(_:)
  +fetchByBarcode(_:)
  +fetchItemsUnderWarranty()
  +fetchFavoriteItems()
  +fetchRecentlyAdded(days:) 
}
class "LocationRepository" as LocationRepository << (P, GoldenRod) protocol >> { 
  +fetchRootLocations()
  +fetchChildren(of:)
  +getAllLocations() 
}
class "OCRServiceProtocol" as OCRServiceProtocol << (P, GoldenRod) protocol >> { 
  +extractText(from:)
  +extractReceiptData(from:) 
}
class "ReceiptRepository" as ReceiptRepository << (P, GoldenRod) protocol >> { 
  +fetchByDateRange(from:to:)
  +fetchByStore(_:)
  +fetchByItemId(_:)
  +fetchAboveAmount(_:) 
}
class "CloudDocumentStorageProtocol" as CloudDocumentStorageProtocol << (P, GoldenRod) protocol >> { 
  +uploadDocument(_:documentId:encrypted:)
  +downloadDocument(documentId:)
  +deleteDocument(documentId:)
  +documentExists(documentId:)
  +getDocumentMetadata(documentId:)
  +listDocuments()
  +getStorageUsage()
  +syncDocument(documentId:data:encrypted:)
  +syncPendingDocuments() 
}
class "BarcodeLookupService" as BarcodeLookupService << (P, GoldenRod) protocol >> { 
  +lookupProduct(barcode:) 
}
class "BarcodeProvider" as BarcodeProvider << (P, GoldenRod) protocol >> { 
  ~name : String
  ~lookup(_:) 
}
class "ScannerModuleAPI" as ScannerModuleAPI << (P, GoldenRod) protocol >> { 
  +makeScannerView()
  +makeBarcodeScannerView(completion:)
  +makeBatchScannerView(completion:)
  +makeDocumentScannerView(completion:)
  +makeScanHistoryView()
  +makeOfflineScanQueueView()
  +offlineScanService : OfflineScanService 
}
class "SettingsModuleAPI" as SettingsModuleAPI << (P, GoldenRod) protocol >> { 
  +makeSettingsView()
  +makeAboutView() 
}
class "SyncModuleAPI" as SyncModuleAPI << (P, GoldenRod) protocol >> { 
  +startSync()
  +stopSync()
  +syncNow()
  +syncStatus : SyncStatus
  +syncStatusPublisher : Published<SyncStatus>.Publisher 
}
class "CloudServiceProtocol" as CloudServiceProtocol << (P, GoldenRod) protocol >> { 
  +upload(_:to:)
  +download(_:from:)
  +delete(at:)
  +isAuthenticated : Bool
  +authenticate() 
}
class "ConflictDetails" as ConflictDetails << (P, GoldenRod) protocol >> { 
  +entityType : SyncConflict.EntityType
  +changes : [FieldChange] 
}
class "ItemsModuleAPI" as ItemsModuleAPI << (P, GoldenRod) protocol >> { 
  +makeItemsListView()
  +makeItemsListView(onSearchTapped:)
  +makeItemsListView(onSearchTapped:onBarcodeSearchTapped:)
  +makeItemDetailView(item:)
  +makeAddItemView(completion:)
  +makeEditItemView(item:completion:)
  +makeSpendingDashboardView()
  +makeCollectionsListView()
  +makeCollectionDetailView(collection:)
  +makeReceiptsListView()
  +makeTagsManagementView()
  +makeStorageUnitsListView()
  +makeNaturalLanguageSearchView()
  +makeBarcodeSearchView()
  +makeRetailerAnalyticsView()
  +makeTimeBasedAnalyticsView()
  +makeDepreciationReportView()
  +makePurchasePatternsView()
  +makeBudgetDashboardView()
  +makeCSVImportView(onImportComplete:)
  +makeCSVExportView(items:)
  +makeWarrantyDashboardView()
  +makeWarrantyNotificationsView() 
}
class "PremiumModuleAPI" as PremiumModuleAPI << (P, GoldenRod) protocol >> { 
  +isPremium : Bool
  +isPremiumPublisher : Published<Bool>.Publisher
  +makePremiumUpgradeView()
  +makeSubscriptionManagementView()
  +purchasePremium()
  +restorePurchases()
  +requiresPremium(_:) 
}
class "PurchaseServiceProtocol" as PurchaseServiceProtocol << (P, GoldenRod) protocol >> { 
  +fetchProducts()
  +purchase(_:)
  +restorePurchases()
  +hasActiveSubscription() 
}
class "WidgetsModuleAPI" as WidgetsModuleAPI << (P, GoldenRod) protocol >> {  
}
class "OnboardingModuleAPI" as OnboardingModuleAPI << (P, GoldenRod) protocol >> { 
  +isOnboardingCompleted : Bool
  +makeOnboardingView(completion:)
  +completeOnboarding()
  +resetOnboarding() 
}
class "iPadContextMenus" as iPadContextMenus << (S, SkyBlue) struct >> { 
  ~{static} itemContextMenu(for:onEdit:onDuplicate:onDelete:onShare:onMove:onAddToCollection:)
  ~{static} collectionContextMenu(for:onEdit:onAddItems:onExport:onShare:onDelete:)
  ~{static} photoContextMenu(onView:onSaveToPhotos:onShare:onDelete:)
  ~{static} receiptContextMenu(onView:onReparse:onExport:onDelete:)
  ~{static} emptySpaceContextMenu(onNewItem:onImport:onPaste:) 
}
class "ItemContextMenuModifier" as ItemContextMenuModifier << (S, SkyBlue) struct >> { 
  ~item : Item
  -showEditSheet
  -showMoveSheet
  -showCollectionPicker
  -showDeleteAlert
  -showShareSheet
  ~body(content:)
  -duplicateItem()
  -deleteItem() 
}
class "EditItemSheet" as EditItemSheet << (S, SkyBlue) struct >> { 
  ~item : Item
  -dismiss
  ~body : some View 
}
class "MoveItemSheet" as MoveItemSheet << (S, SkyBlue) struct >> { 
  ~item : Item
  -dismiss
  -selectedLocation : Location?
  ~body : some View 
}
class "CollectionPickerSheet" as CollectionPickerSheet << (S, SkyBlue) struct >> { 
  ~item : Item
  -dismiss
  -selectedCollections : Set<UUID>
  ~body : some View 
}
class "MultiSelectionContextMenu" as MultiSelectionContextMenu << (S, SkyBlue) struct >> { 
  ~selectedItems : Set<UUID>
  ~onDelete : () -> Void
  ~onMove : () -> Void
  ~onAddToCollection : () -> Void
  ~onExport : () -> Void
  ~body : some View 
}
class "AppCoordinator" as AppCoordinator << (C, DarkSeaGreen) >> { 
  ~itemsModule : Items.ItemsModuleAPI!
  ~scannerModule : BarcodeScanner.ScannerModuleAPI!
  ~settingsModule : SettingsModuleAPI!
  ~receiptsModule : Receipts.ReceiptsModuleAPI!
  ~syncModule : Sync.SyncModuleAPI!
  ~premiumModule : Premium.PremiumModuleAPI!
  ~onboardingModule : Onboarding.OnboardingModuleAPI!
  -itemRepository
  -locationRepository
  -itemTemplateRepository
  -receiptRepository
  -emailService
  -ocrService
  ~init()
  -setupModules() 
}
class "MockItemRepository" as MockItemRepository << (C, DarkSeaGreen) >> { 
  -items : [Item]
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~search(query:)
  ~fuzzySearch(query:threshold:)
  ~fetchByCategory(_:)
  ~fetchByCategoryId(_:)
  ~fetchByLocation(_:)
  ~fetchByBarcode(_:)
  ~searchWithCriteria(_:)
  ~fetchItemsUnderWarranty()
  ~fetchFavoriteItems()
  ~fetchRecentlyAdded(days:) 
}
class "MockLocationRepository" as MockLocationRepository << (C, DarkSeaGreen) >> { 
  -locations : [Location]
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~fetchRootLocations()
  ~fetchChildren(of:) 
}
class "MockReceiptRepository" as MockReceiptRepository << (C, DarkSeaGreen) >> { 
  -receipts : [Receipt]
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~search(query:)
  ~fetchByDateRange(from:to:)
  ~fetchByStore(_:)
  ~fetchByItemId(_:)
  ~fetchAboveAmount(_:) 
}
class "MockEmailService" as MockEmailService << (C, DarkSeaGreen) >> { 
  ~fetchEmails(from:matching:)
  ~parseReceiptFromEmail(_:) 
}
class "MockOCRService" as MockOCRService << (C, DarkSeaGreen) >> { 
  ~extractText(from:)
  ~extractReceiptData(from:) 
}
class "MockWarrantyRepository" as MockWarrantyRepository << (C, DarkSeaGreen) >> { 
  -warranties : [Warranty]
  -warrantiesSubject : [Warranty]
  ~warrantiesPublisher : AnyPublisher<[Warranty], Never>
  ~fetchAll()
  ~fetch(by:)
  ~fetch(id:)
  ~fetchWarranties(for:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:) 
}
class "MockCloudService" as MockCloudService << (C, DarkSeaGreen) >> { 
  -isLoggedIn
  ~upload(_:to:)
  ~download(_:from:)
  ~delete(at:)
  ~isAuthenticated : Bool
  ~authenticate() 
}
class "MockItemTemplateRepository" as MockItemTemplateRepository << (C, DarkSeaGreen) >> { 
  -templates : [ItemTemplate]
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~fetchByCategory(_:)
  ~search(query:) 
}
class "MockPurchaseService" as MockPurchaseService << (C, DarkSeaGreen) >> { 
  ~fetchProducts()
  ~purchase(_:)
  ~restorePurchases()
  ~hasActiveSubscription() 
}
class "SnapshotError" as SnapshotError << (E, LightSteelBlue) enum >> { 
  ~cannotFindSimulatorHomeDirectory
  ~cannotRunOnPhysicalDevice
  ~debugDescription : String 
}
class "Snapshot" as Snapshot << (C, DarkSeaGreen) >> { 
  ~{static} app : XCUIApplication?
  ~{static} waitForAnimations
  ~{static} cacheDirectory : URL?
  ~{static} screenshotsDirectory : URL? 
}
class "ScreenshotDebug" as ScreenshotDebug << (C, DarkSeaGreen) >> { 
  ~testTakeSingleScreenshot() 
}
class "HomeInventoryModularUITests" as HomeInventoryModularUITests << (C, DarkSeaGreen) >> { 
  ~app : XCUIApplication!
  ~setUpWithError()
  ~tearDownWithError()
  ~testTakeScreenshots()
  ~testAccessibilityScreenshots() 
}
class "iPadDragDropModifier" as iPadDragDropModifier << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body(content:)
  -itemProvider(for:) 
}
class "iPadDropDestinationModifier" as iPadDropDestinationModifier << (S, SkyBlue) struct >> { 
  ~supportedTypes : [UTType]
  ~onDrop : ([NSItemProvider]) -> Bool
  -isTargeted
  ~body(content:) 
}
class "MultiItemDragProvider" as MultiItemDragProvider << (S, SkyBlue) struct >> { 
  ~{static} createProvider(for:) 
}
class "DragPreview" as DragPreview << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "ItemDropHandler" as ItemDropHandler << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~handleDrop(providers:to:)
  ~handleCSVDrop(providers:) 
}
class "DragSession" as DragSession << (C, DarkSeaGreen) >> { 
  ~isDragging
  ~draggedItems : [Item]
  ~dropLocation : CGPoint
  ~startDrag(items:)
  ~endDrag() 
}
class "iPadKeyboardShortcutsModifier" as iPadKeyboardShortcutsModifier << (S, SkyBlue) struct >> { 
  ~navigationState : iPadNavigationState
  -searchText
  -isSearchFocused : Bool
  ~body(content:)
  -setupKeyCommands()
  -handleTabChange(_:)
  -handleKeyboardShortcut(_:) 
}
class "KeyboardNavigationModifier" as KeyboardNavigationModifier << (S, SkyBlue) struct >> { 
  -focusedField : FocusableField?
  ~body(content:)
  -handleTabNavigation(forward:)
  -handleReturnKey() 
}
class "FocusableField" as KeyboardNavigationModifier.FocusableField << (E, LightSteelBlue) enum >> { 
  ~searchField
  ~nameField
  ~priceField
  ~quantityField
  ~notesField 
}
class "KeyboardShortcutHelpView" as KeyboardShortcutHelpView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "ShortcutRow" as ShortcutRow << (S, SkyBlue) struct >> { 
  ~key : String
  ~description : String
  ~body : some View 
}
class "SmartCategoryDemoView" as SmartCategoryDemoView << (S, SkyBlue) struct >> { 
  -itemName
  -brand
  -model
  -description
  -selectedCategory : ItemCategory
  -suggestedCategory : ItemCategory?
  -suggestionConfidence : Double
  -showSuggestion
  ~body : some View
  -updateCategorySuggestion() 
}
class "SmartCategoryExampleUsage" as SmartCategoryExampleUsage << (S, SkyBlue) struct >> { 
  -name
  -brand
  -category : ItemCategory
  -showingSuggestion
  -suggestedCategory : ItemCategory?
  ~body : some View
  -updateSuggestion() 
}
class "SmartCategoryDemo_Previews" as SmartCategoryDemo_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "HomeInventoryWidgetBundle" as HomeInventoryWidgetBundle << (S, SkyBlue) struct >> { 
  ~body : some Widget 
}
class "iPadApp" as iPadApp << (S, SkyBlue) struct >> { 
  -navigationState
  -coordinator
  -horizontalSizeClass
  -verticalSizeClass
  -showKeyboardShortcuts
  ~body : some View
  -iPadInterface : some View
  -iPhoneInterface : some View
  -isIPad : Bool
  -shouldUseColumnView : Bool
  -setupIPadFeatures()
  -configureDragDrop()
  -configurePointerInteractions() 
}
class "MultitaskingModifier" as MultitaskingModifier << (S, SkyBlue) struct >> { 
  ~body(content:) 
}
class "WindowAccessor" as WindowAccessor << (S, SkyBlue) struct >> { 
  ~makeUIView(context:)
  ~updateUIView(_:context:) 
}
class "iPadSceneDelegate" as iPadSceneDelegate << (S, SkyBlue) struct >> { 
  -coordinator
  ~body : some Scene 
}
class "SlideOverModifier" as SlideOverModifier << (S, SkyBlue) struct >> { 
  -slideOverWidth : CGFloat
  -isSlideOverVisible
  ~body(content:) 
}
class "SlideOverPanel" as SlideOverPanel << (S, SkyBlue) struct >> { 
  ~width : CGFloat
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "PointerInteractionModifier" as PointerInteractionModifier << (S, SkyBlue) struct >> { 
  -isHovered
  ~body(content:) 
}
class "PointerStyle" as PointerStyle << (E, LightSteelBlue) enum >> { 
  ~automatic
  ~lift
  ~highlight 
}
class "iPadColumnView" as iPadColumnView << (S, SkyBlue) struct >> { 
  -viewModel
  ~coordinator : AppCoordinator
  -horizontalSizeClass
  ~body : some View
  -threeColumnLayout : some View
  -twoColumnLayout : some View
  -singleColumnLayout : some View
  -masterColumn : some View
  -masterContent : some View
  -middleColumn : some View
  -detailColumn : some View
  -middleColumnTitle : String 
}
class "ColumnViewModel" as ColumnViewModel << (C, DarkSeaGreen) >> { 
  ~masterViewMode
  ~selectedCategoryEnum : ItemCategory?
  ~selectedCollection : UUID?
  ~selectedLocation : UUID?
  ~selectedItem : Item?
  ~showSearch
  ~showBarcodeSearch
  ~showAddItem
  ~searchText
  ~items : [Item]
  ~collections : [UUID]
  ~locations : [UUID]
  ~filteredItems : [Item]
  ~middleColumnTitle : String 
}
class "MasterViewMode" as MasterViewMode << (E, LightSteelBlue) enum >> { 
  ~categories
  ~collections
  ~locations 
}
class "CategoryRow" as CategoryRow << (S, SkyBlue) struct >> { 
  ~category : ItemCategory
  ~isSelected : Bool
  ~itemCount : Int
  ~body : some View 
}
class "ItemRow" as ItemRow << (S, SkyBlue) struct >> { 
  ~item : Item
  ~isSelected : Bool
  ~body : some View 
}
class "ItemDetailPlaceholder" as ItemDetailPlaceholder << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "DetailRow" as DetailRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "HomeInventoryModularApp" as HomeInventoryModularApp << (S, SkyBlue) struct >> { 
  ~appDelegate
  -coordinator
  -settingsStorage
  -selectedItem : Item?
  -showingItem
  ~init()
  ~body : some Scene
  -handleSpotlightActivity(_:) 
}
class "AppDelegate" as AppDelegate << (C, DarkSeaGreen) >> { 
  ~application(_:didFinishLaunchingWithOptions:)
  -setupCrashReporting()
  -checkForPreviousCrash()
  ~application(_:didRegisterForRemoteNotificationsWithDeviceToken:)
  ~application(_:didFailToRegisterForRemoteNotificationsWithError:)
  ~application(_:didReceiveRemoteNotification:fetchCompletionHandler:)
  ~applicationDidEnterBackground(_:)
  ~applicationWillEnterForeground(_:)
  ~applicationWillTerminate(_:) 
}
class "ResourceBundleClass" as ResourceBundleClass << (C, DarkSeaGreen) >> {  
}
class "ReceiptsTests" as ReceiptsTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "ReceiptDetailViewModel" as ReceiptDetailViewModel << (C, DarkSeaGreen) >> { 
  ~receipt : Receipt
  ~linkedItems : [Item]
  ~isLoadingItems
  ~showingEditView
  ~showingDeleteConfirmation
  -receiptRepository : any ReceiptRepository
  -itemRepository : any ItemRepository
  ~init(receipt:receiptRepository:itemRepository:)
  ~loadLinkedItems()
  ~deleteReceipt() 
}
class "ReceiptsListViewModel" as ReceiptsListViewModel << (C, DarkSeaGreen) >> { 
  ~receipts : [Receipt]
  ~isLoading
  ~errorMessage : String?
  -receiptRepository : any ReceiptRepository
  -itemRepository : any ItemRepository
  -ocrService : any OCRServiceProtocol
  -cancellables
  ~init(receiptRepository:itemRepository:ocrService:)
  ~groupedReceipts : [(key: String, value: [Receipt])]
  ~loadReceipts()
  ~deleteReceipt(_:)
  -formatMonth(_:)
  ~makeAddReceiptView()
  ~makeReceiptDetailView(for:) 
}
class "ReceiptImportViewModel" as ReceiptImportViewModel << (C, DarkSeaGreen) >> { 
  ~isLoading
  ~errorMessage : String?
  -emailService : EmailServiceProtocol
  -ocrService : OCRServiceProtocol
  -completion : (Receipt) -> Void
  ~init(emailService:ocrService:completion:)
  ~importFromEmail()
  ~importFromCamera() 
}
class "ReceiptPreviewViewModel" as ReceiptPreviewViewModel << (C, DarkSeaGreen) >> { 
  ~parsedData : ParsedReceiptData
  ~isLoading
  -receiptRepository : any ReceiptRepository
  -itemRepository : any ItemRepository
  -completion : (Receipt) -> Void
  ~init(parsedData:receiptRepository:itemRepository:completion:)
  ~saveReceipt() 
}
class "ReceiptRepositoryImplementation" as ReceiptRepositoryImplementation << (C, DarkSeaGreen) >> { 
  -receipts : [Receipt]
  -queue
  ~init()
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~delete(_:)
  ~saveAll(_:)
  ~delete(id:)
  ~fetchByDateRange(from:to:)
  ~fetchByStore(_:)
  ~fetchByItemId(_:)
  ~fetchAboveAmount(_:) 
}
class "ReceiptsModule" as ReceiptsModule << (C, DarkSeaGreen) >> { 
  -dependencies : ReceiptsModuleDependencies
  +init(dependencies:)
  +makeReceiptsListView()
  +makeReceiptDetailView(receipt:)
  +makeReceiptImportView(completion:)
  +makeReceiptPreviewView(parsedData:completion:) 
}
class "ReceiptsModuleDependencies" as ReceiptsModuleDependencies << (S, SkyBlue) struct >> { 
  +receiptRepository : any ReceiptRepository
  +itemRepository : any ItemRepository
  +emailService : any EmailServiceProtocol
  +ocrService : any OCRServiceProtocol
  +init(receiptRepository:itemRepository:emailService:ocrService:) 
}
class "ParsedReceiptData" as ParsedReceiptData << (S, SkyBlue) struct >> { 
  +storeName : String
  +date : Date
  +totalAmount : Decimal
  +items : [ParsedReceiptItem]
  +confidence : Double
  +rawText : String?
  +imageData : Data?
  +init(storeName:date:totalAmount:items:confidence:rawText:imageData:) 
}
class "ParsedReceiptItem" as ParsedReceiptItem << (S, SkyBlue) struct >> { 
  +name : String
  +quantity : Int
  +price : Decimal
  +category : ItemCategory?
  +init(name:quantity:price:category:) 
}
class "DocumentScannerView" as DocumentScannerView << (S, SkyBlue) struct >> { 
  ~scannedImages : [UIImage]
  -dismiss
  ~completion : ([UIImage]) -> Void
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:)
  ~makeCoordinator() 
}
class "Coordinator" as DocumentScannerView.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : DocumentScannerView
  ~init(_:)
  ~documentCameraViewController(_:didFinishWith:)
  ~documentCameraViewControllerDidCancel(_:)
  ~documentCameraViewController(_:didFailWithError:) 
}
class "DocumentScannerWrapper" as DocumentScannerWrapper << (S, SkyBlue) struct >> { 
  ~scannedImages : [UIImage]
  ~completion : ([UIImage]) -> Void
  -showingUnavailable
  ~body : some View 
}
class "MultiPageReceiptView" as MultiPageReceiptView << (S, SkyBlue) struct >> { 
  ~images : [UIImage]
  -currentPage
  -dismiss
  ~onSave : ([UIImage]) -> Void
  ~body : some View 
}
class "ReceiptPreviewView" as ReceiptPreviewView << (S, SkyBlue) struct >> { 
  -viewModel : ReceiptPreviewViewModel
  ~init(viewModel:)
  ~body : some View 
}
class "ReceiptsListView" as ReceiptsListView << (S, SkyBlue) struct >> { 
  -viewModel : ReceiptsListViewModel
  -showingImport
  ~init(viewModel:)
  ~body : some View
  -emptyStateView : some View
  -receiptsList : some View
  -destinationView(for:) 
}
class "ReceiptRowView" as ReceiptRowView << (S, SkyBlue) struct >> { 
  ~receipt : Receipt
  ~body : some View 
}
class "ReceiptDetailView" as ReceiptDetailView << (S, SkyBlue) struct >> { 
  -viewModel : ReceiptDetailViewModel
  -showingFullScreenImage
  -dismiss
  ~init(viewModel:)
  ~body : some View
  -receiptImageSection(_:)
  -storeInfoSection : some View
  -linkedItemsSection : some View
  -notesSection(_:)
  -metadataSection : some View 
}
class "InfoRow" as InfoRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~valueColor : Color
  ~body : some View 
}
class "LinkedItemRow" as LinkedItemRow << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "FullScreenImageView" as FullScreenImageView << (S, SkyBlue) struct >> { 
  ~image : UIImage
  -dismiss
  -scale : CGFloat
  -lastScale : CGFloat
  -offset : CGSize
  -lastOffset : CGSize
  ~body : some View 
}
class "AddReceiptView" as AddReceiptView << (S, SkyBlue) struct >> { 
  -viewModel : AddReceiptViewModel
  -dismiss
  -showingImagePicker
  -showingCamera
  -showingDocumentScanner
  -selectedImage : UIImage?
  -scannedImages : [UIImage]
  -focusedField : Field?
  ~init(viewModel:)
  ~body : some View
  -photoSection : some View
  -receiptInfoSection : some View
  -itemsSection : some View
  -linkedItemRow(_:)
  -notesSection : some View
  -toolbarContent : some ToolbarContent
  -photoOptionsDialog : some View
  -documentScannerSheet : some View
  -processingOverlay : some View
  -photoPlaceholder : some View
  -receiptImageView(_:) 
}
class "Field" as AddReceiptView.Field << (E, LightSteelBlue) enum >> { 
  ~storeName 
}
class "AddReceiptViewModel" as AddReceiptViewModel << (C, DarkSeaGreen) >> { 
  ~storeName
  ~date
  ~totalAmount : Decimal?
  ~notes
  ~linkedItems : [Item]
  ~showingItemPicker
  ~showError
  ~errorMessage
  ~isProcessingOCR
  ~ocrExtractedText
  ~showingMultiPageReceipt
  ~multiPageImages : [UIImage]
  -receiptRepository : any ReceiptRepository
  ~itemRepository : any ItemRepository
  -ocrService : any OCRServiceProtocol
  -completion : (Receipt) -> Void
  ~isValid : Bool
  ~init(receiptRepository:itemRepository:ocrService:completion:)
  ~unlinkItem(_:)
  ~processImage(_:)
  ~processMultiPageImages(_:)
  ~saveReceipt(image:) 
}
class "ImagePicker" as ImagePicker << (S, SkyBlue) struct >> { 
  ~selectedImage : UIImage?
  -dismiss
  ~sourceType : UIImagePickerController.SourceType
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:)
  ~makeCoordinator() 
}
class "Coordinator" as ImagePicker.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : ImagePicker
  ~init(_:)
  ~imagePickerController(_:didFinishPickingMediaWithInfo:)
  ~imagePickerControllerDidCancel(_:) 
}
class "ItemPickerView" as ItemPickerView << (S, SkyBlue) struct >> { 
  ~selectedItems : [Item]
  ~itemRepository : any ItemRepository
  -allItems : [Item]
  -searchText
  -isLoading
  -dismiss
  ~filteredItems : [Item]
  ~body : some View
  -toggleItem(_:) 
}
class "ItemPickerRow" as ItemPickerRow << (S, SkyBlue) struct >> { 
  ~item : Item
  ~isSelected : Bool
  ~onToggle : () -> Void
  ~body : some View 
}
class "ReceiptImportView" as ReceiptImportView << (S, SkyBlue) struct >> { 
  -viewModel : ReceiptImportViewModel
  ~init(viewModel:)
  ~body : some View 
}
class "TargetParser" as TargetParser << (S, SkyBlue) struct >> { 
  ~retailerName
  ~canParse(_:)
  ~parse(_:)
  -categorizeTargetItem(_:) 
}
class "WalmartParser" as WalmartParser << (S, SkyBlue) struct >> { 
  ~retailerName
  ~canParse(_:)
  ~parse(_:) 
}
class "AmazonParser" as AmazonParser << (S, SkyBlue) struct >> { 
  ~retailerName
  ~canParse(_:)
  ~parse(_:) 
}
class "AppleStoreParser" as AppleStoreParser << (S, SkyBlue) struct >> { 
  ~retailerName
  ~canParse(_:)
  ~parse(_:) 
}
class "BestBuyParser" as BestBuyParser << (S, SkyBlue) struct >> { 
  ~retailerName
  ~canParse(_:)
  ~parse(_:) 
}
class "EnhancedReceiptParser" as EnhancedReceiptParser << (S, SkyBlue) struct >> { 
  -parsers : [RetailerParser]
  +init()
  +parse(_:)
  -genericParse(_:) 
}
class "VisionOCRService" as VisionOCRService << (C, DarkSeaGreen) >> { 
  ~extractText(from:)
  ~extractReceiptData(from:)
  -convertBoundingBox(_:imageSize:) 
}
class "OCRError" as OCRError << (E, LightSteelBlue) enum >> { 
  ~invalidImage
  ~noTextFound
  ~recognitionFailed(_:)
  ~errorDescription : String? 
}
class "ReceiptParser" as ReceiptParser << (S, SkyBlue) struct >> { 
  ~parse(_:)
  -detectStoreName(from:)
  -detectDate(from:)
  -detectTotalAmount(from:)
  -detectItems(from:) 
}
class "ItemTests" as ItemTests << (C, DarkSeaGreen) >> { 
  ~testItemCreation()
  ~testItemEquality() 
}
class "ItemTemplate" as ItemTemplate << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +templateName : String
  +brand : String?
  +model : String?
  +category : ItemCategory
  +condition : ItemCondition
  +tags : [String]
  +notes : String?
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:templateName:brand:model:category:condition:tags:notes:createdAt:updatedAt:) 
}
class "ErrorBoundaryView" as ErrorBoundaryView<Content: View> << (S, SkyBlue) struct >> { 
  ~content : () -> Content
  ~errorView : (Error) -> AnyView
  -currentError : Error?
  +init(content:errorView:)
  +body : some View 
}
class "ErrorFallbackView" as ErrorFallbackView << (S, SkyBlue) struct >> { 
  +init()
  +body : some View 
}
class "DefaultStorageUnitRepository" as DefaultStorageUnitRepository << (C, DarkSeaGreen) >> { 
  -storageUnits : [StorageUnit]
  -queue
  +init()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetchByLocation(_:)
  +fetchByType(_:)
  +search(query:)
  +fetchWithAvailableCapacity()
  +updateItemCount(for:count:)
  +fetchByItemId(_:) 
}
class "DefaultSavedSearchRepository" as DefaultSavedSearchRepository << (C, DarkSeaGreen) >> { 
  -userDefaults : UserDefaults
  -storageKey
  +init(userDefaults:)
  +fetchAll()
  +fetchPinned()
  +save(_:)
  +update(_:)
  +delete(_:)
  +deleteAll()
  +recordUsage(of:) 
}
class "DefaultDocumentRepository" as DefaultDocumentRepository << (C, DarkSeaGreen) >> { 
  -documents : [Document]
  -userDefaults
  -storageKey
  +init()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetchByItemId(_:)
  +fetchByCategory(_:)
  +search(query:)
  +fetchByTags(_:)
  +updateSearchableText(documentId:text:)
  +getTotalStorageSize()
  -saveToStorage()
  -loadFromStorage() 
}
class "FileDocumentStorage" as FileDocumentStorage << (C, DarkSeaGreen) >> { 
  -documentsDirectory : URL
  +init()
  +saveDocument(_:documentId:)
  +loadDocument(documentId:)
  +deleteDocument(documentId:)
  +getDocumentURL(documentId:)
  +documentExists(documentId:) 
}
class "DocumentStorageError" as DocumentStorageError << (E, LightSteelBlue) enum >> { 
  +directoryNotFound
  +documentNotFound
  +saveFailed
  +deleteFailed
  +errorDescription : String? 
}
class "OfflineRepository" as OfflineRepository<T: Codable & Identifiable\nR: Repository> << (C, DarkSeaGreen) >> { 
  -onlineRepository : R
  -offlineStorage
  -offlineQueue
  -networkMonitor
  -cacheKey : String
  -changesSubject
  +changesPublisher : AnyPublisher<RepositoryChange<T>, Never>
  +init(wrapping:cacheKey:)
  +fetchAll()
  +fetch(by:)
  +save(_:)
  +delete(_:) 
}
class "RepositoryChange" as RepositoryChange<T> << (E, LightSteelBlue) enum >> { 
  +created(_:)
  +updated(_:)
  +deleted(_:) 
}
class "OfflineError" as OfflineError << (E, LightSteelBlue) enum >> { 
  +noOfflineData
  +syncInProgress
  +networkUnavailable
  +errorDescription : String? 
}
class "OfflineItemOperation" as OfflineItemOperation << (S, SkyBlue) struct >> { 
  ~item : Data
  ~repositoryKey : String
  ~itemType : String
  ~init(item:repositoryKey:) 
}
class "OfflineSyncCoordinator" as OfflineSyncCoordinator << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isSyncing
  +syncProgress : Double
  +lastSyncDate : Date?
  +pendingOperations : Int
  -offlineQueue
  -networkMonitor
  -cancellables
  -init()
  -setupNetworkMonitoring()
  +syncNow()
  -performSync()
  -saveLastSyncDate()
  -loadLastSyncDate() 
}
class "DefaultCollectionRepository" as DefaultCollectionRepository << (C, DarkSeaGreen) >> { 
  -collections : [Collection]
  +init()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetchByItemId(_:)
  +addItem(_:to:)
  +removeItem(_:from:)
  +fetchActive()
  +fetchArchived()
  +archive(_:)
  +unarchive(_:) 
}
class "RepositoryError" as RepositoryError << (E, LightSteelBlue) enum >> { 
  ~notFound
  ~errorDescription : String? 
}
class "DefaultOfflineScanQueueRepository" as DefaultOfflineScanQueueRepository << (C, DarkSeaGreen) >> { 
  -queue : [OfflineScanQueueEntry]
  -userDefaults
  -storageKey
  +init()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetchPending()
  +fetchByStatus(_:)
  +updateStatus(id:status:)
  +incrementRetryCount(id:)
  +clearCompleted()
  -saveToStorage()
  -loadFromStorage() 
}
class "DefaultScanHistoryRepository" as DefaultScanHistoryRepository << (C, DarkSeaGreen) >> { 
  -entries : [ScanHistoryEntry]
  +init()
  +fetchAll()
  +fetchRecent(limit:)
  +fetch(id:)
  +save(_:)
  +delete(_:)
  +deleteAll()
  +fetchByBarcode(_:)
  +fetchByDateRange(from:to:) 
}
class "DefaultTagRepository" as DefaultTagRepository << (C, DarkSeaGreen) >> { 
  -tags : [Tag]
  -queue
  +init()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetchByItemId(_:)
  +search(query:)
  +incrementItemCount(for:)
  +decrementItemCount(for:)
  +fetchMostUsed(limit:)
  +findByName(_:) 
}
class "DefaultSearchHistoryRepository" as DefaultSearchHistoryRepository << (C, DarkSeaGreen) >> { 
  -userDefaults : UserDefaults
  -storageKey
  -maxHistoryItems
  +init(userDefaults:)
  +fetchRecent(limit:)
  +save(_:)
  +delete(_:)
  +deleteAll()
  +search(query:) 
}
class "InMemoryCategoryRepository" as InMemoryCategoryRepository << (C, DarkSeaGreen) >> { 
  -categories : [ItemCategoryModel]
  -queue
  +init()
  -{static} createBuiltInCategories()
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +search(query:)
  +fetchBuiltIn()
  +fetchCustom()
  +fetchByParent(id:)
  +canDelete(_:) 
}
class "BudgetPerformance" as BudgetPerformance << (S, SkyBlue) struct >> { 
  +id : UUID
  +budgetId : UUID
  +averageSpending : Decimal
  +monthsAnalyzed : Int
  +timesExceeded : Int
  +averagePercentageUsed : Double
  +trend : TrendDirection
  +savingsOpportunity : Decimal?
  +init(budgetId:averageSpending:monthsAnalyzed:timesExceeded:averagePercentageUsed:trend:savingsOpportunity:) 
}
class "DefaultCategoryRepository" as DefaultCategoryRepository << (C, DarkSeaGreen) >> { 
  -storage : any Storage<ItemCategoryModel>
  -itemRepository : any ItemRepository
  +init(storage:itemRepository:)
  +fetchAll()
  +fetch(id:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +search(query:)
  +fetchBuiltIn()
  +fetchCustom()
  +fetchByParent(id:)
  +canDelete(_:) 
}
class "CategoryError" as CategoryError << (E, LightSteelBlue) enum >> { 
  +cannotDeleteBuiltInCategory
  +cannotDeleteCategoryInUse
  +invalidParentCategory
  +errorDescription : String? 
}
class "MockBudgetRepository" as MockBudgetRepository << (C, DarkSeaGreen) >> { 
  -budgets : [UUID: Budget]
  -statuses : [UUID: BudgetStatus]
  -alerts : [BudgetAlert]
  -transactions : [BudgetTransaction]
  -historyEntries : [BudgetHistoryEntry]
  +init()
  +create(_:)
  +update(_:)
  +delete(_:)
  +fetch(id:)
  +fetchAll()
  +fetchActive()
  +fetchByCategory(_:)
  +getCurrentStatus(for:)
  +getHistoricalStatuses(for:limit:)
  +updateStatus(_:)
  +createAlert(_:)
  +fetchAlerts(for:)
  +fetchUnreadAlerts()
  +markAlertAsRead(_:)
  +recordTransaction(_:)
  +fetchTransactions(for:in:)
  +deleteTransaction(_:)
  +recordHistoryEntry(_:)
  +fetchHistory(for:limit:)
  +calculateSpending(for:in:)
  +getAverageSpending(for:periods:)
  +getBudgetPerformance(for:) 
}
class "PhotoRepositoryImpl" as PhotoRepositoryImpl << (C, DarkSeaGreen) >> { 
  -storage : PhotoStorageProtocol
  -photoCache : [UUID: Photo]
  -cacheQueue
  +init(storage:)
  +savePhoto(_:image:)
  +loadPhotos(for:)
  +loadPhoto(id:)
  +deletePhoto(id:)
  +updatePhotoOrder(itemId:photoIds:)
  +updatePhotoCaption(id:caption:) 
}
class "FilePhotoStorage" as FilePhotoStorage << (C, DarkSeaGreen) >> { 
  -documentsDirectory : URL
  -photosDirectory : URL
  -thumbnailsDirectory : URL
  +init()
  +savePhoto(_:for:)
  +loadPhoto(for:)
  +deletePhoto(for:)
  +generateThumbnail(_:size:) 
}
class "PhotoStorageError" as PhotoStorageError << (E, LightSteelBlue) enum >> { 
  +compressionFailed
  +photoNotFound
  +invalidImageData
  +errorDescription : String? 
}
class "MockWarrantyRepository" as MockWarrantyRepository0 << (C, DarkSeaGreen) >> { 
  -warranties : [UUID: Warranty]
  -queue
  +init()
  +create(_:)
  +update(_:)
  +delete(_:)
  +save(_:)
  +saveAll(_:)
  +delete(_:)
  +delete(id:)
  +fetch(id:)
  +fetch(by:)
  +fetchWarranties(for:)
  +warrantiesPublisher : AnyPublisher<[Warranty], Never>
  +fetchByItem(_:)
  +fetchAll()
  +fetchActive()
  +fetchExpiring(within:)
  +fetchExpired()
  +searchByProvider(_:)
  +attachDocument(_:to:)
  +removeDocument(_:from:) 
}
class "RetailerAnalytics" as RetailerAnalytics << (S, SkyBlue) struct >> { 
  +id : UUID
  +storeName : String
  +totalSpent : Decimal
  +itemCount : Int
  +averageItemPrice : Decimal
  +lastPurchaseDate : Date?
  +firstPurchaseDate : Date?
  +purchaseFrequency : PurchaseFrequency
  +topCategories : [CategorySpending]
  +monthlySpending : [MonthlySpending]
  +lastUpdated : Date
  +init(id:storeName:totalSpent:itemCount:averageItemPrice:lastPurchaseDate:firstPurchaseDate:purchaseFrequency:topCategories:monthlySpending:lastUpdated:) 
}
class "PurchaseFrequency" as PurchaseFrequency << (E, LightSteelBlue) enum >> { 
  +id : String
  +daily
  +weekly
  +monthly
  +occasional
  +rare
  +icon : String
  +color : String 
}
class "CategorySpending" as CategorySpending << (S, SkyBlue) struct >> { 
  +id : UUID
  +category : ItemCategory
  +totalSpent : Decimal
  +itemCount : Int
  +percentage : Double
  +init(id:category:totalSpent:itemCount:percentage:) 
}
class "MonthlySpending" as MonthlySpending << (S, SkyBlue) struct >> { 
  +id : UUID
  +month : Date
  +amount : Decimal
  +itemCount : Int
  +init(id:month:amount:itemCount:) 
}
class "StoreRanking" as StoreRanking << (S, SkyBlue) struct >> { 
  +id : UUID
  +storeName : String
  +metric : RankingMetric
  +value : Decimal
  +rank : Int
  +init(id:storeName:metric:value:rank:) 
}
class "RankingMetric" as RankingMetric << (E, LightSteelBlue) enum >> { 
  +totalSpent
  +itemCount
  +frequency
  +averageTransaction
  +icon : String 
}
class "RetailerInsights" as RetailerInsights << (S, SkyBlue) struct >> { 
  +favoriteStore : String?
  +totalStores : Int
  +totalSpentAllStores : Decimal
  +averagePerStore : Decimal
  +mostExpensiveStore : String?
  +mostFrequentStore : String?
  +categoryLeaders : [CategoryLeader]
  +init(favoriteStore:totalStores:totalSpentAllStores:averagePerStore:mostExpensiveStore:mostFrequentStore:categoryLeaders:) 
}
class "CategoryLeader" as CategoryLeader << (S, SkyBlue) struct >> { 
  +id : UUID
  +category : ItemCategory
  +storeName : String
  +itemCount : Int
  +averagePrice : Decimal
  +init(id:category:storeName:itemCount:averagePrice:) 
}
class "CSVImportConfiguration" as CSVImportConfiguration << (S, SkyBlue) struct >> { 
  +delimiter : String
  +hasHeaders : Bool
  +encodingName : String
  +dateFormat : String
  +currencySymbol : String
  +columnMapping : CSVColumnMapping
  +encoding : String.Encoding
  +init(delimiter:hasHeaders:encoding:dateFormat:currencySymbol:columnMapping:) 
}
class "CSVColumnMapping" as CSVColumnMapping << (S, SkyBlue) struct >> { 
  +name : Int?
  +brand : Int?
  +model : Int?
  +serialNumber : Int?
  +barcode : Int?
  +category : Int?
  +location : Int?
  +storeName : Int?
  +purchaseDate : Int?
  +purchasePrice : Int?
  +quantity : Int?
  +notes : Int?
  +tags : Int?
  +warrantyEndDate : Int?
  +condition : Int?
  +init()
  +isValid() 
}
class "CSVImportResult" as CSVImportResult << (S, SkyBlue) struct >> { 
  +totalRows : Int
  +successfulImports : Int
  +failedImports : Int
  +errors : [CSVImportError]
  +importedItems : [Item]
  +duplicateItems : [Item]
  +duration : TimeInterval
  +successRate : Double
  +init(totalRows:successfulImports:failedImports:errors:importedItems:duplicateItems:duration:) 
}
class "CSVImportError" as CSVImportError << (S, SkyBlue) struct >> { 
  +id
  +row : Int
  +column : String?
  +value : String?
  +reason : CSVImportErrorReason
  +description : String
  +init(row:column:value:reason:description:) 
}
class "CSVImportErrorReason" as CSVImportErrorReason << (E, LightSteelBlue) enum >> { 
  +missingRequiredField
  +invalidDateFormat
  +invalidNumberFormat
  +invalidCategory
  +invalidLocation
  +duplicateItem
  +parsingError
  +unknown 
}
class "CSVPreviewData" as CSVPreviewData << (S, SkyBlue) struct >> { 
  +headers : [String]
  +rows : [[String]]
  +totalRows : Int
  +hasHeaders : Bool
  +init(headers:rows:totalRows:hasHeaders:) 
}
class "CSVImportTemplate" as CSVImportTemplate << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +description : String
  +configuration : CSVImportConfiguration
  +sampleData : String
  +createdAt : Date
  +init(id:name:description:configuration:sampleData:createdAt:) 
}
class "Location" as Location << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +icon : String
  +parentId : UUID?
  +notes : String?
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:icon:parentId:notes:createdAt:updatedAt:)
  +fullPath(with:) 
}
class "Collection" as Collection << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +description : String?
  +icon : String
  +color : String
  +itemIds : [UUID]
  +isArchived : Bool
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:description:icon:color:itemIds:isArchived:createdAt:updatedAt:) 
}
class "ItemCategory" as ItemCategory << (E, LightSteelBlue) enum >> { 
  +electronics
  +furniture
  +clothing
  +books
  +kitchen
  +tools
  +sports
  +toys
  +jewelry
  +art
  +collectibles
  +appliances
  +outdoor
  +office
  +automotive
  +health
  +beauty
  +home
  +garden
  +other
  +icon : String
  +displayName : String
  +color : String 
}
class "ItemCondition" as ItemCondition << (E, LightSteelBlue) enum >> { 
  +new
  +likeNew
  +excellent
  +veryGood
  +good
  +fair
  +poor
  +forParts
  +displayName : String
  +icon : String
  +colorName : String 
}
class "SearchHistoryEntry" as SearchHistoryEntry << (S, SkyBlue) struct >> { 
  +id : UUID
  +query : String
  +searchType : SearchType
  +timestamp : Date
  +resultCount : Int
  +init(id:query:searchType:timestamp:resultCount:) 
}
class "SearchType" as SearchHistoryEntry.SearchType << (E, LightSteelBlue) enum >> { 
  +natural
  +barcode
  +advanced
  +icon : String
  +displayName : String 
}
class "PurchasePattern" as PurchasePattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +analysisDate : Date
  +periodAnalyzed : DateInterval
  +patterns : [PatternType]
  +insights : [PatternInsight]
  +recommendations : [PatternRecommendation]
  +init(id:analysisDate:periodAnalyzed:patterns:insights:recommendations:) 
}
class "PatternType" as PatternType << (E, LightSteelBlue) enum >> { 
  +recurring(_:)
  +seasonal(_:)
  +categoryPreference(_:)
  +brandLoyalty(_:)
  +priceRange(_:)
  +shoppingTime(_:)
  +retailerPreference(_:)
  +bulkBuying(_:)
  +id : String 
}
class "RecurringPattern" as RecurringPattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemName : String
  +category : ItemCategory
  +averageInterval : TimeInterval
  +frequency : PatternFrequency
  +lastPurchaseDate : Date
  +nextExpectedDate : Date
  +confidence : Double
  +init(id:itemName:category:averageInterval:frequency:lastPurchaseDate:nextExpectedDate:confidence:) 
}
class "PatternFrequency" as PatternFrequency << (E, LightSteelBlue) enum >> { 
  +daily
  +weekly
  +biweekly
  +monthly
  +quarterly
  +annually
  +irregular
  +days : Double 
}
class "SeasonalBuyingPattern" as SeasonalBuyingPattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +season : Season
  +categories : [ItemCategory]
  +averageSpending : Decimal
  +peakMonth : String
  +itemCount : Int
  +init(id:season:categories:averageSpending:peakMonth:itemCount:) 
}
class "CategoryPreference" as CategoryPreference << (S, SkyBlue) struct >> { 
  +id : UUID
  +category : ItemCategory
  +purchaseCount : Int
  +totalSpent : Decimal
  +averagePrice : Decimal
  +percentageOfTotal : Double
  +trend : TrendDirection
  +init(id:category:purchaseCount:totalSpent:averagePrice:percentageOfTotal:trend:) 
}
class "BrandLoyalty" as BrandLoyalty << (S, SkyBlue) struct >> { 
  +id : UUID
  +brand : String
  +category : ItemCategory
  +purchaseCount : Int
  +loyaltyScore : Double
  +averageRating : Double?
  +totalSpent : Decimal
  +init(id:brand:category:purchaseCount:loyaltyScore:averageRating:totalSpent:) 
}
class "PriceRangePattern" as PriceRangePattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +category : ItemCategory
  +minPrice : Decimal
  +maxPrice : Decimal
  +averagePrice : Decimal
  +sweetSpot : Decimal
  +priceDistribution : [PatternPriceRange: Int]
  +init(id:category:minPrice:maxPrice:averagePrice:sweetSpot:priceDistribution:) 
}
class "PatternPriceRange" as PatternPriceRange << (E, LightSteelBlue) enum >> { 
  +under10
  +range10to25
  +range25to50
  +range50to100
  +range100to250
  +range250to500
  +range500to1000
  +over1000 
}
class "ShoppingTimePattern" as ShoppingTimePattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +preferredDayOfWeek : String
  +preferredTimeOfDay : TimeOfDay
  +weekendVsWeekday : WeekdayPreference
  +monthlyDistribution : [Int: Int]
  +init(id:preferredDayOfWeek:preferredTimeOfDay:weekendVsWeekday:monthlyDistribution:) 
}
class "TimeOfDay" as TimeOfDay << (E, LightSteelBlue) enum >> { 
  +earlyMorning
  +morning
  +afternoon
  +evening
  +night 
}
class "WeekdayPreference" as WeekdayPreference << (E, LightSteelBlue) enum >> { 
  +weekday
  +weekend
  +mixed 
}
class "RetailerPreference" as RetailerPreference << (S, SkyBlue) struct >> { 
  +id : UUID
  +retailer : String
  +visitCount : Int
  +totalSpent : Decimal
  +averageBasketSize : Decimal
  +categories : [ItemCategory]
  +loyaltyRank : Int
  +init(id:retailer:visitCount:totalSpent:averageBasketSize:categories:loyaltyRank:) 
}
class "BulkBuyingPattern" as BulkBuyingPattern << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemType : String
  +category : ItemCategory
  +averageQuantity : Int
  +bulkSavings : Decimal
  +frequency : PatternFrequency
  +init(id:itemType:category:averageQuantity:bulkSavings:frequency:) 
}
class "PatternInsight" as PatternInsight << (S, SkyBlue) struct >> { 
  +id : UUID
  +type : InsightType
  +title : String
  +description : String
  +impact : InsightImpact
  +actionable : Bool
  +init(id:type:title:description:impact:actionable:) 
}
class "PatternRecommendation" as PatternRecommendation << (S, SkyBlue) struct >> { 
  +id : UUID
  +type : RecommendationType
  +title : String
  +description : String
  +potentialSavings : Decimal?
  +priority : RecommendationPriority
  +init(id:type:title:description:potentialSavings:priority:) 
}
class "RecommendationType" as RecommendationType << (E, LightSteelBlue) enum >> { 
  +bulkBuy
  +timing
  +alternative
  +budget
  +recurring
  +seasonal 
}
class "RecommendationPriority" as RecommendationPriority << (E, LightSteelBlue) enum >> { 
  +high
  +medium
  +low
  +color : String 
}
class "Item" as Item << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +brand : String?
  +model : String?
  +category : ItemCategory
  +categoryId : UUID
  +condition : ItemCondition
  +quantity : Int
  +value : Decimal?
  +purchasePrice : Decimal?
  +purchaseDate : Date?
  +notes : String?
  +barcode : String?
  +serialNumber : String?
  +tags : [String]
  +imageIds : [UUID]
  +locationId : UUID?
  +storageUnitId : UUID?
  +warrantyId : UUID?
  +storeName : String?
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:brand:model:category:categoryId:condition:quantity:value:purchasePrice:purchaseDate:notes:barcode:serialNumber:tags:imageIds:locationId:storageUnitId:warrantyId:storeName:createdAt:updatedAt:) 
}
class "SavedSearch" as SavedSearch << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +query : String
  +searchType : SearchHistoryEntry.SearchType
  +criteria : ItemSearchCriteria?
  +color : String
  +icon : String
  +createdAt : Date
  +lastUsedAt : Date
  +useCount : Int
  +isPinned : Bool
  +init(id:name:query:searchType:criteria:color:icon:createdAt:lastUsedAt:useCount:isPinned:)
  +withUpdatedUsage()
  +togglePinned() 
}
class "SavedSearchIcon" as SavedSearchIcon << (S, SkyBlue) struct >> { 
  +{static} all 
}
class "SavedSearchColor" as SavedSearchColor << (S, SkyBlue) struct >> { 
  +{static} all 
}
class "PrivacyPolicyAcceptance" as PrivacyPolicyAcceptance << (S, SkyBlue) struct >> { 
  +version : String
  +acceptedAt : Date
  +acceptedVersion : String
  +init(version:acceptedAt:acceptedVersion:) 
}
class "PrivacyPolicyVersion" as PrivacyPolicyVersion << (S, SkyBlue) struct >> { 
  +{static} current
  +{static} effectiveDate
  +{static} hasAcceptedCurrentVersion : Bool
  +{static} acceptCurrentVersion()
  -{static} acceptanceKey
  ~{static} loadAcceptance()
  -{static} saveAcceptance(_:) 
}
class "PrivacyConsentStatus" as PrivacyConsentStatus << (E, LightSteelBlue) enum >> { 
  +notAsked
  +accepted(version:date:)
  +declined
  +isAccepted : Bool
  +{static} current : PrivacyConsentStatus 
}
class "Receipt" as Receipt << (S, SkyBlue) struct >> { 
  +id : UUID
  +storeName : String
  +date : Date
  +totalAmount : Decimal
  +itemIds : [UUID]
  +imageData : Data?
  +rawText : String?
  +confidence : Double
  +createdAt : Date
  +updatedAt : Date
  +init(id:storeName:date:totalAmount:itemIds:imageData:rawText:confidence:createdAt:updatedAt:) 
}
class "Photo" as Photo << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemId : UUID
  +caption : String?
  +sortOrder : Int
  +createdAt : Date
  +updatedAt : Date
  +image : UIImage?
  +init(id:itemId:caption:sortOrder:createdAt:updatedAt:) 
}
class "CodingKeys" as Photo.CodingKeys << (E, LightSteelBlue) enum >> { 
  ~id 
}
class "Warranty" as Warranty << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemId : UUID
  +type : WarrantyType
  +provider : String
  +startDate : Date
  +endDate : Date
  +coverageDetails : String?
  +registrationNumber : String?
  +phoneNumber : String?
  +email : String?
  +website : String?
  +documentIds : [UUID]
  +notes : String?
  +isExtended : Bool
  +cost : Decimal?
  +createdAt : Date
  +updatedAt : Date
  +init(id:itemId:type:provider:startDate:endDate:coverageDetails:registrationNumber:phoneNumber:email:website:documentIds:notes:isExtended:cost:createdAt:updatedAt:) 
}
class "WarrantyType" as WarrantyType << (E, LightSteelBlue) enum >> { 
  +manufacturer
  +retailer
  +extended
  +protection
  +service
  +insurance
  +displayName : String
  +icon : String 
}
class "Status" as Warranty.Status << (E, LightSteelBlue) enum >> { 
  +active
  +expiringSoon(daysRemaining:)
  +expired
  +displayName : String
  +color : String
  +icon : String 
}
class "WarrantyProvider" as WarrantyProvider << (S, SkyBlue) struct >> { 
  +name : String
  +phoneNumber : String?
  +website : String?
  +email : String?
  +{static} commonProviders 
}
class "BarcodeFormat" as BarcodeFormat << (S, SkyBlue) struct >> { 
  +metadataObjectType : AVMetadataObject.ObjectType
  +name : String
  +description : String
  +example : String
  +isCommon : Bool
  +{static} allFormats : [BarcodeFormat]
  +{static} allMetadataTypes : [AVMetadataObject.ObjectType]
  +{static} commonMetadataTypes : [AVMetadataObject.ObjectType]
  +{static} format(for:)
  +{static} validate(barcode:type:)
  -{static} validateEAN13(_:)
  -{static} validateEAN8(_:)
  -{static} validateUPCE(_:)
  -{static} validateCode39(_:)
  -{static} validateChecksum(_:) 
}
class "FormatGroup" as BarcodeFormat.FormatGroup << (E, LightSteelBlue) enum >> { 
  +retail
  +industrial
  +twoDimensional
  +formats : [BarcodeFormat] 
}
class "Document" as Document << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +type : DocumentType
  +category : DocumentCategory
  +subcategory : String?
  +fileSize : Int64
  +mimeType : String
  +itemId : UUID?
  +receiptId : UUID?
  +warrantyId : UUID?
  +tags : [String]
  +notes : String?
  +pageCount : Int?
  +thumbnailData : Data?
  +searchableText : String?
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:type:category:subcategory:fileSize:mimeType:itemId:receiptId:warrantyId:tags:notes:pageCount:thumbnailData:searchableText:createdAt:updatedAt:)
  +formattedFileSize : String
  +isPDF : Bool
  +isImage : Bool 
}
class "DocumentType" as Document.DocumentType << (E, LightSteelBlue) enum >> { 
  +pdf
  +image
  +text
  +other
  +icon : String
  +{static} from(mimeType:) 
}
class "DocumentCategory" as Document.DocumentCategory << (E, LightSteelBlue) enum >> { 
  +receipt
  +manual
  +warranty
  +invoice
  +certificate
  +insurance
  +contract
  +specification
  +other
  +displayName : String
  +icon : String
  +color : String
  +subcategories : [String] 
}
class "ItemCategoryModel" as ItemCategoryModel << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +icon : String
  +color : String
  +isBuiltIn : Bool
  +parentId : UUID?
  +sortOrder : Int
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:icon:color:isBuiltIn:parentId:sortOrder:createdAt:updatedAt:) 
}
class "Budget" as Budget << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +description : String?
  +amount : Decimal
  +period : BudgetPeriod
  +category : ItemCategory?
  +startDate : Date
  +endDate : Date?
  +isActive : Bool
  +notificationThreshold : Double
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:description:amount:period:category:startDate:endDate:isActive:notificationThreshold:createdAt:updatedAt:) 
}
class "BudgetPeriod" as BudgetPeriod << (E, LightSteelBlue) enum >> { 
  +daily
  +weekly
  +biweekly
  +monthly
  +quarterly
  +yearly
  +custom
  +days : Int
  +icon : String 
}
class "BudgetStatus" as BudgetStatus << (S, SkyBlue) struct >> { 
  +id : UUID
  +budgetId : UUID
  +periodStart : Date
  +periodEnd : Date
  +spent : Decimal
  +remaining : Decimal
  +percentageUsed : Double
  +itemCount : Int
  +isOverBudget : Bool
  +projectedSpending : Decimal?
  +lastUpdated : Date
  +init(id:budgetId:periodStart:periodEnd:spent:remaining:percentageUsed:itemCount:isOverBudget:projectedSpending:lastUpdated:) 
}
class "BudgetAlert" as BudgetAlert << (S, SkyBlue) struct >> { 
  +id : UUID
  +budgetId : UUID
  +type : BudgetAlertType
  +title : String
  +message : String
  +percentageUsed : Double
  +amountSpent : Decimal
  +amountRemaining : Decimal
  +createdAt : Date
  +isRead : Bool
  +init(id:budgetId:type:title:message:percentageUsed:amountSpent:amountRemaining:createdAt:isRead:) 
}
class "BudgetAlertType" as BudgetAlertType << (E, LightSteelBlue) enum >> { 
  +threshold
  +exceeded
  +projected
  +periodEnding
  +icon : String
  +color : String 
}
class "BudgetTransaction" as BudgetTransaction << (S, SkyBlue) struct >> { 
  +id : UUID
  +budgetId : UUID
  +itemId : UUID
  +amount : Decimal
  +date : Date
  +category : ItemCategory
  +itemName : String
  +storeName : String?
  +init(id:budgetId:itemId:amount:date:category:itemName:storeName:) 
}
class "BudgetHistoryEntry" as BudgetHistoryEntry << (S, SkyBlue) struct >> { 
  +id : UUID
  +budgetId : UUID
  +period : DateInterval
  +budgetAmount : Decimal
  +actualSpent : Decimal
  +itemCount : Int
  +wasOverBudget : Bool
  +percentageUsed : Double
  +init(id:budgetId:period:budgetAmount:actualSpent:itemCount:wasOverBudget:percentageUsed:) 
}
class "OfflineScanQueueEntry" as OfflineScanQueueEntry << (S, SkyBlue) struct >> { 
  +id : UUID
  +barcode : String
  +scanDate : Date
  +retryCount : Int
  +lastRetryDate : Date?
  +status : QueueStatus
  +errorMessage : String?
  +init(id:barcode:scanDate:retryCount:lastRetryDate:status:errorMessage:) 
}
class "QueueStatus" as OfflineScanQueueEntry.QueueStatus << (E, LightSteelBlue) enum >> { 
  +pending
  +processing
  +completed
  +failed 
}
class "CSVExportConfiguration" as CSVExportConfiguration << (S, SkyBlue) struct >> { 
  +delimiter : String
  +includeHeaders : Bool
  +encodingName : String
  +dateFormat : String
  +currencySymbol : String
  +includeAllFields : Bool
  +selectedFields : Set<CSVExportField>
  +sortBy : CSVExportSortField
  +sortAscending : Bool
  +encoding : String.Encoding
  +init(delimiter:includeHeaders:encoding:dateFormat:currencySymbol:includeAllFields:selectedFields:sortBy:sortAscending:) 
}
class "CSVExportField" as CSVExportField << (E, LightSteelBlue) enum >> { 
  +name
  +brand
  +model
  +serialNumber
  +barcode
  +category
  +location
  +storeName
  +purchaseDate
  +purchasePrice
  +quantity
  +condition
  +warrantyEndDate
  +tags
  +notes
  +createdAt
  +updatedAt
  +displayName : String 
}
class "CSVExportSortField" as CSVExportSortField << (E, LightSteelBlue) enum >> { 
  +name
  +category
  +purchaseDate
  +purchasePrice
  +createdAt
  +displayName : String 
}
class "CSVExportResult" as CSVExportResult << (S, SkyBlue) struct >> { 
  +data : Data
  +fileName : String
  +itemCount : Int
  +fileSize : Int
  +duration : TimeInterval
  +fileSizeFormatted : String
  +init(data:fileName:itemCount:fileSize:duration:) 
}
class "CSVExportTemplate" as CSVExportTemplate << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +description : String
  +configuration : CSVExportConfiguration
  +createdAt : Date
  +init(id:name:description:configuration:createdAt:) 
}
class "Tag" as Tag << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +color : String
  +icon : String?
  +itemCount : Int
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:color:icon:itemCount:createdAt:updatedAt:) 
}
class "TimeBasedAnalytics" as TimeBasedAnalytics << (S, SkyBlue) struct >> { 
  +id : UUID
  +period : AnalyticsPeriod
  +startDate : Date
  +endDate : Date
  +metrics : TimeMetrics
  +trends : [TrendData]
  +comparisons : PeriodComparison?
  +insights : [TimeInsight]
  +lastUpdated : Date
  +init(id:period:startDate:endDate:metrics:trends:comparisons:insights:lastUpdated:) 
}
class "AnalyticsPeriod" as AnalyticsPeriod << (E, LightSteelBlue) enum >> { 
  +day
  +week
  +month
  +quarter
  +year
  +custom
  +calendarComponent : Calendar.Component 
}
class "TimeMetrics" as TimeMetrics << (S, SkyBlue) struct >> { 
  +totalSpent : Decimal
  +itemsAdded : Int
  +averageItemValue : Decimal
  +mostExpensiveItem : Item?
  +mostActiveDay : Date?
  +categoryBreakdown : [CategoryTimeMetric]
  +storeBreakdown : [StoreTimeMetric]
  +init(totalSpent:itemsAdded:averageItemValue:mostExpensiveItem:mostActiveDay:categoryBreakdown:storeBreakdown:) 
}
class "CategoryTimeMetric" as CategoryTimeMetric << (S, SkyBlue) struct >> { 
  +id : UUID
  +category : ItemCategory
  +totalSpent : Decimal
  +itemCount : Int
  +percentageOfTotal : Double
  +init(id:category:totalSpent:itemCount:percentageOfTotal:) 
}
class "StoreTimeMetric" as StoreTimeMetric << (S, SkyBlue) struct >> { 
  +id : UUID
  +storeName : String
  +totalSpent : Decimal
  +itemCount : Int
  +percentageOfTotal : Double
  +init(id:storeName:totalSpent:itemCount:percentageOfTotal:) 
}
class "TrendData" as TrendData << (S, SkyBlue) struct >> { 
  +id : UUID
  +date : Date
  +value : Decimal
  +itemCount : Int
  +label : String
  +init(id:date:value:itemCount:label:) 
}
class "PeriodComparison" as PeriodComparison << (S, SkyBlue) struct >> { 
  +previousPeriod : TimeMetrics
  +spendingChange : Decimal
  +spendingChangePercentage : Double
  +itemCountChange : Int
  +itemCountChangePercentage : Double
  +trend : TrendDirection
  +init(previousPeriod:spendingChange:spendingChangePercentage:itemCountChange:itemCountChangePercentage:trend:) 
}
class "TrendDirection" as TrendDirection << (E, LightSteelBlue) enum >> { 
  +up
  +down
  +stable
  +icon : String
  +color : String 
}
class "TimeInsight" as TimeInsight << (S, SkyBlue) struct >> { 
  +id : UUID
  +type : InsightType
  +title : String
  +description : String
  +impact : InsightImpact
  +init(id:type:title:description:impact:) 
}
class "InsightType" as InsightType << (E, LightSteelBlue) enum >> { 
  +spending
  +acquisition
  +category
  +seasonal
  +anomaly
  +icon : String 
}
class "InsightImpact" as InsightImpact << (E, LightSteelBlue) enum >> { 
  +high
  +medium
  +low
  +color : String 
}
class "SeasonalPattern" as SeasonalPattern << (S, SkyBlue) struct >> { 
  +season : Season
  +averageSpending : Decimal
  +typicalCategories : [ItemCategory]
  +peakMonth : String
  +init(season:averageSpending:typicalCategories:peakMonth:) 
}
class "Season" as Season << (E, LightSteelBlue) enum >> { 
  +spring
  +summer
  +fall
  +winter
  +months : [Int]
  +icon : String 
}
class "DepreciationReport" as DepreciationReport << (S, SkyBlue) struct >> { 
  +id : UUID
  +generatedDate : Date
  +items : [DepreciatingItem]
  +totalOriginalValue : Decimal
  +totalCurrentValue : Decimal
  +totalDepreciation : Decimal
  +depreciationPercentage : Double
  +init(id:generatedDate:items:totalOriginalValue:totalCurrentValue:totalDepreciation:depreciationPercentage:) 
}
class "DepreciatingItem" as DepreciatingItem << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemId : UUID
  +itemName : String
  +category : ItemCategory
  +purchaseDate : Date
  +purchasePrice : Decimal
  +currentValue : Decimal
  +depreciationAmount : Decimal
  +depreciationPercentage : Double
  +ageInYears : Double
  +depreciationMethod : DepreciationMethod
  +estimatedLifespan : Int?
  +salvageValue : Decimal?
  +init(id:itemId:itemName:category:purchaseDate:purchasePrice:currentValue:depreciationAmount:depreciationPercentage:ageInYears:depreciationMethod:estimatedLifespan:salvageValue:) 
}
class "DepreciationMethod" as DepreciationMethod << (E, LightSteelBlue) enum >> { 
  +straightLine
  +decliningBalance
  +categoryBased
  +custom
  +description : String 
}
class "DepreciationSchedule" as DepreciationSchedule << (S, SkyBlue) struct >> { 
  +id : UUID
  +itemId : UUID
  +method : DepreciationMethod
  +purchasePrice : Decimal
  +salvageValue : Decimal
  +usefulLife : Int
  +annualDepreciation : [AnnualDepreciation]
  +init(id:itemId:method:purchasePrice:salvageValue:usefulLife:annualDepreciation:) 
}
class "AnnualDepreciation" as AnnualDepreciation << (S, SkyBlue) struct >> { 
  +id : UUID
  +year : Int
  +depreciationAmount : Decimal
  +accumulatedDepreciation : Decimal
  +bookValue : Decimal
  +init(id:year:depreciationAmount:accumulatedDepreciation:bookValue:) 
}
class "CategoryDepreciationRule" as CategoryDepreciationRule << (S, SkyBlue) struct >> { 
  +category : ItemCategory
  +defaultLifespan : Int
  +defaultMethod : DepreciationMethod
  +salvagePercentage : Double
  +init(category:defaultLifespan:defaultMethod:salvagePercentage:) 
}
class "ScanHistoryEntry" as ScanHistoryEntry << (S, SkyBlue) struct >> { 
  +id : UUID
  +barcode : String
  +scanDate : Date
  +scanType : ScanType
  +itemId : UUID?
  +itemName : String?
  +itemThumbnail : String?
  +init(id:barcode:scanDate:scanType:itemId:itemName:itemThumbnail:) 
}
class "ScanType" as ScanHistoryEntry.ScanType << (E, LightSteelBlue) enum >> { 
  +single
  +batch
  +continuous 
}
class "StorageUnit" as StorageUnit << (S, SkyBlue) struct >> { 
  +id : UUID
  +name : String
  +type : StorageUnitType
  +locationId : UUID
  +description : String?
  +dimensions : Dimensions?
  +position : String?
  +capacity : Int?
  +currentItemCount : Int
  +photoId : UUID?
  +notes : String?
  +createdAt : Date
  +updatedAt : Date
  +init(id:name:type:locationId:description:dimensions:position:capacity:currentItemCount:photoId:notes:createdAt:updatedAt:) 
}
class "StorageUnitType" as StorageUnitType << (E, LightSteelBlue) enum >> { 
  +shelf
  +drawer
  +cabinet
  +closet
  +box
  +bin
  +container
  +rack
  +pegboard
  +safe
  +other
  +icon : String 
}
class "Dimensions" as Dimensions << (S, SkyBlue) struct >> { 
  +width : Double
  +height : Double
  +depth : Double
  +unit : MeasurementUnit
  +init(width:height:depth:unit:)
  +displayString : String 
}
class "MeasurementUnit" as MeasurementUnit << (E, LightSteelBlue) enum >> { 
  +inches
  +centimeters
  +feet
  +meters
  +abbreviation : String 
}
class "ItemShare" as ItemShare << (S, SkyBlue) struct >> { 
  +item : Item
  +locations : [Location]
  +init(item:locations:)
  +asText()
  +asJSON()
  +asCSV()
  +asURL()
  +asQRCodeData()
  -getLocationName()
  -formatCurrency(_:)
  -formatDate(_:)
  -escapeCSVValue(_:) 
}
class "ItemShareData" as ItemShareData << (S, SkyBlue) struct >> { 
  +name : String
  +brand : String?
  +model : String?
  +category : String
  +location : String?
  +quantity : Int
  +purchasePrice : Decimal?
  +purchaseDate : Date?
  +storeName : String?
  +serialNumber : String?
  +barcode : String?
  +condition : String
  +tags : [String]
  +notes : String? 
}
class "TermsOfServiceAcceptance" as TermsOfServiceAcceptance << (S, SkyBlue) struct >> { 
  +version : String
  +acceptedAt : Date
  +acceptedVersion : String
  +init(version:acceptedAt:acceptedVersion:) 
}
class "TermsOfServiceVersion" as TermsOfServiceVersion << (S, SkyBlue) struct >> { 
  +{static} current
  +{static} effectiveDate
  +{static} hasAcceptedCurrentVersion : Bool
  +{static} acceptCurrentVersion()
  -{static} acceptanceKey
  ~{static} loadAcceptance()
  -{static} saveAcceptance(_:) 
}
class "TermsConsentStatus" as TermsConsentStatus << (E, LightSteelBlue) enum >> { 
  +notAsked
  +accepted(version:date:)
  +declined
  +isAccepted : Bool
  +{static} current : TermsConsentStatus 
}
class "LegalAcceptanceStatus" as LegalAcceptanceStatus << (S, SkyBlue) struct >> { 
  +privacyAccepted : Bool
  +termsAccepted : Bool
  +allAccepted : Bool
  +{static} current : LegalAcceptanceStatus 
}
class "CoreModule" as CoreModule << (S, SkyBlue) struct >> { 
  +{static} configure()
  +{static} makePhotoRepository()
  +{static} makeCloudDocumentStorage()
  +{static} makeThumbnailService() 
}
class "EmailMessage" as EmailMessage << (S, SkyBlue) struct >> { 
  +id : String
  +subject : String
  +sender : String
  +recipient : String
  +date : Date
  +body : String
  +attachments : [EmailAttachment]
  +init(id:subject:sender:recipient:date:body:attachments:) 
}
class "EmailAttachment" as EmailAttachment << (S, SkyBlue) struct >> { 
  +name : String
  +mimeType : String
  +data : Data
  +init(name:mimeType:data:) 
}
class "ParsedEmailReceipt" as ParsedEmailReceipt << (S, SkyBlue) struct >> { 
  +storeName : String
  +date : Date
  +totalAmount : Decimal
  +confidence : Double
  +rawData : String
  +init(storeName:date:totalAmount:confidence:rawData:) 
}
class "SettingsKey" as SettingsKey << (S, SkyBlue) struct >> { 
  +key : String
  +init(_:)
  +init(stringLiteral:) 
}
class "OCRResult" as OCRResult << (S, SkyBlue) struct >> { 
  +text : String
  +confidence : Double
  +language : String?
  +regions : [OCRTextRegion]
  +init(text:confidence:language:regions:) 
}
class "OCRTextRegion" as OCRTextRegion << (S, SkyBlue) struct >> { 
  +text : String
  +confidence : Double
  +boundingBox : CGRect
  +init(text:confidence:boundingBox:)
  +init(text:confidence:) 
}
class "OCRReceiptData" as OCRReceiptData << (S, SkyBlue) struct >> { 
  +storeName : String?
  +date : Date?
  +totalAmount : Decimal?
  +items : [OCRReceiptItem]
  +confidence : Double
  +rawText : String
  +init(storeName:date:totalAmount:items:confidence:rawText:) 
}
class "OCRReceiptItem" as OCRReceiptItem << (S, SkyBlue) struct >> { 
  +name : String
  +price : Decimal?
  +quantity : Int?
  +init(name:price:quantity:) 
}
class "CSVExportService" as CSVExportService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -locationRepository : any LocationRepository
  -dateFormatter : DateFormatter
  -currencyFormatter : NumberFormatter
  +init(itemRepository:locationRepository:)
  +exportItems(items:configuration:)
  +exportFilteredItems(criteria:configuration:)
  +exportByCategory(category:configuration:)
  +exportByLocation(locationId:configuration:)
  -sortItems(_:configuration:)
  -buildHeaders(configuration:)
  -buildRow(for:configuration:locationMap:)
  -formatValue(for:item:locationMap:)
  -escapeCSVValue(_:)
  -generateFileName() 
}
class "CSVExportError" as CSVExportError << (E, LightSteelBlue) enum >> { 
  +encodingFailed
  +noItemsToExport
  +errorDescription : String? 
}
class "SmartCategoryService" as SmartCategoryService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -categoryKeywords : [ItemCategory: Set<String>]
  -brandCategories : [String: ItemCategory]
  -init()
  +suggestCategory(name:brand:model:description:)
  +suggestCategories(name:brand:model:description:limit:)
  +learnFromCorrection(name:brand:correctCategory:) 
}
class "FuzzySearchService" as FuzzySearchService << (C, DarkSeaGreen) >> { 
  +init()
  +levenshteinDistance(_:_:)
  +similarityScore(_:_:)
  +fuzzyContains(_:query:threshold:)
  +findBestMatches(query:in:keyPath:threshold:maxResults:)
  +suggestCorrections(for:from:maxSuggestions:)
  +phoneticallySimilar(_:_:) 
}
class "TimeBasedAnalyticsService" as TimeBasedAnalyticsService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -calendar
  +init(itemRepository:)
  +calculateAnalytics(for:startDate:)
  +getMonthlyTrends(months:)
  +getYearlyTrends(years:)
  +analyzeSeasonalPatterns()
  +getSpendingHeatmap(year:)
  +getAcquisitionRateAnalysis(period:)
  -getDateRange(for:startDate:)
  -fetchItemsInRange(_:)
  -calculateMetrics(for:in:)
  -calculateCategoryBreakdown(items:totalSpent:)
  -calculateStoreBreakdown(items:totalSpent:)
  -generateTrendData(for:period:in:)
  -formatPeriodLabel(date:period:)
  -calculatePeriodComparison(currentRange:period:currentMetrics:)
  -generateInsights(metrics:trends:comparison:period:)
  -calculateSeasonalPatterns(from:)
  -groupItemsByPeriod(_:period:in:)
  -getPeriodDate(index:from:period:) 
}
class "AcquisitionAnalysis" as AcquisitionAnalysis << (S, SkyBlue) struct >> { 
  +averageItemsPerPeriod : Double
  +peakPeriod : Date?
  +trend : TrendDirection
  +projectedNextPeriod : Int 
}
class "SpotlightIntegrationManager" as SpotlightIntegrationManager << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isIndexing
  +indexedItemCount
  +lastIndexDate : Date?
  -spotlightService
  -cancellables
  -itemRepository : (any ItemRepository)?
  -locationRepository : (any LocationRepository)?
  -indexingEnabledKey
  -lastIndexDateKey
  +isIndexingEnabled : Bool
  -init()
  +configure(itemRepository:locationRepository:)
  -setupNotificationObservers()
  +startIndexing()
  +reindexAll()
  +clearIndex()
  -indexItem(_:)
  -updateItem(_:)
  -removeItem(_:)
  +indexItems(_:)
  +removeItems(_:)
  +handleUserActivity(_:)
  -loadLastIndexDate()
  -saveLastIndexDate() 
}
class "UserDefaultsSettingsStorage" as UserDefaultsSettingsStorage << (C, DarkSeaGreen) >> { 
  -userDefaults : UserDefaults
  +init(userDefaults:)
  +string(forKey:)
  +set(_:forKey:)
  +bool(forKey:)
  +set(_:forKey:)
  +integer(forKey:)
  +set(_:forKey:)
  +double(forKey:)
  +set(_:forKey:) 
}
class "NotificationManager" as NotificationManager << (C, DarkSeaGreen) >> { 
  +{static} shared
  -notificationCenter
  -cancellables
  +isAuthorized
  +pendingNotifications : [NotificationRequest]
  +notificationSettings
  -init()
  +requestAuthorization()
  +checkAuthorizationStatus()
  +scheduleNotification(_:)
  +cancelNotification(id:)
  +cancelNotifications(ofType:)
  +loadPendingNotifications()
  +registerDeviceToken(_:)
  +registrationFailed(_:)
  -createContent(for:)
  -createTrigger(for:)
  -setupNotificationCategories()
  -loadSettings() 
}
class "NotificationType" as NotificationManager.NotificationType << (E, LightSteelBlue) enum >> { 
  +warrantyExpiration
  +priceAlert
  +lowStock
  +budgetAlert
  +receiptProcessed
  +syncComplete
  +itemRecall
  +maintenanceReminder
  +customAlert
  +displayName : String
  +icon : String
  ~defaultEnabled : Bool 
}
class "NotificationRequest" as NotificationRequest << (S, SkyBlue) struct >> { 
  +id : String
  +type : NotificationManager.NotificationType
  +title : String
  +body : String
  +scheduledDate : Date?
  +timeInterval : TimeInterval
  +repeats : Bool
  +sound : UNNotificationSound?
  +badge : NSNumber?
  +imageURL : URL?
  +userInfo : [AnyHashable: Any]
  +init(id:type:title:body:scheduledDate:timeInterval:repeats:sound:badge:imageURL:userInfo:) 
}
class "NotificationSettings" as NotificationSettings << (C, DarkSeaGreen) >> { 
  +enabledTypes : Set<NotificationManager.NotificationType>
  +soundEnabled
  +badgeEnabled
  +quietHoursEnabled
  +quietHoursStart
  +quietHoursEnd
  -{static} enabledTypesKey
  -{static} soundEnabledKey
  -{static} badgeEnabledKey
  -{static} quietHoursEnabledKey
  ~init()
  +isEnabled(for:)
  +toggle(_:)
  ~{static} load()
  ~save() 
}
class "NotificationError" as NotificationError << (E, LightSteelBlue) enum >> { 
  +notAuthorized
  +schedulingFailed
  +errorDescription : String? 
}
class "NaturalLanguageSearchService" as NaturalLanguageSearchService << (C, DarkSeaGreen) >> { 
  +init()
  +parseQuery(_:)
  +convertToSearchCriteria(_:)
  -tokenize(_:)
  -tagTokens(_:)
  -extractColors(from:)
  -extractItems(from:)
  -extractLocations(from:)
  -extractTimeReferences(from:)
  -extractPriceRanges(from:)
  -extractPrice(from:)
  -extractBrands(from:)
  -extractCategories(from:)
  -extractConditions(from:)
  -extractActions(from:)
  -extractAttributes(from:)
  -convertTimeReference(_:) 
}
class "NaturalLanguageQuery" as NaturalLanguageQuery << (S, SkyBlue) struct >> { 
  +originalQuery : String
  +items : [String]
  +colors : [String]
  +locations : [String]
  +timeReferences : [String]
  +priceRanges : [PriceRange]
  +brands : [String]
  +categories : [String]
  +conditions : [String]
  +actions : [String]
  +attributes : [String]
  +init() 
}
class "PriceRange" as PriceRange << (S, SkyBlue) struct >> { 
  +min : Double?
  +max : Double?
  +init(min:max:) 
}
class "ItemSearchCriteria" as ItemSearchCriteria << (S, SkyBlue) struct >> { 
  +searchText : String?
  +categories : [ItemCategory]
  +locationNames : [String]
  +brands : [String]
  +purchaseDateStart : Date?
  +purchaseDateEnd : Date?
  +minPrice : Double?
  +maxPrice : Double?
  +conditions : [ItemCondition]
  +underWarranty : Bool?
  +recentlyAdded : Bool?
  +useFuzzySearch : Bool?
  +fuzzyThreshold : Double?
  +init() 
}
class "BudgetService" as BudgetService << (C, DarkSeaGreen) >> { 
  -budgetRepository : any BudgetRepository
  -itemRepository : any ItemRepository
  -calendar
  +init(budgetRepository:itemRepository:)
  +createBudget(_:)
  +updateBudget(_:)
  +deleteBudget(_:)
  +checkBudgets()
  -checkBudget(_:)
  -calculateStatus(for:in:)
  +getCurrentPeriod(for:)
  -createThresholdAlert(for:status:)
  -createExceededAlert(for:status:)
  -createProjectedAlert(for:status:projected:)
  -createPeriodEndingAlert(for:daysRemaining:)
  +recordPurchase(_:)
  +closePeriod(for:period:)
  +getBudgetInsights(for:) 
}
class "BudgetInsights" as BudgetInsights << (S, SkyBlue) struct >> { 
  +budget : Budget
  +currentStatus : BudgetStatus?
  +performance : BudgetPerformance
  +insights : [String]
  +recommendations : [String]
  +projectedAnnualSavings : Decimal?
  +init(budget:currentStatus:performance:insights:recommendations:projectedAnnualSavings:) 
}
class "CrashReportingService" as CrashReportingService << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isEnabled
  +pendingReportsCount
  -logger
  -reportQueue
  -reportDirectory : URL
  -maxReportsToStore
  -maxReportAge : TimeInterval
  -init()
  +setEnabled(_:)
  +reportError(_:userInfo:file:function:line:)
  +reportNonFatal(_:userInfo:file:function:line:)
  +getPendingReports()
  +sendPendingReports()
  +clearPendingReports()
  -setupCrashHandlers()
  -registerExceptionHandler()
  -unregisterExceptionHandler()
  -installSignalHandlers()
  -{static} signalName(for:)
  -{static} handleSignal(_:name:)
  -saveReport(_:)
  -saveReportSynchronously(_:)
  -loadPendingReports()
  -deleteReport(_:)
  -updatePendingReportsCount()
  -cleanOldReports()
  -sendReport(_:) 
}
class "CrashReport" as CrashReport << (S, SkyBlue) struct >> { 
  +id : UUID
  +timestamp : Date
  +type : CrashType
  +reason : String
  +callStack : [String]
  +userInfo : [String: String]?
  +deviceInfo : DeviceInfo
  +appInfo : AppInfo
  +sourceLocation : SourceLocation?
  ~init(type:reason:callStack:userInfo:file:function:line:) 
}
class "CrashType" as CrashType << (E, LightSteelBlue) enum >> { 
  +exception
  +signal
  +error
  +nonFatal 
}
class "DeviceInfo" as DeviceInfo << (S, SkyBlue) struct >> { 
  +model : String
  +systemName : String
  +systemVersion : String
  +isSimulator : Bool
  ~{static} current : DeviceInfo 
}
class "AppInfo" as AppInfo << (S, SkyBlue) struct >> { 
  +version : String
  +build : String
  +bundleIdentifier : String
  ~{static} current : AppInfo 
}
class "SourceLocation" as SourceLocation << (S, SkyBlue) struct >> { 
  +file : String
  +function : String
  +line : Int 
}
class "ItemSharingService" as ItemSharingService << (C, DarkSeaGreen) >> { 
  -locationRepository : any LocationRepository
  +init(locationRepository:)
  +generateShareContent(for:format:)
  +generateShareItems(for:includeFormats:)
  +createShareFile(for:format:)
  -sanitizeFileName(_:) 
}
class "ShareFormat" as ItemSharingService.ShareFormat << (E, LightSteelBlue) enum >> { 
  +text
  +json
  +csv
  +qrCode
  +icon : String
  +description : String 
}
class "ShareError" as ShareError << (E, LightSteelBlue) enum >> { 
  +formatGenerationFailed
  +qrCodeGenerationFailed
  +dataConversionFailed
  +errorDescription : String? 
}
class "ItemActivityItemSource" as ItemActivityItemSource << (C, DarkSeaGreen) >> { 
  -item : Item
  +init(item:)
  +activityViewControllerPlaceholderItem(_:)
  +activityViewController(_:itemForActivityType:)
  +activityViewController(_:subjectForActivityType:)
  +activityViewController(_:thumbnailImageForActivityType:suggestedSize:)
  +activityViewControllerLinkMetadata(_:) 
}
class "MultiPageDocumentService" as MultiPageDocumentService << (C, DarkSeaGreen) >> { 
  -pdfService
  +init()
  +scanMultiPageDocument(from:)
  +processScannedPages(_:)
  +createPDFFromImages(_:)
  +splitDocumentIntoSections(data:maxPagesPerSection:)
  +extractReceiptItems(from:)
  -parseReceiptText(_:)
  -scanContinuation : CheckedContinuation<Data?, Error>? 
}
class "ExtractedReceiptItem" as ExtractedReceiptItem << (S, SkyBlue) struct >> { 
  +name : String
  +price : Double
  +quantity : Int
  +init(name:price:quantity:) 
}
class "CloudDocumentMetadata" as CloudDocumentMetadata << (S, SkyBlue) struct >> { 
  +id : UUID
  +documentId : UUID
  +cloudPath : String
  +uploadedAt : Date
  +lastModified : Date
  +fileSize : Int64
  +checksum : String
  +encrypted : Bool
  +syncStatus : SyncStatus 
}
class "SyncStatus" as CloudDocumentMetadata.SyncStatus << (E, LightSteelBlue) enum >> { 
  +synced
  +pending
  +uploading
  +failed 
}
class "SyncStatus" as SyncStatus << (E, LightSteelBlue) enum >> { 
  +synced
  +pending
  +uploading
  +failed
  +error
  +conflict
  +notSynced
  +color : String
  +icon : String 
}
class "CloudStorageUsage" as CloudStorageUsage << (S, SkyBlue) struct >> { 
  +usedBytes : Int64
  +totalBytes : Int64
  +documentCount : Int
  +percentageUsed : Double
  +formattedUsed : String
  +formattedTotal : String
  +init(usedBytes:totalBytes:documentCount:) 
}
class "ICloudDocumentStorage" as ICloudDocumentStorage << (C, DarkSeaGreen) >> { 
  -containerIdentifier
  -encryptionKey : SymmetricKey
  -documentsDirectory : URL
  -metadataStore : URL
  +init()
  +uploadDocument(_:documentId:encrypted:)
  +downloadDocument(documentId:)
  +deleteDocument(documentId:)
  +documentExists(documentId:)
  +getDocumentMetadata(documentId:)
  +listDocuments()
  +getStorageUsage()
  +syncDocument(documentId:data:encrypted:)
  +syncPendingDocuments()
  -saveMetadata(_:)
  -encryptData(_:)
  -decryptData(_:)
  -{static} getOrCreateEncryptionKey() 
}
class "CloudStorageError" as CloudStorageError << (E, LightSteelBlue) enum >> { 
  +iCloudNotAvailable
  +documentNotFound
  +uploadFailed
  +downloadFailed
  +encryptionFailed
  +decryptionFailed
  +quotaExceeded
  +networkError
  +errorDescription : String? 
}
class "KeychainService" as KeychainService << (C, DarkSeaGreen) >> { 
  ~save(_:key:)
  ~load(key:) 
}
class "KeychainError" as KeychainService.KeychainError << (E, LightSteelBlue) enum >> { 
  ~saveFailed
  ~loadFailed 
}
class "PurchasePatternService" as PurchasePatternService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -calendar
  +init(itemRepository:)
  +analyzePurchasePatterns(startDate:endDate:)
  -analyzeRecurringPatterns(items:)
  -analyzeSeasonalPatterns(items:)
  -analyzeCategoryPreferences(items:)
  -analyzeBrandLoyalty(items:)
  -analyzePriceRanges(items:)
  -analyzeShoppingTimes(items:)
  -analyzeRetailerPreferences(items:)
  -analyzeBulkBuying(items:)
  -determineFrequency(days:)
  -determinePriceRange(price:)
  -generateInsights(from:items:)
  -generateRecommendations(from:insights:) 
}
class "DepreciationService" as DepreciationService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -calendar
  +init(itemRepository:)
  +generateDepreciationReport(method:includeCategories:asOfDate:)
  +calculateDepreciationSchedule(item:method:customLifespan:customSalvageValue:)
  +calculateDepreciationByCategory()
  -calculateItemDepreciation(item:method:asOfDate:)
  -getDepreciationParameters(for:method:customLifespan:customSalvageValue:)
  -calculateAge(from:to:)
  -calculateDepreciationRate(method:usefulLife:currentAge:)
  -calculateAnnualDepreciation(purchasePrice:salvageValue:usefulLife:method:) 
}
class "CategoryDepreciationSummary" as CategoryDepreciationSummary << (S, SkyBlue) struct >> { 
  +category : ItemCategory
  +itemCount : Int
  +totalOriginalValue : Decimal
  +totalCurrentValue : Decimal
  +totalDepreciation : Decimal
  +averageDepreciationPercentage : Double
  +init(category:itemCount:totalOriginalValue:totalCurrentValue:totalDepreciation:averageDepreciationPercentage:) 
}
class "CSVImportService" as CSVImportService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -locationRepository : any LocationRepository
  -dateFormatter : DateFormatter
  -numberFormatter : NumberFormatter
  +init(itemRepository:locationRepository:)
  +previewCSV(data:configuration:)
  +importCSV(data:configuration:progressHandler:)
  +exportTemplate(_:)
  -parseCSV(_:delimiter:)
  -parseCSVLine(_:delimiter:)
  -generateHeaders(columnCount:)
  -parseItem(from:rowNumber:configuration:existingLocations:)
  -checkForDuplicate(_:) 
}
class "MockDataService" as MockDataService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -init()
  +{static} locations : [Location]
  +{static} storageUnits : [StorageUnit]
  +{static} generateComprehensiveItems()
  +{static} generateWarranties()
  +{static} generateReceipts()
  +{static} generateCollections()
  +{static} generateBudgets()
  +loadAllMockData(itemRepository:locationRepository:receiptRepository:budgetRepository:) 
}
class "BiometricAuthService" as BiometricAuthService << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isAuthenticated
  +biometricType : BiometricType
  +isAvailable
  +error : BiometricError?
  -context
  -keychainService
  -init()
  +checkBiometricAvailability()
  +authenticate(reason:)
  +authenticateWithPasscode(reason:)
  +storeSecureData(_:for:)
  +retrieveSecureData(for:reason:)
  +removeSecureData(for:)
  +reset()
  -mapError(_:) 
}
class "BiometricType" as BiometricAuthService.BiometricType << (E, LightSteelBlue) enum >> { 
  +none
  +touchID
  +faceID
  +displayName : String
  +icon : String 
}
class "BiometricError" as BiometricAuthService.BiometricError << (E, LightSteelBlue) enum >> { 
  +notAvailable
  +notEnrolled
  +authenticationFailed
  +userCancelled
  +passcodeNotSet
  +systemCancel
  +appCancel
  +invalidContext
  +notInteractive
  +unknown(_:)
  +errorDescription : String? 
}
class "KeychainService" as KeychainService1 << (C, DarkSeaGreen) >> { 
  ~store(_:for:accessControl:)
  ~retrieve(for:)
  ~remove(for:) 
}
class "KeychainError" as KeychainService.KeychainError2 << (E, LightSteelBlue) enum >> { 
  ~unhandledError(status:)
  ~noData
  ~unexpectedData
  ~errorDescription : String? 
}
class "PDFService" as PDFService << (C, DarkSeaGreen) >> { 
  +init()
  +getPageCount(from:)
  +getPageCount(from:)
  +generateThumbnail(from:pageIndex:size:)
  +generateAllThumbnails(from:size:)
  +extractText(from:)
  +splitPages(from:)
  +mergePDFs(_:)
  +extractPages(from:startPage:endPage:)
  +getMetadata(from:) 
}
class "PDFMetadata" as PDFMetadata << (S, SkyBlue) struct >> { 
  +title : String?
  +author : String?
  +subject : String?
  +keywords : [String]?
  +creator : String?
  +producer : String?
  +creationDate : Date?
  +modificationDate : Date?
  +pageCount : Int 
}
class "CloudSyncService" as CloudSyncService << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isSyncing
  +syncProgress : Double
  +lastSyncDate : Date?
  +syncErrors : [SyncError]
  +syncQueue : [SyncQueueItem]
  +conflictedDocuments : [SyncConflict]
  +isAutoSyncEnabled
  +syncOnCellular
  -documentRepository : any DocumentRepository
  -cloudStorage : CloudDocumentStorageProtocol
  -networkMonitor
  -syncTimer : Timer?
  -cancellables
  -syncInterval : TimeInterval
  -processingQueue
  -lastSyncKey
  -syncQueueKey
  -encryptionPrefsKey
  -init(documentRepository:cloudStorage:)
  +syncNow()
  +syncDocument(_:encrypted:)
  +deleteDocumentFromCloud(_:)
  +setEncryptionPreference(for:encrypted:)
  +getEncryptionPreference(for:)
  +resolveConflict(_:resolution:)
  +clearSyncErrors()
  +getSyncStatus(for:)
  -setupNetworkMonitoring()
  -startAutoSync()
  -stopAutoSync()
  -canSync()
  -performSync()
  -processSyncQueue()
  -syncSingleDocument(_:encrypted:)
  -downloadCloudDocument(_:)
  -checkForConflict(localDocument:cloudMetadata:)
  -removeSyncQueueItem(_:)
  -loadSyncState()
  -saveLastSyncDate()
  -saveSyncQueue() 
}
class "SyncQueueItem" as SyncQueueItem << (S, SkyBlue) struct >> { 
  +id : UUID
  +documentId : UUID
  +operation : SyncOperation
  +encrypted : Bool
  +timestamp : Date
  +init(documentId:operation:encrypted:timestamp:) 
}
class "SyncOperation" as SyncQueueItem.SyncOperation << (E, LightSteelBlue) enum >> { 
  +upload
  +download
  +delete 
}
class "SyncConflict" as SyncConflict << (S, SkyBlue) struct >> { 
  +id : UUID
  +documentId : UUID
  +localDocument : Document
  +cloudMetadata : CloudDocumentMetadata
  +localModified : Date
  +cloudModified : Date
  +localEncrypted : Bool
  +cloudEncrypted : Bool
  +newerVersion : ConflictResolution 
}
class "ConflictResolution" as ConflictResolution << (E, LightSteelBlue) enum >> { 
  +keepLocal
  +keepCloud
  +keepBoth 
}
class "SyncError" as SyncError << (S, SkyBlue) struct >> { 
  +id : UUID
  +error : Error
  +timestamp : Date
  +documentId : UUID?
  +localizedDescription : String 
}
class "MockCloudStorage" as MockCloudStorage << (C, DarkSeaGreen) >> { 
  ~uploadDocument(_:documentId:encrypted:)
  ~downloadDocument(documentId:)
  ~deleteDocument(documentId:)
  ~documentExists(documentId:)
  ~getDocumentMetadata(documentId:)
  ~listDocuments()
  ~getStorageUsage()
  ~syncDocument(documentId:data:encrypted:)
  ~syncPendingDocuments() 
}
class "SearchSuggestionsService" as SearchSuggestionsService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -locationRepository : any LocationRepository
  -categoryRepository : any CategoryRepository
  -searchHistoryRepository : any SearchHistoryRepository
  +init(itemRepository:locationRepository:categoryRepository:searchHistoryRepository:)
  +getSuggestions(for:limit:)
  -getItemSuggestions(for:)
  -getCategorySuggestions(for:)
  -getLocationSuggestions(for:)
  -getHistorySuggestions(for:)
  -getAttributeSuggestions(for:) 
}
class "SearchSuggestion" as SearchSuggestion << (S, SkyBlue) struct >> { 
  +id
  +text : String
  +type : SuggestionType
  +relevanceScore : Double
  +metadata : [String: String]
  +init(text:type:relevanceScore:metadata:)
  +hash(into:)
  +{static} ==(_:_:) 
}
class "SuggestionType" as SuggestionType << (E, LightSteelBlue) enum >> { 
  +itemName
  +brand
  +model
  +category
  +location
  +history
  +attribute
  +timeReference
  +priceQualifier
  +icon : String
  +color : String 
}
class "ThumbnailService" as ThumbnailService << (C, DarkSeaGreen) >> { 
  -cache
  -fileManager
  -thumbnailsDirectory : URL
  +init()
  +generateThumbnail(for:from:mimeType:size:scale:)
  +generatePageThumbnails(for:from:pageCount:size:maxPages:)
  +clearThumbnails(for:)
  +clearAllThumbnails()
  +getCachedThumbnail(for:size:)
  -generateImageThumbnail(from:size:)
  -generatePDFThumbnail(from:size:)
  -generatePDFPageThumbnail(page:size:)
  -generateQuickLookThumbnail(for:data:mimeType:size:scale:)
  -loadThumbnailFromDisk(documentId:size:)
  -saveThumbnailToDisk(_:documentId:size:)
  -clearMemoryCache(for:)
  -clearDiskCache(for:) 
}
class "RetailerAnalyticsService" as RetailerAnalyticsService << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -receiptRepository : (any ReceiptRepository)?
  +init(itemRepository:receiptRepository:)
  +calculateAllRetailerAnalytics()
  +calculateRetailerAnalytics(storeName:items:)
  +getRetailerInsights()
  +getStoreRankings(metric:)
  +getSpendingComparison(stores:dateRange:)
  -calculatePurchaseFrequency(dates:firstDate:lastDate:)
  -calculateTopCategories(items:totalSpent:)
  -calculateMonthlySpending(items:)
  -calculateCategoryLeaders()
  -frequencyScore(_:) 
}
class "WarrantyNotificationService" as WarrantyNotificationService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -notificationCenter
  -cancellables
  +isEnabled
  +notificationDays
  -init()
  +scheduleNotifications(for:)
  +removeNotifications(for:)
  +updateAllNotifications(_:)
  +checkNotificationPermission()
  -scheduleNotification(for:at:daysRemaining:)
  -requestNotificationPermission()
  -setupNotificationCategories()
  -loadSettings() 
}
class "WarrantyExpirationCheckService" as WarrantyExpirationCheckService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -timer : Timer?
  -notificationService
  -init()
  +startMonitoring(warrantyRepository:)
  +stopMonitoring()
  -checkExpiringWarranties(repository:) 
}
class "NotificationTriggerService" as NotificationTriggerService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -notificationManager
  -cancellables
  +isMonitoringActive
  -init()
  +startMonitoring(itemRepository:warrantyRepository:budgetRepository:)
  +stopMonitoring()
  -monitorWarrantyExpirations(warrantyRepository:itemRepository:)
  -checkWarrantyExpirations(warrantyRepository:itemRepository:)
  -shouldNotifyForWarranty(daysUntilExpiration:warranty:)
  -scheduleWarrantyNotification(warranty:item:daysUntilExpiration:)
  -monitorBudgetAlerts(budgetRepository:itemRepository:)
  -checkBudgetAlerts(budgets:budgetRepository:itemRepository:)
  -scheduleBudgetNotification(budget:percentUsed:spent:)
  -monitorLowStockItems(itemRepository:)
  -checkLowStockItems(itemRepository:)
  -scheduleLowStockNotification(item:currentQuantity:minQuantity:)
  +checkPriceAlert(for:newPrice:oldPrice:)
  +notifyReceiptProcessed(receipt:itemCount:)
  -setupNotificationHandlers()
  -handleNotificationTap(_:)
  -handleNotificationAction(_:) 
}
class "SpotlightService" as SpotlightService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -spotlightIndex
  -domainIdentifier
  +{static} viewItemActivityType
  +{static} searchItemsActivityType
  -init()
  -setupActivityTypes()
  +indexItem(_:location:)
  +indexItems(_:locationLookup:)
  +removeItem(id:)
  +removeItems(ids:)
  +clearIndex()
  +reindexAllItems(itemRepository:locationRepository:)
  ~createSearchableItem(for:location:)
  -createDescription(for:location:)
  +createViewItemActivity(for:)
  +handleUserActivity(_:itemRepository:)
  +updateItem(_:location:)
  +updateItems(_:locationLookup:) 
}
class "BarcodeProduct" as BarcodeProduct << (S, SkyBlue) struct >> { 
  +barcode : String
  +name : String
  +brand : String?
  +category : String?
  +description : String?
  +imageURL : String?
  +source : String
  +additionalImages : [String]?
  +init(barcode:name:brand:category:description:imageURL:source:additionalImages:) 
}
class "DefaultBarcodeLookupService" as DefaultBarcodeLookupService << (C, DarkSeaGreen) >> { 
  -cache
  -providers : [BarcodeProvider]
  +init()
  +lookupProduct(barcode:)
  -isValidBarcode(_:) 
}
class "BarcodeLookupError" as BarcodeLookupError << (E, LightSteelBlue) enum >> { 
  +invalidBarcode
  +rateLimitExceeded
  +networkError
  +parseError
  +errorDescription : String? 
}
class "CachedBarcodeProvider" as CachedBarcodeProvider << (C, DarkSeaGreen) >> { 
  ~name
  ~lookup(_:) 
}
class "OpenFoodFactsProvider" as OpenFoodFactsProvider << (C, DarkSeaGreen) >> { 
  ~name
  -baseURL
  ~lookup(_:) 
}
class "UPCItemDBProvider" as UPCItemDBProvider << (C, DarkSeaGreen) >> { 
  ~name
  -baseURL
  -dailyLimit
  ~lookup(_:)
  -checkDailyLimit() 
}
class "BarcodespiderProvider" as BarcodespiderProvider << (C, DarkSeaGreen) >> { 
  ~name
  -baseURL
  ~lookup(_:) 
}
class "BarcodeMonsterProvider" as BarcodeMonsterProvider << (C, DarkSeaGreen) >> { 
  ~name
  ~lookup(_:) 
}
class "DatakickProvider" as DatakickProvider << (C, DarkSeaGreen) >> { 
  ~name
  -baseURL
  ~lookup(_:) 
}
class "BarcodeCache" as BarcodeCache << (C, DarkSeaGreen) >> { 
  ~{static} shared
  -memoryCache : [String: BarcodeProduct]
  -diskCache : [String: BarcodeProduct]
  -cacheFile : URL
  -maxMemoryCacheSize
  -init()
  ~store(_:)
  ~retrieve(barcode:)
  ~clearCache()
  -loadCache()
  -saveCache() 
}
class "OpenFoodFactsResponse" as OpenFoodFactsResponse << (S, SkyBlue) struct >> { 
  ~status : Int
  ~product : OpenFoodFactsProduct? 
}
class "OpenFoodFactsProduct" as OpenFoodFactsProduct << (S, SkyBlue) struct >> { 
  ~product_name : String?
  ~brands : String?
  ~categories : String?
  ~generic_name : String?
  ~image_url : String?
  ~image_front_url : String?
  ~image_nutrition_url : String?
  ~image_ingredients_url : String? 
}
class "UPCItemDBResponse" as UPCItemDBResponse << (S, SkyBlue) struct >> { 
  ~code : String?
  ~total : Int?
  ~items : [UPCItemDBItem]? 
}
class "UPCItemDBItem" as UPCItemDBItem << (S, SkyBlue) struct >> { 
  ~ean : String?
  ~title : String?
  ~description : String?
  ~brand : String?
  ~category : String?
  ~images : [String]? 
}
class "DatakickItem" as DatakickItem << (S, SkyBlue) struct >> { 
  ~gtin14 : String?
  ~name : String?
  ~brand_name : String?
  ~description : String?
  ~images : [DatakickImage]? 
}
class "DatakickImage" as DatakickImage << (S, SkyBlue) struct >> { 
  ~url : String? 
}
class "RateLimitTracker" as RateLimitTracker << (C, DarkSeaGreen) >> { 
  ~{static} shared
  -dailyUsage : [String: (date: Date, count: Int)]
  ~canMakeRequest(for:dailyLimit:)
  ~recordRequest(for:) 
}
class "NetworkMonitor" as NetworkMonitor << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isConnected
  +isExpensive
  +connectionType : ConnectionType
  -monitor
  -queue
  -init()
  -startMonitoring()
  -updateConnectionStatus(_:)
  +deinit 
}
class "ConnectionType" as NetworkMonitor.ConnectionType << (E, LightSteelBlue) enum >> { 
  +wifi
  +cellular
  +wired
  +unknown
  +displayName : String 
}
class "OfflineQueueManager" as OfflineQueueManager << (C, DarkSeaGreen) >> { 
  +{static} shared
  +isSyncing
  +syncProgress : Double
  +pendingOperations : [QueuedOperation]
  -queuedOperations : [QueuedOperation]
  -queue
  -fileManager
  -cancellables
  -queueFileURL : URL
  -init()
  -setupNetworkMonitoring()
  +enqueue(_:)
  +processQueue()
  +syncPendingOperations()
  +clearAll()
  -removeOperation(_:)
  -saveQueue()
  -loadQueue() 
}
class "QueuedOperation" as QueuedOperation << (S, SkyBlue) struct >> { 
  +id
  +type : OperationType
  +timestamp : Date
  +data : Data
  +init(type:data:)
  +execute() 
}
class "OperationType" as QueuedOperation.OperationType << (E, LightSteelBlue) enum >> { 
  +createItem
  +updateItem
  +deleteItem
  +uploadPhoto
  +createReceipt
  +syncData 
}
class "OfflineStorageManager" as OfflineStorageManager << (C, DarkSeaGreen) >> { 
  +{static} shared
  -fileManager
  -encoder
  -decoder
  -documentsDirectory : URL
  -offlineDataDirectory : URL
  -init()
  -createDirectoryIfNeeded()
  +save(_:key:)
  +load(_:key:)
  +delete(key:)
  +getOfflineDataSize()
  +clearAllOfflineData() 
}
class "DocumentSearchService" as DocumentSearchService << (C, DarkSeaGreen) >> { 
  -documentRepository : any DocumentRepository
  -documentStorage : DocumentStorageProtocol
  -pdfService
  +init(documentRepository:documentStorage:)
  +searchDocuments(query:in:)
  +searchByCategory(_:)
  +searchByTags(_:)
  +searchByDateRange(from:to:)
  +advancedSearch(criteria:)
  +indexDocumentsForSpotlight()
  -searchInMetadata(document:query:)
  -searchInText(text:query:documentId:)
  -extractContext(from:around:in:)
  -generateSnippet(from:) 
}
class "DocumentSearchResult" as DocumentSearchResult << (S, SkyBlue) struct >> { 
  +id
  +document : Document
  +matches : [SearchMatch]
  +relevanceScore : Double
  +snippet : String? 
}
class "SearchMatch" as SearchMatch << (S, SkyBlue) struct >> { 
  +field : SearchField
  +text : String
  +range : NSRange
  +context : String 
}
class "SearchField" as SearchMatch.SearchField << (E, LightSteelBlue) enum >> { 
  +name
  +content
  +notes
  +tag
  +subcategory 
}
class "SearchCriteria" as SearchCriteria << (S, SkyBlue) struct >> { 
  +textQuery : String?
  +category : Document.DocumentCategory?
  +tags : [String]
  +itemId : UUID?
  +dateRange : (start: Date, end: Date)?
  +fileSizeRange : (min: Int64, max: Int64)?
  +init(textQuery:category:tags:itemId:dateRange:fileSizeRange:) 
}
class "ColorsTests" as ColorsTests << (C, DarkSeaGreen) >> { 
  ~testHexColorInitialization()
  ~testAppColorsExist() 
}
class "AdvancedFiltersViewModel" as AdvancedFiltersViewModel << (C, DarkSeaGreen) >> { 
  ~searchText
  ~selectedCategories
  ~minPrice : Double
  ~maxPrice : Double
  ~useDateFilter
  ~startDate
  ~endDate
  ~selectedLocations
  ~locations : [Location]
  ~selectedTags
  ~tags : [Tag]
  ~hasPhotos
  ~hasReceipt
  ~hasWarranty
  ~isFavorite
  -onApply : (ItemFilters) -> Void
  -cancellables
  ~activeFilterCount : Int
  ~quickPriceRanges
  ~quickDateRanges
  +init(currentFilters:onApply:)
  ~toggleCategory(_:)
  ~toggleLocation(_:)
  ~applyPriceRange(_:)
  ~applyDateRange(_:)
  ~isDateRangeActive(_:)
  ~clearAllFilters()
  ~applyFilters()
  -loadLocationAndTags() 
}
class "ItemFilters" as ItemFilters << (S, SkyBlue) struct >> { 
  +searchText : String?
  +categories : [ItemCategory]?
  +minPrice : Decimal?
  +maxPrice : Decimal?
  +startDate : Date?
  +endDate : Date?
  +locationIds : [UUID]?
  +tagIds : [UUID]?
  +hasPhotos : Bool?
  +hasReceipt : Bool?
  +hasWarranty : Bool?
  +isFavorite : Bool?
  +init(searchText:categories:minPrice:maxPrice:startDate:endDate:locationIds:tagIds:hasPhotos:hasReceipt:hasWarranty:isFavorite:)
  +{static} empty
  +isEmpty : Bool
  +activeCount : Int 
}
class "AppTypography" as AppTypography << (S, SkyBlue) struct >> { 
  +{static} displayLarge(_:)
  +{static} displayMedium(_:)
  +{static} displaySmall(_:)
  +{static} headlineLarge(_:)
  +{static} headlineMedium(_:)
  +{static} headlineSmall(_:)
  +{static} bodyLarge(_:)
  +{static} bodyMedium(_:)
  +{static} bodySmall(_:)
  +{static} labelLarge(_:)
  +{static} labelMedium(_:)
  +{static} labelSmall(_:) 
}
class "TextStyle" as TextStyle << (S, SkyBlue) struct >> { 
  ~style : Style
  +body(content:) 
}
class "Style" as TextStyle.Style << (E, LightSteelBlue) enum >> { 
  +displayLarge
  +headlineLarge
  +bodyLarge
  +labelLarge
  ~font : Font 
}
class "AppSpacing" as AppSpacing << (S, SkyBlue) struct >> { 
  +{static} xxs : CGFloat
  +{static} xs : CGFloat
  +{static} sm : CGFloat
  +{static} md : CGFloat
  +{static} lg : CGFloat
  +{static} xl : CGFloat
  +{static} xxl : CGFloat
  +{static} xxxl : CGFloat 
}
class "AppPadding" as AppPadding << (S, SkyBlue) struct >> { 
  ~edges : Edge.Set
  ~spacing : CGFloat
  +body(content:) 
}
class "DynamicTextStyle" as DynamicTextStyle << (S, SkyBlue) struct >> { 
  ~style : Style
  -sizeCategory
  +body(content:) 
}
class "Style" as DynamicTextStyle.Style << (E, LightSteelBlue) enum >> { 
  +displayLarge
  +headlineLarge
  +bodyLarge
  +labelLarge
  ~textStyle : Font.TextStyle
  ~weight : Font.Weight
  ~design : Font.Design 
}
class "TextSizePreference" as TextSizePreference << (E, LightSteelBlue) enum >> { 
  +extraSmall
  +small
  +medium
  +large
  +extraLarge
  +extraExtraLarge
  +extraExtraExtraLarge
  +displayName : String
  +contentSizeCategory : ContentSizeCategory 
}
class "TextSizePreferenceKey" as TextSizePreferenceKey << (S, SkyBlue) struct >> { 
  ~{static} defaultValue : TextSizePreference? 
}
class "AccessibleLineSpacingModifier" as AccessibleLineSpacingModifier << (S, SkyBlue) struct >> { 
  -sizeCategory
  ~body(content:)
  -lineSpacing : CGFloat 
}
class "DynamicTypeLayoutHelper" as DynamicTypeLayoutHelper << (S, SkyBlue) struct >> { 
  -sizeCategory
  +shouldUseAccessibilityLayout : Bool
  +shouldUseCompactLayout : Bool
  +recommendedSpacing : CGFloat 
}
class "AppColors" as AppColors << (S, SkyBlue) struct >> { 
  +{static} primary
  +{static} primaryLight
  +{static} primaryDark
  +{static} success
  +{static} warning
  +{static} error
  +{static} info
  +{static} background
  +{static} secondaryBackground
  +{static} tertiaryBackground
  +{static} textPrimary
  +{static} textSecondary
  +{static} textTertiary
  +{static} textQuaternary
  +{static} surface
  +{static} surfaceSecondary
  +{static} border
  +{static} borderLight 
}
class "AppCornerRadius" as AppCornerRadius << (E, LightSteelBlue) enum >> { 
  +{static} xs : CGFloat
  +{static} small : CGFloat
  +{static} medium : CGFloat
  +{static} large : CGFloat
  +{static} xl : CGFloat
  +{static} full : CGFloat 
}
class "CornerRadiusModifier" as CornerRadiusModifier << (S, SkyBlue) struct >> { 
  ~size : CornerRadiusSize
  +body(content:) 
}
class "CornerRadiusSize" as CornerRadiusSize << (E, LightSteelBlue) enum >> { 
  +xs
  +small
  +medium
  +large
  +xl
  +full
  ~value : CGFloat 
}
class "TagInputView" as TagInputView << (S, SkyBlue) struct >> { 
  ~selectedTags : [String]
  -newTag
  -showingTagPicker
  -isInputFocused : Bool
  ~availableTags : [Tag]
  +init(selectedTags:availableTags:)
  +body : some View
  -addTag()
  -removeTag(_:)
  -colorForTag(_:) 
}
class "TagChip" as TagChip << (S, SkyBlue) struct >> { 
  ~name : String
  ~color : Color
  ~onDelete : () -> Void
  +init(name:color:onDelete:)
  +body : some View 
}
class "TagPickerView" as TagPickerView << (S, SkyBlue) struct >> { 
  ~availableTags : [Tag]
  ~selectedTags : [String]
  -dismiss
  -searchText
  ~filteredTags : [Tag]
  ~body : some View
  -toggleTag(_:) 
}
class "TagPickerRow" as TagPickerRow << (S, SkyBlue) struct >> { 
  ~tag : Tag
  ~isSelected : Bool
  ~onToggle : () -> Void
  ~body : some View 
}
class "FeatureUnavailableView" as FeatureUnavailableView << (S, SkyBlue) struct >> { 
  +feature : String
  +reason : String?
  +icon : String
  +init(feature:reason:icon:)
  +body : some View 
}
class "PrimaryButton" as PrimaryButton << (S, SkyBlue) struct >> { 
  ~title : String
  ~action : () -> Void
  ~isLoading : Bool
  ~isEnabled : Bool
  +init(title:isLoading:isEnabled:action:)
  +body : some View 
}
class "ThemeManager" as ThemeManager << (C, DarkSeaGreen) >> { 
  +{static} shared
  +colorScheme : ColorScheme?
  +isDarkMode : Bool
  +useSystemTheme : Bool
  -init()
  -loadPreferences()
  +setDarkMode(_:) 
}
class "ThemedView" as ThemedView << (S, SkyBlue) struct >> { 
  -themeManager
  +body(content:) 
}
class "DynamicTypeExampleView" as DynamicTypeExampleView << (S, SkyBlue) struct >> { 
  -sizeCategory
  +init()
  +body : some View
  -adaptiveLayoutExample : some View
  -itemRow(icon:title:count:)
  -textStylesDemo : some View
  -styleExample(_:style:)
  -bestPracticesSection : some View
  -bestPracticeItem(_:_:) 
}
class "DynamicTypeExampleView_Previews" as DynamicTypeExampleView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "VoiceOverAction" as VoiceOverAction << (S, SkyBlue) struct >> { 
  +name : String
  +action : () -> Void
  +init(name:action:) 
}
class "VoiceOverActionsModifier" as VoiceOverActionsModifier << (S, SkyBlue) struct >> { 
  ~actions : [VoiceOverAction]
  ~body(content:) 
}
class "VoiceOverFocusModifier" as VoiceOverFocusModifier << (S, SkyBlue) struct >> { 
  ~condition : Bool
  ~value : Bool
  -isVoiceOverFocused : Bool
  ~body(content:) 
}
class "VoiceOverAnnouncement" as VoiceOverAnnouncement << (S, SkyBlue) struct >> { 
  +{static} announce(_:)
  +{static} announceScreenChange()
  +{static} announceLayoutChange(focusOn:) 
}
class "AccessibleItemCard" as AccessibleItemCard<Content: View> << (S, SkyBlue) struct >> { 
  ~itemName : String
  ~category : String
  ~location : String?
  ~quantity : Int
  ~value : String?
  ~content : Content
  +init(itemName:category:location:quantity:value:content:)
  +body : some View
  -accessibilityLabel : String 
}
class "AccessibleProgressView" as AccessibleProgressView << (S, SkyBlue) struct >> { 
  ~value : Double
  ~total : Double
  ~label : String
  +init(value:total:label:)
  +body : some View 
}
class "VoiceOverGuideView" as VoiceOverGuideView << (S, SkyBlue) struct >> { 
  -exampleText
  -sliderValue
  -isToggled
  -selectedOption
  -voiceOverEnabled
  +init()
  +body : some View
  -headerSection : some View
  -statusSection : some View
  -labelsSection : some View
  -interactiveSection : some View
  -customActionsSection : some View
  -listsSection : some View
  -bestPracticesSection : some View
  -bestPracticeItem(icon:title:description:) 
}
class "VoiceOverGuideView_Previews" as VoiceOverGuideView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "FilterChipsView" as FilterChipsView << (S, SkyBlue) struct >> { 
  ~filters : ItemFilters
  ~onRemove : (FilterType) -> Void
  ~onShowFilters : () -> Void
  +init(filters:onRemove:onShowFilters:)
  +body : some View
  -activeFilterChips : some View
  -formatPriceRange(min:max:)
  -formatDateRange(start:end:) 
}
class "FilterType" as FilterChipsView.FilterType << (E, LightSteelBlue) enum >> { 
  +search
  +category(_:)
  +priceRange
  +dateRange
  +location(_:)
  +tag(_:)
  +hasPhotos
  +hasReceipt
  +hasWarranty
  +isFavorite 
}
class "FilterChip" as FilterChip << (S, SkyBlue) struct >> { 
  ~label : String
  ~icon : String
  ~iconColor : Color
  ~onRemove : () -> Void
  ~body : some View 
}
class "AdvancedFiltersView" as AdvancedFiltersView << (S, SkyBlue) struct >> { 
  -viewModel : AdvancedFiltersViewModel
  -dismiss
  +init(currentFilters:onApply:)
  +body : some View
  -searchSection : some View
  -categoriesSection : some View
  -priceRangeSection : some View
  -dateRangeSection : some View
  -locationSection : some View
  -tagsSection : some View
  -additionalFiltersSection : some View 
}
class "FilterToggleRow" as FilterToggleRow << (S, SkyBlue) struct >> { 
  ~title : String
  ~icon : String
  ~isSelected : Bool
  ~action : () -> Void
  ~body : some View 
}
class "TagCloudView" as TagCloudView << (S, SkyBlue) struct >> { 
  ~tags : [Tag]
  ~selectedTags : Set<UUID>
  ~body : some View 
}
class "RangeSlider" as RangeSlider << (S, SkyBlue) struct >> { 
  ~minValue : Double
  ~maxValue : Double
  ~bounds : ClosedRange<Double>
  ~body : some View 
}
class "CategoryPickerView" as CategoryPickerView << (S, SkyBlue) struct >> { 
  ~selectedCategoryId : UUID
  ~categoryRepository : any CategoryRepository
  -categories : [ItemCategoryModel]
  -subcategories : [UUID: [ItemCategoryModel]]
  -expandedCategories : Set<UUID>
  -isLoading
  -dismiss
  +init(selectedCategoryId:categoryRepository:)
  +body : some View
  -toggleExpanded(_:)
  -loadCategories() 
}
class "CategoryPickerRow" as CategoryPickerRow << (S, SkyBlue) struct >> { 
  ~category : ItemCategoryModel
  ~isSelected : Bool
  ~hasSubcategories : Bool
  ~isExpanded : Bool
  ~level : Int
  ~onSelect : () -> Void
  ~onToggleExpand : () -> Void
  ~body : some View 
}
class "CategoryDisplayView" as CategoryDisplayView << (S, SkyBlue) struct >> { 
  ~categoryId : UUID
  ~categoryRepository : any CategoryRepository
  -category : ItemCategoryModel?
  -parentCategory : ItemCategoryModel?
  +init(categoryId:categoryRepository:)
  +body : some View
  -loadCategory() 
}
class "PDFViewerEnhanced" as PDFViewerEnhanced << (S, SkyBlue) struct >> { 
  ~url : URL
  ~title : String
  -currentPage : Int
  -totalPages : Int
  -showingThumbnails
  -showingPageJumper
  -pageNumberText
  -pdfDocument : PDFDocument?
  -displayMode : PDFDisplayMode
  -scaleFactor : CGFloat
  -dismiss
  +init(url:title:)
  +body : some View
  -pageControlsOverlay : some View
  -pageJumperView : some View
  -goToFirstPage()
  -goToLastPage()
  -goToPreviousPage()
  -goToNextPage() 
}
class "PDFViewerRepresentable" as PDFViewerRepresentable << (S, SkyBlue) struct >> { 
  ~url : URL
  ~currentPage : Int
  ~totalPages : Int
  ~pdfDocument : PDFDocument?
  ~displayMode : PDFDisplayMode
  ~scaleFactor : CGFloat
  ~makeUIView(context:)
  ~updateUIView(_:context:)
  ~makeCoordinator() 
}
class "Coordinator" as PDFViewerRepresentable.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : PDFViewerRepresentable
  ~init(_:)
  ~pdfViewPageChanged(_:) 
}
class "PDFThumbnailsView" as PDFThumbnailsView << (S, SkyBlue) struct >> { 
  ~pdfDocument : PDFDocument?
  ~currentPage : Int
  ~isPresented : Bool
  -columns
  ~body : some View 
}
class "PDFThumbnailView" as PDFThumbnailView << (S, SkyBlue) struct >> { 
  ~document : PDFDocument
  ~pageIndex : Int
  ~isSelected : Bool
  ~action : () -> Void
  -thumbnail : UIImage?
  ~body : some View
  -generateThumbnail() 
}
class "DocumentPicker" as DocumentPicker << (S, SkyBlue) struct >> { 
  ~documentTypes : [UTType]
  ~allowsMultipleSelection : Bool
  ~onCompletion : (Result<[URL], Error>) -> Void
  +init(documentTypes:allowsMultipleSelection:onCompletion:)
  +makeUIViewController(context:)
  +updateUIViewController(_:context:)
  +makeCoordinator() 
}
class "Coordinator" as DocumentPicker.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : DocumentPicker
  ~init(_:)
  +documentPicker(_:didPickDocumentsAt:)
  +documentPickerWasCancelled(_:) 
}
class "DocumentPickerError" as DocumentPickerError << (E, LightSteelBlue) enum >> { 
  +cancelled
  +accessDenied
  +unsupportedType
  +errorDescription : String? 
}
class "DocumentPickerButton" as DocumentPickerButton << (S, SkyBlue) struct >> { 
  ~title : String
  ~documentTypes : [UTType]
  ~allowsMultipleSelection : Bool
  ~onSelection : ([URL]) -> Void
  -showingPicker
  -showingError
  -errorMessage
  +init(title:documentTypes:allowsMultipleSelection:onSelection:)
  +body : some View 
}
class "SecureDataView" as SecureDataView<Content: View> << (S, SkyBlue) struct >> { 
  -biometricService
  -protectSensitiveData
  -isAuthenticated
  -isAuthenticating
  ~content : () -> Content
  ~placeholder : String
  ~reason : String
  +init(placeholder:reason:content:)
  +body : some View
  -authenticate() 
}
class "SecureTextModifier" as SecureTextModifier << (S, SkyBlue) struct >> { 
  -protectSensitiveData
  -isSecured
  ~placeholder : String
  +init(placeholder:)
  +body(content:) 
}
class "SecureCurrencyText" as SecureCurrencyText << (S, SkyBlue) struct >> { 
  ~amount : Decimal
  ~currency : String
  ~style : Font.TextStyle
  -protectSensitiveData
  +init(_:currency:style:)
  +body : some View
  -formattedAmount : String 
}
class "SecureStatCard" as SecureStatCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~isFinancial : Bool
  +init(title:value:icon:isFinancial:)
  +body : some View 
}
class "SecureDataView_Previews" as SecureDataView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "OfflineIndicator" as OfflineIndicator << (S, SkyBlue) struct >> { 
  -networkMonitor
  -showDetails
  +init()
  +body : some View 
}
class "OfflineAwareModifier" as OfflineAwareModifier << (S, SkyBlue) struct >> { 
  -networkMonitor
  +body(content:) 
}
class "SyncStatusView" as SyncStatusView << (S, SkyBlue) struct >> { 
  -networkMonitor
  -lastSyncDate : Date?
  +init()
  +body : some View 
}
class "OfflineDataView" as OfflineDataView << (S, SkyBlue) struct >> { 
  -dataSize : String
  -showingClearAlert
  +init()
  +body : some View 
}
class "PDFViewer" as PDFViewer << (S, SkyBlue) struct >> { 
  ~url : URL
  ~currentPage : Int
  +init(url:currentPage:)
  +makeUIView(context:)
  +updateUIView(_:context:)
  +makeCoordinator() 
}
class "Coordinator" as PDFViewer.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : PDFViewer
  ~init(_:)
  +pdfViewPageChanged(_:) 
}
class "PDFViewerView" as PDFViewerView << (S, SkyBlue) struct >> { 
  ~url : URL
  ~title : String
  -currentPage : Int
  -totalPages : Int
  -showingShareSheet
  -dismiss
  +init(url:title:)
  +body : some View
  -loadPageCount() 
}
class "ShareSheet" as ShareSheet << (S, SkyBlue) struct >> { 
  ~items : [Any]
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:) 
}
class "SearchBar" as SearchBar << (S, SkyBlue) struct >> { 
  ~text : String
  ~placeholder : String
  ~onEditingChanged : ((Bool) -> Void)?
  ~onCommit : (() -> Void)?
  -isFocused : Bool
  +init(text:placeholder:onEditingChanged:onCommit:)
  +body : some View 
}
class "PhotoGridView" as PhotoGridView << (S, SkyBlue) struct >> { 
  ~photos : [Photo]
  ~columns : Int
  ~spacing : CGFloat
  ~onPhotoTap : (Int) -> Void
  ~onAddPhoto : () -> Void
  -gridColumns : [GridItem]
  +init(photos:columns:spacing:onPhotoTap:onAddPhoto:)
  +body : some View 
}
class "PhotoThumbnailView" as PhotoThumbnailView << (S, SkyBlue) struct >> { 
  ~photo : Photo
  ~body : some View 
}
class "AddPhotoButton" as AddPhotoButton << (S, SkyBlue) struct >> { 
  ~action : () -> Void
  ~body : some View 
}
class "PhotoGalleryView" as PhotoGalleryView << (S, SkyBlue) struct >> { 
  ~photos : [Photo]
  ~selectedIndex : Int
  -dismiss
  +init(photos:selectedIndex:)
  +body : some View
  -emptyStateView : some View
  -sharePhoto()
  -deletePhoto() 
}
class "PhotoDetailView" as PhotoDetailView << (S, SkyBlue) struct >> { 
  ~photo : Photo
  -scale : CGFloat
  -lastScale : CGFloat
  -offset : CGSize
  -lastOffset : CGSize
  ~body : some View 
}
class "PhotoPickerView" as PhotoPickerView << (S, SkyBlue) struct >> { 
  ~selectedImages : [UIImage]
  -selectedItems : [PhotosPickerItem]
  ~maxSelectionCount : Int
  +init(selectedImages:maxSelectionCount:)
  +body : some View 
}
class "CameraCaptureView" as CameraCaptureView << (S, SkyBlue) struct >> { 
  ~capturedImage : UIImage?
  -dismiss
  +init(capturedImage:)
  +makeUIViewController(context:)
  +updateUIViewController(_:context:)
  +makeCoordinator() 
}
class "Coordinator" as CameraCaptureView.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : CameraCaptureView
  ~init(_:)
  +imagePickerController(_:didFinishPickingMediaWithInfo:)
  +imagePickerControllerDidCancel(_:) 
}
class "LoadingOverlay" as LoadingOverlay << (S, SkyBlue) struct >> { 
  ~message : String
  +init(message:)
  +body : some View 
}
class "DocumentCategoryPicker" as DocumentCategoryPicker << (S, SkyBlue) struct >> { 
  ~category : Document.DocumentCategory
  ~subcategory : String?
  -showingSubcategoryPicker
  +init(category:subcategory:)
  +body : some View 
}
class "DocumentCategoryFilter" as DocumentCategoryFilter << (S, SkyBlue) struct >> { 
  ~selectedCategories : Set<Document.DocumentCategory>
  -showingAllCategories
  +init(selectedCategories:)
  +body : some View 
}
class "CategoryFilterChip" as CategoryFilterChip << (S, SkyBlue) struct >> { 
  ~category : Document.DocumentCategory
  ~isSelected : Bool
  ~action : () -> Void
  ~body : some View 
}
class "DocumentOrganizationView" as DocumentOrganizationView << (S, SkyBlue) struct >> { 
  ~documents : [Document]
  -selectedCategories : Set<Document.DocumentCategory>
  -groupBySubcategory
  +init(documents:)
  -filteredDocuments : [Document]
  -groupedDocuments : [String: [Document]]
  +body : some View 
}
class "DocumentCard" as DocumentCard << (S, SkyBlue) struct >> { 
  ~document : Document
  ~body : some View 
}
class "BiometricLockView" as BiometricLockView << (S, SkyBlue) struct >> { 
  -biometricService
  -isUnlocking
  -showingError
  -attemptCount
  ~onAuthenticated : () -> Void
  ~onCancel : (() -> Void)?
  +init(onAuthenticated:onCancel:)
  +body : some View
  -authenticate()
  -authenticateWithPasscode() 
}
class "BiometricLockModifier" as BiometricLockModifier << (S, SkyBlue) struct >> { 
  -biometricEnabled
  -appLockEnabled
  -isLocked
  -lastBackgroundTime : Date?
  -scenePhase
  +body(content:)
  -handleScenePhaseChange(_:)
  -checkInitialLockState()
  -checkLockRequired() 
}
class "BiometricLockView_Previews" as BiometricLockView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "CrashReportBanner" as CrashReportBanner << (S, SkyBlue) struct >> { 
  -crashService
  -isExpanded
  -isSending
  -isDismissed
  +init()
  +body : some View
  -sendReports()
  -viewDetails()
  -clearReports() 
}
class "MultiPageDocumentScanner" as MultiPageDocumentScanner << (S, SkyBlue) struct >> { 
  ~onCompletion : (Result<Data, Error>) -> Void
  -dismiss
  +init(onCompletion:)
  +makeUIViewController(context:)
  +updateUIViewController(_:context:)
  +makeCoordinator() 
}
class "Coordinator" as MultiPageDocumentScanner.Coordinator << (C, DarkSeaGreen) >> { 
  ~parent : MultiPageDocumentScanner
  -pdfService
  ~init(_:)
  +documentCameraViewController(_:didFinishWith:)
  +documentCameraViewControllerDidCancel(_:)
  +documentCameraViewController(_:didFailWithError:)
  -processScannedPages(_:)
  -createPDFFromImages(_:) 
}
class "DocumentScannerError" as DocumentScannerError << (E, LightSteelBlue) enum >> { 
  +cancelled
  +pdfCreationFailed
  +noPages
  +errorDescription : String? 
}
class "MultiPageDocumentScannerButton" as MultiPageDocumentScannerButton << (S, SkyBlue) struct >> { 
  ~title : String
  ~onScan : (Data) -> Void
  -showingScanner
  -showingError
  -errorMessage
  +init(title:onScan:)
  +body : some View 
}
class "SearchableItemModifier" as SearchableItemModifier << (S, SkyBlue) struct >> { 
  ~item : Item
  ~location : Location?
  +body(content:) 
}
class "SettingsStorageWrapper" as SettingsStorageWrapper << (C, DarkSeaGreen) >> { 
  ~storage : any SettingsStorageProtocol
  ~init(storage:) 
}
class "DynamicTypeModifier" as DynamicTypeModifier << (S, SkyBlue) struct >> { 
  -wrapper : SettingsStorageWrapper
  +init(settingsStorage:)
  +body(content:)
  -textSizePreference : TextSizePreference?
  -legibilityWeight : LegibilityWeight? 
}
class "AccessibilityLayoutModifier" as AccessibilityLayoutModifier << (S, SkyBlue) struct >> { 
  -sizeCategory
  +body(content:) 
}
class "ScannerModuleTests" as ScannerModuleTests << (C, DarkSeaGreen) >> { 
  ~testModuleInitialization() 
}
class "ScanResult" as ScanResult << (E, LightSteelBlue) enum >> { 
  +barcode(_:)
  +document(_:)
  +error(_:) 
}
class "ScannerModuleDependencies" as ScannerModuleDependencies << (S, SkyBlue) struct >> { 
  +itemRepository : any ItemRepository
  +itemTemplateRepository : any ItemTemplateRepository
  +settingsStorage : SettingsStorageProtocol
  +scanHistoryRepository : any ScanHistoryRepository
  +offlineScanQueueRepository : any OfflineScanQueueRepository
  +barcodeLookupService : BarcodeLookupService
  +networkMonitor : NetworkMonitor
  +init(itemRepository:itemTemplateRepository:settingsStorage:scanHistoryRepository:offlineScanQueueRepository:barcodeLookupService:networkMonitor:) 
}
class "ScannerModule" as ScannerModule << (C, DarkSeaGreen) >> { 
  -dependencies : ScannerModuleDependencies
  -soundService : SoundFeedbackService
  +offlineScanService : OfflineScanService
  +init(dependencies:)
  +makeScannerView()
  +makeBarcodeScannerView(completion:)
  +makeBatchScannerView(completion:)
  +makeDocumentScannerView(completion:)
  +makeScanHistoryView()
  +makeOfflineScanQueueView() 
}
class "BatchScannerView" as BatchScannerView << (S, SkyBlue) struct >> { 
  -viewModel : BatchScannerViewModel
  -dismiss
  -showingAddItemView
  -currentBarcode : String?
  ~init(viewModel:)
  ~body : some View
  -topBar : some View
  -scanningFrame : some View
  -bottomSection : some View 
}
class "BatchScannerViewModel" as BatchScannerViewModel << (C, DarkSeaGreen) >> { 
  ~isScanning
  ~isFlashOn
  ~showingPermissionAlert
  ~showingCompleteAlert
  ~scannedItems : [ScannedItem]
  ~recentScans : [String]
  ~isContinuousMode
  ~scanMode : ScanMode
  ~captureSession
  -metadataOutput
  -videoDevice : AVCaptureDevice?
  -completion : ([Item]) -> Void
  -lastScannedCode : String?
  -scanCooldown
  -itemRepository : any ItemRepository
  -itemTemplateRepository : any ItemTemplateRepository
  -createItemView : ((String) -> AnyView)?
  -soundService : SoundFeedbackService?
  -settingsStorage : (any Core.SettingsStorageProtocol)?
  -scanHistoryRepository : (any ScanHistoryRepository)?
  ~init(itemRepository:itemTemplateRepository:createItemView:soundService:settingsStorage:scanHistoryRepository:completion:)
  ~checkCameraPermission()
  -setupCaptureSession()
  ~startScanning()
  ~stopScanning()
  ~pauseScanning()
  ~resumeScanning()
  ~toggleFlash()
  ~handleScannedCode(_:)
  -createItemWithDefaults(barcode:)
  ~makeAddItemView(barcode:)
  ~completeScanning() 
}
class "ScanMode" as BatchScannerViewModel.ScanMode << (E, LightSteelBlue) enum >> { 
  ~manual
  ~continuous 
}
class "ScannedItem" as BatchScannerViewModel.ScannedItem << (S, SkyBlue) struct >> { 
  ~id
  ~barcode : String
  ~timestamp : Date
  ~item : Item? 
}
class "DocumentScannerView" as DocumentScannerView3 << (S, SkyBlue) struct >> { 
  -viewModel : DocumentScannerViewModel
  ~init(viewModel:)
  ~body : some View 
}
class "DocumentScannerViewModel" as DocumentScannerViewModel << (C, DarkSeaGreen) >> { 
  -completion : (UIImage) -> Void
  ~init(completion:)
  ~handleScannedDocument(_:) 
}
class "BarcodeScannerView" as BarcodeScannerView << (S, SkyBlue) struct >> { 
  -viewModel : BarcodeScannerViewModel
  -dismiss
  -showingAlert
  -alertMessage
  ~init(viewModel:)
  ~body : some View 
}
class "CameraPreview" as CameraPreview << (S, SkyBlue) struct >> { 
  ~session : AVCaptureSession
  ~shouldScan : Bool
  ~makeUIView(context:)
  ~updateUIView(_:context:) 
}
class "BarcodeScannerViewModel" as BarcodeScannerViewModel << (C, DarkSeaGreen) >> { 
  ~isScanning
  ~lastScannedCode : String?
  ~isFlashOn
  ~showingPermissionAlert
  ~captureSession
  -metadataOutput
  -videoDevice : AVCaptureDevice?
  -completion : (String) -> Void
  -soundService : SoundFeedbackService?
  -settingsStorage : (any Core.SettingsStorageProtocol)?
  -scanHistoryRepository : (any ScanHistoryRepository)?
  -lastScanTime : Date
  ~init(soundService:settingsStorage:scanHistoryRepository:completion:)
  ~checkCameraPermission()
  -setupCaptureSession()
  -configureFocusArea()
  ~startScanning()
  ~stopScanning()
  ~toggleFlash()
  ~handleScannedCode(_:) 
}
class "OfflineScanQueueView" as OfflineScanQueueView << (S, SkyBlue) struct >> { 
  -offlineScanService : OfflineScanService
  -showingClearAlert
  +init(offlineScanService:)
  +body : some View
  -emptyView : some View
  -queueList : some View 
}
class "OfflineScanQueueRow" as OfflineScanQueueRow << (S, SkyBlue) struct >> { 
  ~entry : OfflineScanQueueEntry
  ~onRetry : () -> Void
  ~body : some View
  -statusColor : Color
  -statusView : some View 
}
class "ScannerTabView" as ScannerTabView << (S, SkyBlue) struct >> { 
  -scanMode : ScanMode
  -showingScanner
  -showingHistory
  -showingOfflineQueue
  -lastScannedCode : String?
  -lastScannedImage : UIImage?
  -scanHistoryRepository : any ScanHistoryRepository
  -itemRepository : any ItemRepository
  -offlineScanService : OfflineScanService?
  +init(scanHistoryRepository:itemRepository:offlineScanService:)
  +body : some View
  -scannerSheet : some View
  -lastScannedResultView : some View 
}
class "ScanMode" as ScannerTabView.ScanMode << (E, LightSteelBlue) enum >> { 
  ~barcode
  ~document
  ~icon : String
  ~description : String 
}
class "BarcodeScannerPlaceholder" as BarcodeScannerPlaceholder << (S, SkyBlue) struct >> { 
  ~completion : (String) -> Void
  -dismiss
  ~body : some View 
}
class "DocumentScannerPlaceholder" as DocumentScannerPlaceholder << (S, SkyBlue) struct >> { 
  ~completion : (UIImage) -> Void
  -dismiss
  ~body : some View 
}
class "ScanHistoryView" as ScanHistoryView << (S, SkyBlue) struct >> { 
  -viewModel : ScanHistoryViewModel
  -showingClearConfirmation
  -selectedEntry : ScanHistoryEntry?
  ~init(scanHistoryRepository:itemRepository:)
  ~body : some View
  -emptyStateView : some View
  -historyList : some View
  -groupedEntries : [(key: String, entries: [ScanHistoryEntry])]
  -formatSectionDate(_:) 
}
class "ScanHistoryRow" as ScanHistoryRow << (S, SkyBlue) struct >> { 
  ~entry : ScanHistoryEntry
  ~onTap : () -> Void
  ~body : some View
  -scanTypeIcon : String
  -formatTime(_:) 
}
class "ScanHistoryViewModel" as ScanHistoryViewModel << (C, DarkSeaGreen) >> { 
  ~entries : [ScanHistoryEntry]
  ~isLoading
  -scanHistoryRepository : any ScanHistoryRepository
  -itemRepository : any ItemRepository
  ~init(scanHistoryRepository:itemRepository:)
  ~loadHistory()
  ~clearHistory() 
}
class "MockItemRepository" as MockItemRepository4 << (C, DarkSeaGreen) >> { 
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~search(query:)
  ~fuzzySearch(query:threshold:)
  ~fetchByCategory(_:)
  ~fetchByCategoryId(_:)
  ~fetchByLocation(_:)
  ~fetchByBarcode(_:)
  ~searchWithCriteria(_:)
  ~fetchItemsUnderWarranty()
  ~fetchFavoriteItems()
  ~fetchRecentlyAdded(days:) 
}
class "SoundFeedbackService" as SoundFeedbackService << (C, DarkSeaGreen) >> { 
  -soundPlayer : AVAudioPlayer?
  -settingsStorage : any SettingsStorageProtocol
  +init(settingsStorage:)
  -setupSound()
  +playSuccessSound()
  +playErrorSound() 
}
class "OfflineScanService" as OfflineScanService << (C, DarkSeaGreen) >> { 
  +pendingScans : [OfflineScanQueueEntry]
  +isProcessing : Bool
  -offlineScanQueueRepository : any OfflineScanQueueRepository
  -barcodeLookupService : BarcodeLookupService
  -itemRepository : any ItemRepository
  -networkMonitor : NetworkMonitor
  -cancellables
  -maxRetries
  -retryDelay : TimeInterval
  +init(offlineScanQueueRepository:barcodeLookupService:itemRepository:networkMonitor:)
  +queueScan(barcode:)
  +processQueue()
  +clearCompleted()
  +pendingCount : Int
  -setupNetworkMonitoring()
  -loadPendingScans()
  -processEntry(_:)
  +retryScan(id:) 
}
class "SettingsTests" as SettingsTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "SettingsViewModel" as SettingsViewModel << (C, DarkSeaGreen) >> { 
  +settings : AppSettings
  +hasConflicts
  +conflictCount
  +settingsStorage : SettingsStorageProtocol
  -cancellables
  +itemRepository : (any ItemRepository)?
  +receiptRepository : (any ReceiptRepository)?
  +locationRepository : (any LocationRepository)?
  +init(settingsStorage:itemRepository:receiptRepository:locationRepository:)
  ~resetToDefaults()
  ~exportData()
  ~clearCache()
  ~saveSettings()
  ~checkForConflicts() 
}
class "SettingsStorageWrapper" as SettingsStorageWrapper5 << (C, DarkSeaGreen) >> { 
  ~storage : any SettingsStorageProtocol
  -updateTrigger
  +init(storage:)
  +string(forKey:)
  +set(_:forKey:)
  +bool(forKey:)
  +set(_:forKey:)
  +integer(forKey:)
  +set(_:forKey:)
  +double(forKey:)
  +set(_:forKey:) 
}
class "SettingsModule" as SettingsModule << (C, DarkSeaGreen) >> { 
  -dependencies : SettingsModuleDependencies
  +init(dependencies:)
  +makeSettingsView()
  +makeAboutView() 
}
class "ScannerSensitivity" as ScannerSensitivity << (E, LightSteelBlue) enum >> { 
  +low
  +medium
  +high
  +scanInterval : Double
  +focusAreaScale : CGFloat 
}
class "AppSettings" as AppSettings << (S, SkyBlue) struct >> { 
  +notificationsEnabled : Bool
  +darkModeEnabled : Bool
  +biometricAuthEnabled : Bool
  +defaultCurrency : String
  +autoBackupEnabled : Bool
  +offlineModeEnabled : Bool
  +autoSyncOnWiFi : Bool
  +scannerSoundEnabled : Bool
  +scannerSensitivity : ScannerSensitivity
  +continuousScanDelay : Double
  +enabledBarcodeFormats : [String]
  +init(notificationsEnabled:darkModeEnabled:biometricAuthEnabled:defaultCurrency:autoBackupEnabled:offlineModeEnabled:autoSyncOnWiFi:scannerSoundEnabled:scannerSensitivity:continuousScanDelay:enabledBarcodeFormats:) 
}
class "SettingsModuleDependencies" as SettingsModuleDependencies << (S, SkyBlue) struct >> { 
  +settingsStorage : any SettingsStorageProtocol
  +itemRepository : (any ItemRepository)?
  +receiptRepository : (any ReceiptRepository)?
  +locationRepository : (any LocationRepository)?
  +init(settingsStorage:itemRepository:receiptRepository:locationRepository:) 
}
class "AboutView" as AboutView << (S, SkyBlue) struct >> { 
  -dismiss
  +init()
  +body : some View 
}
class "EnhancedSettingsView" as EnhancedSettingsView << (S, SkyBlue) struct >> { 
  -viewModel : SettingsViewModel
  -searchText
  -showingSheet
  -sheetContent : SheetContent?
  -userName
  -userEmail
  -profileImage : UIImage?
  -isSearching
  +init(viewModel:)
  +body : some View
  -handleItemTap(_:)
  -handleProfileEdit()
  -handleSupport()
  -handlePrivacy()
  -handleTerms()
  -sheetView(for:) 
}
class "SettingsListView" as SettingsListView << (S, SkyBlue) struct >> { 
  ~searchText : String
  ~viewModel : SettingsViewModel
  ~onItemTap : (SettingsItem) -> Void
  -expandedSections : Set<String>
  ~body : some View
  -filteredSections : [SettingsSection] 
}
class "SheetContent" as SheetContent << (E, LightSteelBlue) enum >> { 
  ~notifications
  ~biometric
  ~crashReporting
  ~rate
  ~id : String 
}
class "SettingsSection" as SettingsSection << (S, SkyBlue) struct >> { 
  ~id
  ~title : String
  ~icon : String
  ~color : Color
  ~items : [SettingsItem]
  ~{static} allSections : [SettingsSection] 
}
class "SettingsItem" as SettingsItem << (S, SkyBlue) struct >> { 
  ~id : String
  ~title : String
  ~icon : String
  ~type : SettingsItemType
  ~subtitle : String?
  ~badge : String?
  ~destructive : Bool 
}
class "SettingsItemType" as SettingsItemType << (E, LightSteelBlue) enum >> { 
  ~toggle(key:)
  ~navigation
  ~action
  ~picker(key:options:) 
}
class "SettingsSectionCard" as SettingsSectionCard << (S, SkyBlue) struct >> { 
  ~section : SettingsSection
  ~isExpanded : Bool
  ~viewModel : SettingsViewModel
  ~onTap : () -> Void
  ~onItemTap : (SettingsItem) -> Void
  ~body : some View 
}
class "SettingsItemRow" as SettingsItemRow << (S, SkyBlue) struct >> { 
  ~item : SettingsItem
  ~viewModel : SettingsViewModel
  ~onTap : () -> Void
  ~body : some View
  -rightSideContent : some View
  -boolBinding(for:)
  -stringBinding(for:) 
}
class "QuickStatCard" as QuickStatCard << (S, SkyBlue) struct >> { 
  ~icon : String
  ~value : String
  ~label : String
  ~color : Color
  ~body : some View 
}
class "SpotlightSettingsView" as SpotlightSettingsView << (S, SkyBlue) struct >> { 
  -spotlightManager
  -showingReindexConfirmation
  -showingClearConfirmation
  -isReindexing
  ~body : some View
  -statusSection : some View
  -settingsSection : some View
  -actionsSection : some View
  -infoSection : some View
  -reindexItems()
  -clearIndex() 
}
class "ExportDataView" as ExportDataView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "ScannerSettingsView" as ScannerSettingsView << (S, SkyBlue) struct >> { 
  ~settings : AppSettings
  ~viewModel : SettingsViewModel
  -dismiss
  ~body : some View
  -sensitivityDescription : String
  -tipRow(icon:title:description:) 
}
class "BarcodeFormatSettingsView" as BarcodeFormatSettingsView << (S, SkyBlue) struct >> { 
  ~viewModel : SettingsViewModel
  -searchText
  -selectedGroup : BarcodeFormat.FormatGroup?
  ~body : some View
  -filteredFormats : [BarcodeFormat]
  -isFormatEnabled(_:)
  -toggleFormat(_:enabled:)
  -enableAllFormats()
  -resetToCommonFormats() 
}
class "BarcodeFormatRow" as BarcodeFormatRow << (S, SkyBlue) struct >> { 
  ~format : BarcodeFormat
  ~isEnabled : Bool
  ~onToggle : (Bool) -> Void
  ~body : some View 
}
class "AccessibilitySettingsView" as AccessibilitySettingsView << (S, SkyBlue) struct >> { 
  -settingsWrapper : SettingsStorageWrapper
  ~init(settingsStorage:)
  -selectedTextSize : TextSizePreference
  -showPreview
  -sizeCategory
  ~body : some View
  -textSizeSection : some View
  -previewSection : some View
  -additionalSettingsSection : some View
  -informationSection : some View
  -loadCurrentTextSize()
  -saveTextSize(_:)
  -mapSystemSizeToPreference(_:)
  -bindingForBool(key:defaultValue:) 
}
class "CrashReportingSettingsView" as CrashReportingSettingsView << (S, SkyBlue) struct >> { 
  -settingsWrapper : SettingsStorageWrapper
  ~init(settingsStorage:)
  -crashService
  -showingReportDetails
  -showingPrivacyInfo
  -isSendingReports
  -selectedReport : CrashReport?
  ~body : some View
  -statusSection : some View
  -settingsSection : some View
  -pendingReportsSection : some View
  -privacySection : some View
  -testingSection : some View
  -bindingForCrashReporting()
  -bindingForBool(key:defaultValue:)
  -bindingForDetailLevel()
  -sendPendingReports()
  -clearPendingReports()
  -loadReportDetails()
  -generateTestCrash()
  -generateNonFatalError() 
}
class "CrashReportDetailLevel" as CrashReportDetailLevel << (E, LightSteelBlue) enum >> { 
  ~basic
  ~standard
  ~detailed 
}
class "TestError" as TestError << (E, LightSteelBlue) enum >> { 
  ~testCrash
  ~localizedDescription : String 
}
class "CrashReportingPrivacyView" as CrashReportingPrivacyView << (S, SkyBlue) struct >> { 
  ~body : some View
  -privacySection(title:items:isExclusion:) 
}
class "CrashReportDetailView" as CrashReportDetailView << (S, SkyBlue) struct >> { 
  ~report : CrashReport
  -showingFullStackTrace
  ~body : some View
  -headerSection : some View
  -infoSection : some View
  -stackTraceSection : some View
  -deviceInfoSection : some View
  -appInfoSection : some View
  -userInfoSection(_:)
  -iconForType(_:)
  -colorForType(_:) 
}
class "InfoRow" as InfoRow6 << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "SettingsProfileHeaderView" as SettingsProfileHeaderView << (S, SkyBlue) struct >> { 
  ~userName : String
  ~userEmail : String
  ~profileImage : UIImage?
  ~onProfileEdit : () -> Void
  ~body : some View 
}
class "SettingsQuickStatsView" as SettingsQuickStatsView << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "SettingsSearchBarView" as SettingsSearchBarView << (S, SkyBlue) struct >> { 
  ~searchText : String
  ~body : some View 
}
class "SettingsFooterView" as SettingsFooterView << (S, SkyBlue) struct >> { 
  ~onSupport : () -> Void
  ~onPrivacy : () -> Void
  ~onTerms : () -> Void
  ~body : some View 
}
class "RateAppView" as RateAppView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "SettingsBackgroundView" as SettingsBackgroundView << (S, SkyBlue) struct >> { 
  ~colorScheme
  ~body : some View
  -gradientColors : [Color] 
}
class "PatternOverlay" as PatternOverlay << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "FloatingShapes" as FloatingShapes << (S, SkyBlue) struct >> { 
  -isAnimating
  ~body : some View 
}
class "NotificationSettingsView" as NotificationSettingsView << (S, SkyBlue) struct >> { 
  -notificationManager
  -showingPermissionAlert
  -isLoadingPermission
  ~body : some View
  -requestPermission()
  -sendTestNotification() 
}
class "NotificationTypeRow" as NotificationTypeRow << (S, SkyBlue) struct >> { 
  ~type : NotificationManager.NotificationType
  ~isEnabled : Bool
  ~onToggle : () -> Void
  ~body : some View
  -descriptionForType(_:) 
}
class "QuietHoursRow" as QuietHoursRow << (S, SkyBlue) struct >> { 
  ~startTime : DateComponents
  ~endTime : DateComponents
  -startDate
  -endDate
  ~body : some View 
}
class "NotificationSettingsView_Previews" as NotificationSettingsView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "ShareAppView" as ShareAppView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "CategoryManagementView" as CategoryManagementView << (S, SkyBlue) struct >> { 
  -viewModel : CategoryManagementViewModel
  -showingAddCategory
  -selectedCategory : ItemCategoryModel?
  -showingDeleteAlert
  -categoryToDelete : ItemCategoryModel?
  -selectedParentCategory : ItemCategoryModel?
  -expandedCategories : Set<UUID>
  +init(categoryRepository:)
  +body : some View
  -toggleExpanded(_:) 
}
class "CategoryRowView" as CategoryRowView << (S, SkyBlue) struct >> { 
  ~category : ItemCategoryModel
  ~subcategories : [ItemCategoryModel]
  ~isEditable : Bool
  ~isExpanded : Bool
  ~onToggleExpand : () -> Void
  ~onAddSubcategory : () -> Void
  ~onEdit : () -> Void
  ~onDelete : () -> Void
  ~body : some View 
}
class "SubcategoryRowView" as SubcategoryRowView << (S, SkyBlue) struct >> { 
  ~category : ItemCategoryModel
  ~onEdit : () -> Void
  ~onDelete : () -> Void
  ~body : some View 
}
class "CategoryManagementViewModel" as CategoryManagementViewModel << (C, DarkSeaGreen) >> { 
  ~builtInCategories : [ItemCategoryModel]
  ~customCategories : [ItemCategoryModel]
  ~subcategories : [UUID: [ItemCategoryModel]]
  ~isLoading
  ~errorMessage : String?
  ~categoryRepository : any CategoryRepository
  ~rootCustomCategories : [ItemCategoryModel]
  ~init(categoryRepository:)
  ~loadCategories()
  ~deleteCategory(_:) 
}
class "AddCategoryView" as AddCategoryView << (S, SkyBlue) struct >> { 
  -dismiss
  -name
  -selectedIcon
  -selectedColor
  -isLoading
  -errorMessage : String?
  ~categoryRepository : any CategoryRepository
  ~parentCategory : ItemCategoryModel?
  ~onComplete : (ItemCategoryModel) -> Void
  ~availableIcons
  ~availableColors
  ~body : some View
  -saveCategory() 
}
class "EditCategoryView" as EditCategoryView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -selectedIcon : String
  -selectedColor : String
  -isLoading
  -errorMessage : String?
  ~category : ItemCategoryModel
  ~categoryRepository : any CategoryRepository
  ~onComplete : () -> Void
  ~init(category:categoryRepository:onComplete:)
  ~availableIcons
  ~availableColors
  ~body : some View
  -saveCategory() 
}
class "VoiceOverSettingsView" as VoiceOverSettingsView << (S, SkyBlue) struct >> { 
  -settingsWrapper : SettingsStorageWrapper
  ~init(settingsStorage:)
  -voiceOverEnabled
  -showingGuide
  ~body : some View
  -statusSection : some View
  -preferencesSection : some View
  -announcementsSection : some View
  -gesturesSection : some View
  -resourcesSection : some View
  -bindingForBool(key:defaultValue:)
  -bindingForInt(key:defaultValue:)
  -testVoiceOver() 
}
class "VoiceOverGesturesView" as VoiceOverGesturesView << (S, SkyBlue) struct >> { 
  ~body : some View
  -gestureRow(gesture:action:description:) 
}
class "TermsOfServiceView" as TermsOfServiceView << (S, SkyBlue) struct >> { 
  -dismiss
  -selectedSection : TermsSection?
  ~body : some View
  -termsSection(section:title:icon:content:)
  -bulletPoint(_:)
  -shareTermsOfService()
  -printTermsOfService() 
}
class "TermsSection" as TermsSection << (E, LightSteelBlue) enum >> { 
  ~agreement
  ~license
  ~ownership
  ~responsibilities
  ~privacy
  ~updates
  ~disclaimers
  ~liability
  ~termination
  ~legal
  ~contact 
}
class "PrivacyPolicyView" as PrivacyPolicyView << (S, SkyBlue) struct >> { 
  -dismiss
  -selectedSection : PrivacySection?
  ~body : some View
  -privacySection(section:title:icon:content:)
  -bulletPoint(_:)
  -complianceBadge(_:color:)
  -sharePrivacyPolicy()
  -printPrivacyPolicy() 
}
class "PrivacySection" as PrivacySection << (E, LightSteelBlue) enum >> { 
  ~dataCollection
  ~dataUsage
  ~dataSecurity
  ~dataSharing
  ~userRights
  ~childrenPrivacy
  ~internationalRights
  ~contact 
}
class "ClearCacheView" as ClearCacheView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "BiometricSettingsView" as BiometricSettingsView << (S, SkyBlue) struct >> { 
  -biometricService
  -biometricEnabled
  -appLockEnabled
  -protectSensitiveData
  -showingError
  -showingEnrollmentAlert
  ~body : some View
  -statusSection : some View
  -settingsSection : some View
  -securitySection : some View
  -informationSection : some View
  -statusText : String
  -unavailableReason : String
  -protectedDataTypes : [String]
  -autoLockTimeoutText : String
  -testBiometric() 
}
class "BiometricSettingsView_Previews" as BiometricSettingsView_Previews << (S, SkyBlue) struct >> { 
  ~{static} previews : some View 
}
class "SyncTests" as SyncTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "SyncConflict" as SyncConflict7 << (S, SkyBlue) struct >> { 
  +id
  +entityType : EntityType
  +entityId : UUID
  +localVersion : ConflictVersion
  +remoteVersion : ConflictVersion
  +conflictType : ConflictType
  +detectedAt : Date
  +init(entityType:entityId:localVersion:remoteVersion:conflictType:detectedAt:) 
}
class "EntityType" as SyncConflict.EntityType << (E, LightSteelBlue) enum >> { 
  +item
  +receipt
  +location
  +collection
  +warranty
  +document
  +icon : String 
}
class "ConflictType" as SyncConflict.ConflictType << (E, LightSteelBlue) enum >> { 
  +update
  +delete
  +create
  +displayName : String
  +description : String 
}
class "ConflictVersion" as ConflictVersion << (S, SkyBlue) struct >> { 
  +data : Data
  +modifiedAt : Date
  +modifiedBy : String?
  +deviceName : String?
  +changes : [FieldChange]
  +init(data:modifiedAt:modifiedBy:deviceName:changes:) 
}
class "FieldChange" as FieldChange << (S, SkyBlue) struct >> { 
  +id
  +fieldName : String
  +displayName : String
  +oldValue : String?
  +newValue : String?
  +isConflicting : Bool
  +init(fieldName:displayName:oldValue:newValue:isConflicting:) 
}
class "ConflictResolution" as ConflictResolution8 << (E, LightSteelBlue) enum >> { 
  +keepLocal
  +keepRemote
  +merge(_:)
  +custom(_:)
  +displayName : String 
}
class "MergeStrategy" as MergeStrategy << (E, LightSteelBlue) enum >> { 
  +latestWins
  +localPriority
  +remotePriority
  +fieldLevel(_:)
  +displayName : String 
}
class "FieldResolution" as FieldResolution << (S, SkyBlue) struct >> { 
  +fieldName : String
  +resolution : FieldResolutionType
  +init(fieldName:resolution:) 
}
class "FieldResolutionType" as FieldResolution.FieldResolutionType << (E, LightSteelBlue) enum >> { 
  +useLocal
  +useRemote
  +concatenate(separator:)
  +average
  +latest 
}
class "ConflictResolutionResult" as ConflictResolutionResult << (S, SkyBlue) struct >> { 
  +conflictId : UUID
  +resolution : ConflictResolution
  +resolvedData : Data
  +resolvedAt : Date
  +resolvedBy : String?
  +init(conflictId:resolution:resolvedData:resolvedAt:resolvedBy:) 
}
class "SyncModule" as SyncModule << (C, DarkSeaGreen) >> { 
  +syncStatus : SyncStatus
  +syncStatusPublisher : Published<SyncStatus>.Publisher
  -dependencies : SyncModuleDependencies
  -syncTimer : Timer?
  -syncTask : Task<Void, Error>?
  +init(dependencies:)
  +deinit
  +startSync()
  +stopSync()
  +syncNow()
  -syncItems()
  -syncReceipts()
  -syncLocations() 
}
class "SyncStatus" as SyncStatus9 << (E, LightSteelBlue) enum >> { 
  +idle
  +syncing(progress:)
  +completed(date:)
  +failed(error:)
  +isSyncing : Bool 
}
class "SyncModuleDependencies" as SyncModuleDependencies << (S, SkyBlue) struct >> { 
  +itemRepository : ItemRepository
  +receiptRepository : ReceiptRepository
  +locationRepository : LocationRepository
  +cloudService : CloudServiceProtocol
  +init(itemRepository:receiptRepository:locationRepository:cloudService:) 
}
class "BatchResolutionView" as BatchResolutionView << (S, SkyBlue) struct >> { 
  ~conflicts : [SyncConflict]
  ~viewModel : ConflictResolutionViewModel
  ~onComplete : () -> Void
  -selectedStrategy : ConflictResolution
  -mergeStrategy : MergeStrategy
  -isResolving
  -progress : Double
  -currentConflictIndex
  -dismiss
  ~body : some View
  -progressView : some View
  -summaryCard : some View
  -strategySelectionCard : some View
  -previewCard : some View
  -warningCard : some View
  -actionButtons : some View
  -resolutionIcon : String
  -resolutionTitle : String
  -resolutionDescription : String
  -resolveAllConflicts() 
}
class "StatItem" as StatItem << (S, SkyBlue) struct >> { 
  ~value : String
  ~label : String
  ~body : some View 
}
class "StrategyOption" as StrategyOption << (S, SkyBlue) struct >> { 
  ~title : String
  ~description : String
  ~icon : String
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "MergeStrategyOption" as MergeStrategyOption << (S, SkyBlue) struct >> { 
  ~strategy : MergeStrategy
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "FieldByFieldComparisonView" as FieldByFieldComparisonView << (S, SkyBlue) struct >> { 
  ~conflict : SyncConflict
  ~details : ConflictDetails
  ~fieldResolutions : [FieldResolution]
  -resolutions : [String: FieldResolution.FieldResolutionType]
  -dismiss
  ~body : some View
  -instructionsCard : some View
  -initializeResolutions()
  -applyResolutions() 
}
class "FieldComparisonCard" as FieldComparisonCard << (S, SkyBlue) struct >> { 
  ~change : FieldChange
  ~resolution : FieldResolution.FieldResolutionType
  -showingOptions
  ~body : some View
  -canHaveSpecialOptions(for:)
  -specialOptionsView(for:) 
}
class "ValueOption" as ValueOption << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "ConflictDetailView" as ConflictDetailView << (S, SkyBlue) struct >> { 
  ~conflict : SyncConflict
  ~viewModel : ConflictResolutionViewModel
  ~onResolved : () -> Void
  -selectedResolution : ConflictResolution
  -showingFieldComparison
  -fieldResolutions : [FieldResolution]
  -isResolving
  -conflictDetails : ConflictDetails?
  -loadingDetails
  -dismiss
  ~body : some View
  -conflictHeaderCard : some View
  -versionComparisonCard : some View
  -fieldChangesCard(details:)
  -resolutionOptionsCard : some View
  -actionButtons : some View
  -loadConflictDetails()
  -resolveConflict() 
}
class "VersionCard" as VersionCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~version : ConflictVersion
  ~icon : String
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "FieldChangeRow" as FieldChangeRow << (S, SkyBlue) struct >> { 
  ~change : FieldChange
  ~body : some View 
}
class "ResolutionOptionRow" as ResolutionOptionRow << (S, SkyBlue) struct >> { 
  ~title : String
  ~description : String
  ~icon : String
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "ConflictResolutionView" as ConflictResolutionView << (S, SkyBlue) struct >> { 
  -viewModel : ConflictResolutionViewModel
  -selectedConflict : SyncConflict?
  -showingDetailView
  -showingBatchResolution
  -selectedStrategy : ConflictResolution
  +init(conflictService:itemRepository:receiptRepository:locationRepository:)
  +body : some View
  -emptyStateView : some View
  -conflictListView : some View
  -summaryCard : some View
  -toolbarContent : some ToolbarContent 
}
class "ConflictGroupView" as ConflictGroupView << (S, SkyBlue) struct >> { 
  ~entityType : SyncConflict.EntityType
  ~conflicts : [SyncConflict]
  ~onSelectConflict : (SyncConflict) -> Void
  ~body : some View 
}
class "ConflictRowView" as ConflictRowView << (S, SkyBlue) struct >> { 
  ~conflict : SyncConflict
  ~onTap : () -> Void
  ~body : some View 
}
class "StatItem" as StatItem10 << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~body : some View 
}
class "ConflictResolutionViewModel" as ConflictResolutionViewModel << (C, DarkSeaGreen) >> { 
  ~conflicts : [SyncConflict]
  ~isLoading
  ~showError
  ~errorMessage : String?
  -conflictService : ConflictResolutionService
  -itemRepository : any ItemRepository
  -receiptRepository : any ReceiptRepository
  -locationRepository : any LocationRepository
  ~itemConflictCount : Int
  ~receiptConflictCount : Int
  ~locationConflictCount : Int
  ~init(conflictService:itemRepository:receiptRepository:locationRepository:)
  ~refreshConflicts()
  ~resolveConflict(_:resolution:)
  ~resolveAllConflicts(strategy:)
  ~getConflictDetails(_:) 
}
class "ConflictResolutionService" as ConflictResolutionService << (C, DarkSeaGreen) >> { 
  +activeConflicts : [SyncConflict]
  +isResolving
  +lastResolutionDate : Date?
  -itemRepository : any ItemRepository
  -receiptRepository : any ReceiptRepository
  -locationRepository : any LocationRepository
  -conflictHistory : [UUID: ConflictResolutionResult]
  +init(itemRepository:receiptRepository:locationRepository:)
  +detectConflicts(localData:remoteData:)
  +resolveConflict(_:resolution:)
  +resolveAllConflicts(strategy:)
  +getConflictDetails(_:)
  -detectItemConflicts(localItems:remoteItems:)
  -detectReceiptConflicts(localReceipts:remoteReceipts:)
  -detectLocationConflicts(localLocations:remoteLocations:)
  -createItemConflict(localItem:remoteItem:type:)
  -createReceiptConflict(localReceipt:remoteReceipt:type:)
  -createLocationConflict(localLocation:remoteLocation:type:)
  -detectItemChanges(from:to:)
  -mergeConflict(_:strategy:)
  -mergeFieldLevel(_:resolutions:)
  -mergeItemFields(_:resolutions:)
  -applyResolution(conflict:resolvedData:)
  -getItemConflictDetails(_:)
  -getReceiptConflictDetails(_:)
  -getLocationConflictDetails(_:) 
}
class "ConflictError" as ConflictError << (E, LightSteelBlue) enum >> { 
  +unsupportedEntityType
  +decodingFailed
  +mergeNotSupported
  +resolutionFailed
  +errorDescription : String? 
}
class "ItemConflictDetails" as ItemConflictDetails << (S, SkyBlue) struct >> { 
  +entityType
  +localItem : Item
  +remoteItem : Item
  +changes : [FieldChange] 
}
class "ReceiptConflictDetails" as ReceiptConflictDetails << (S, SkyBlue) struct >> { 
  +entityType
  +localReceipt : Receipt
  +remoteReceipt : Receipt
  +changes : [FieldChange] 
}
class "LocationConflictDetails" as LocationConflictDetails << (S, SkyBlue) struct >> { 
  +entityType
  +localLocation : Location
  +remoteLocation : Location
  +changes : [FieldChange] 
}
class "ItemsModuleTests" as ItemsModuleTests << (C, DarkSeaGreen) >> { 
  ~testModuleInitialization() 
}
class "SpendingDashboardViewModel" as SpendingDashboardViewModel << (C, DarkSeaGreen) >> { 
  ~itemRepository : any ItemRepository
  ~receiptRepository : (any ReceiptRepository)?
  ~budgetRepository : (any BudgetRepository)?
  ~warrantyRepository : any WarrantyRepository
  ~totalSpent : Decimal
  ~itemCount : Int
  ~averagePrice : Decimal
  ~categoryCount : Int
  ~spendingData : [SpendingDataPoint]
  ~topCategories : [CategorySpendingData]
  ~recentPurchases : [Item]
  ~topRetailers : [RetailerSpendingData]
  ~isLoading
  ~currency
  ~init(itemRepository:receiptRepository:budgetRepository:warrantyRepository:)
  ~loadData(for:)
  ~getItems(for:)
  -filterItems(_:by:)
  -calculateStatistics(from:)
  -generateSpendingData(from:timeRange:)
  -calculateCategoryBreakdown(from:)
  -updateRecentPurchases(from:)
  -calculateTopRetailers(from:) 
}
class "SpendingDataPoint" as SpendingDataPoint << (S, SkyBlue) struct >> { 
  ~id
  ~date : Date
  ~amount : Decimal 
}
class "CategorySpendingData" as CategorySpendingData << (S, SkyBlue) struct >> { 
  ~id : UUID
  ~category : ItemCategory
  ~itemCount : Int
  ~totalSpent : Decimal 
}
class "RetailerSpendingData" as RetailerSpendingData << (S, SkyBlue) struct >> { 
  ~id : UUID
  ~name : String
  ~itemCount : Int
  ~totalSpent : Decimal 
}
class "ItemsListViewModel" as ItemsListViewModel << (C, DarkSeaGreen) >> { 
  ~items : [Item]
  ~filteredItems : [Item]
  ~searchText
  ~selectedCategory : ItemCategory?
  ~selectedLocation : Location?
  ~sortOption : SortOption
  ~isLoading
  ~error : Error?
  ~activeFilters
  ~showingAdvancedFilters
  ~showingAddReceipt
  ~totalValue : Decimal
  ~itemCount : Int
  ~locations : [Location]
  ~itemRepository : any ItemRepository
  ~locationRepository : any LocationRepository
  ~itemsModule : ItemsModuleAPI?
  -cancellables
  ~init(itemRepository:locationRepository:)
  -setupBindings()
  ~loadData()
  -applyFilters()
  -applyAdvancedFilters(to:)
  -sortItems()
  ~applyAdvancedFilters(_:)
  ~clearAllFilters()
  ~removeFilter(_:)
  ~deleteItem(_:)
  ~duplicateItem(_:)
  ~refresh()
  ~makeAddItemView()
  ~makeItemDetailView(for:)
  ~makeBatchScannerView()
  ~makeReceiptsListView()
  ~makeCSVImportView()
  ~makeCSVExportView() 
}
class "SortOption" as ItemsListViewModel.SortOption << (E, LightSteelBlue) enum >> { 
  ~dateModified
  ~name
  ~value
  ~category
  ~icon : String 
}
class "CategoryAnalyticsViewModel" as CategoryAnalyticsViewModel << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  ~categoryData : [CategorySpendingData]
  ~trendData : [CategoryTrendData]
  ~totalSpent : Decimal
  ~topCategory : ItemCategory?
  ~topCategoryPercentage
  ~fastestGrowingCategory : ItemCategory?
  ~growthPercentage
  ~categoryWithMostItems : ItemCategory?
  ~mostItemsCount
  ~isLoading
  -allItems : [Item]
  ~init(itemRepository:)
  ~loadData(for:)
  ~getCategoryData(for:)
  ~getTrendData(for:)
  ~getItems(for:)
  ~getRank(for:)
  ~getPercentage(for:)
  -filterItems(_:by:)
  -calculateCategoryData(from:)
  -generateTrendData(from:timeRange:)
  -calculateInsights() 
}
class "CategoryTrendData" as CategoryTrendData << (S, SkyBlue) struct >> { 
  ~id
  ~category : ItemCategory
  ~dataPoints : [SpendingDataPoint] 
}
class "PortfolioValueViewModel" as PortfolioValueViewModel << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  ~currentValue : Decimal
  ~valueChange : Decimal
  ~valueChangePercent : Double
  ~totalItems : Int
  ~averageValue : Decimal
  ~totalCost : Decimal
  ~valueHistory : [PortfolioDataPoint]
  ~categoryValues : [CategoryValueData]
  ~mostValuableItems : [Item]
  ~peakValue : Decimal
  ~peakValueDate : Date?
  ~averageGrowthRate : Double
  ~totalDepreciation : Decimal
  ~isLoading
  ~currency
  ~init(itemRepository:)
  ~loadData(for:)
  -calculateCurrentValue(from:)
  -generateValueHistory(from:timeRange:)
  -calculateValueAtDate(_:items:)
  -calculateCategoryBreakdown(from:)
  -updateMostValuableItems(from:)
  -calculateStatistics() 
}
class "PortfolioDataPoint" as PortfolioDataPoint << (S, SkyBlue) struct >> { 
  ~id
  ~date : Date
  ~value : Decimal 
}
class "CategoryValueData" as CategoryValueData << (S, SkyBlue) struct >> { 
  ~id : UUID
  ~category : ItemCategory
  ~itemCount : Int
  ~value : Decimal
  ~percentage : String
  ~valueChange : Decimal 
}
class "ItemRepositoryImplementation" as ItemRepositoryImplementation << (C, DarkSeaGreen) >> { 
  -items : [Item]
  -queue
  ~init()
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~search(query:)
  ~fuzzySearch(query:threshold:)
  ~fetchByCategory(_:)
  ~fetchByCategoryId(_:)
  ~fetchByLocation(_:)
  ~fetchByBarcode(_:)
  ~searchWithCriteria(_:)
  ~fetchItemsUnderWarranty()
  ~fetchFavoriteItems()
  ~fetchRecentlyAdded(days:)
  ~createItem(_:) 
}
class "LocationRepositoryImplementation" as LocationRepositoryImplementation << (C, DarkSeaGreen) >> { 
  -locations : [Location]
  -queue
  ~init()
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~fetchRootLocations()
  ~fetchChildren(of:)
  ~getAllLocations() 
}
class "ItemTemplateRepositoryImplementation" as ItemTemplateRepositoryImplementation << (C, DarkSeaGreen) >> { 
  -templates : [ItemTemplate]
  -queue
  ~fetchAll()
  ~fetch(id:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:)
  ~fetchByCategory(_:)
  ~search(query:) 
}
class "ItemsModule" as ItemsModule << (C, DarkSeaGreen) >> { 
  -dependencies : ItemsModuleDependencies
  +init(dependencies:)
  +makeItemsListView()
  +makeItemsListView(onSearchTapped:)
  +makeItemsListView(onSearchTapped:onBarcodeSearchTapped:)
  +makeItemDetailView(item:)
  +makeAddItemView(completion:)
  +makeEditItemView(item:completion:)
  +makeSpendingDashboardView()
  +makeCollectionsListView()
  +makeCollectionDetailView(collection:)
  +makeReceiptsListView()
  +makeTagsManagementView()
  +makeStorageUnitsListView()
  +makeNaturalLanguageSearchView()
  +makeBarcodeSearchView()
  +makeRetailerAnalyticsView()
  +makeTimeBasedAnalyticsView()
  +makeDepreciationReportView()
  +makePurchasePatternsView()
  +makeBudgetDashboardView()
  +makeCSVImportView(onImportComplete:)
  +makeCSVExportView(items:)
  +makeWarrantyDashboardView()
  +makeWarrantyNotificationsView() 
}
class "ItemsModuleDependencies" as ItemsModuleDependencies << (S, SkyBlue) struct >> { 
  +itemRepository : any ItemRepository
  +locationRepository : any LocationRepository
  +itemTemplateRepository : any ItemTemplateRepository
  +photoRepository : any PhotoRepository
  +barcodeLookupService : any BarcodeLookupService
  +collectionRepository : any CollectionRepository
  +tagRepository : any TagRepository
  +storageUnitRepository : any StorageUnitRepository
  +warrantyRepository : any WarrantyRepository
  +documentRepository : any DocumentRepository
  +documentStorage : DocumentStorageProtocol
  +cloudStorage : CloudDocumentStorageProtocol?
  +searchHistoryRepository : any SearchHistoryRepository
  +savedSearchRepository : any SavedSearchRepository
  +receiptRepository : (any ReceiptRepository)?
  +scannerModule : (any ScannerModuleAPI)?
  +receiptsModule : (any ReceiptsModuleAPI)?
  +budgetRepository : (any BudgetRepository)?
  +init(itemRepository:locationRepository:itemTemplateRepository:photoRepository:barcodeLookupService:collectionRepository:tagRepository:storageUnitRepository:warrantyRepository:documentRepository:documentStorage:cloudStorage:searchHistoryRepository:savedSearchRepository:receiptRepository:scannerModule:receiptsModule:budgetRepository:) 
}
class "ItemsModuleFactory" as ItemsModuleFactory << (S, SkyBlue) struct >> { 
  +{static} makeModule()
  +{static} makeModule(itemRepository:locationRepository:itemTemplateRepository:photoRepository:barcodeLookupService:collectionRepository:tagRepository:storageUnitRepository:warrantyRepository:documentRepository:documentStorage:) 
}
class "MockWarrantyRepository" as MockWarrantyRepository11 << (C, DarkSeaGreen) >> { 
  -warranties : [Warranty]
  -warrantiesSubject : [Warranty]
  ~warrantiesPublisher : AnyPublisher<[Warranty], Never>
  ~fetchAll()
  ~fetch(by:)
  ~fetch(id:)
  ~fetchWarranties(for:)
  ~save(_:)
  ~saveAll(_:)
  ~delete(_:)
  ~delete(id:) 
}
class "TemplateSelectionView" as TemplateSelectionView << (S, SkyBlue) struct >> { 
  ~templates : [ItemTemplate]
  ~onSelect : (ItemTemplate) -> Void
  -dismiss
  -searchText
  ~filteredTemplates : [ItemTemplate]
  ~body : some View 
}
class "TemplateRowView" as TemplateRowView << (S, SkyBlue) struct >> { 
  ~template : ItemTemplate
  ~body : some View 
}
class "ItemShareView" as ItemShareView << (S, SkyBlue) struct >> { 
  ~item : Item
  ~sharingService : ItemSharingService
  -dismiss
  -selectedFormat
  -isGenerating
  -showingShareSheet
  -shareItems : [Any]
  -showingError
  -errorMessage
  ~body : some View
  -shareItem() 
}
class "ShareFormatRow" as ShareFormatRow << (S, SkyBlue) struct >> { 
  ~format : ItemSharingService.ShareFormat
  ~isSelected : Bool
  ~action : () -> Void
  ~body : some View 
}
class "SharePreviewSection" as SharePreviewSection << (S, SkyBlue) struct >> { 
  ~item : Item
  ~format : ItemSharingService.ShareFormat
  ~sharingService : ItemSharingService
  -previewContent : String
  -previewImage : UIImage?
  -isLoading
  ~body : some View
  -loadPreview() 
}
class "ShareSheet" as ShareSheet12 << (S, SkyBlue) struct >> { 
  ~items : [Any]
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:) 
}
class "ItemDetailView" as ItemDetailView << (S, SkyBlue) struct >> { 
  -viewModel : ItemDetailViewModel
  -dismiss
  -showingEditView
  -showingDeleteConfirmation
  -showingPhotoGallery
  -selectedPhotoIndex
  -photos : [Photo]
  -showingDocuments
  -documentCount
  -showingCloudSync
  -pendingSyncCount
  -showingShareView
  ~init(viewModel:)
  ~body : some View
  -headerSection : some View
  -infoSection : some View
  -purchaseSection : some View
  -identificationSection : some View
  -locationSection : some View
  -tagsSection : some View
  -colorForTag(_:)
  -notesSection(notes:)
  -warrantySection : some View
  -warrantyStatusColor(_:)
  -metadataSection : some View
  -documentsSection : some View
  -photosSection : some View
  -loadPhotos()
  -loadDocumentCount()
  -loadPendingSyncCount() 
}
class "PhotoThumbnailButton" as PhotoThumbnailButton << (S, SkyBlue) struct >> { 
  ~photo : Photo
  ~action : () -> Void
  ~body : some View 
}
class "MorePhotosButton" as MorePhotosButton << (S, SkyBlue) struct >> { 
  ~count : Int
  ~action : () -> Void
  ~body : some View 
}
class "InfoRow" as InfoRow13 << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~isSecure : Bool
  ~body : some View 
}
class "ItemDetailViewModel" as ItemDetailViewModel << (C, DarkSeaGreen) >> { 
  ~item : Item
  ~itemRepository : any ItemRepository
  ~locationRepository : (any LocationRepository)?
  -photoRepository : (any PhotoRepository)?
  ~warrantyRepository : (any WarrantyRepository)?
  ~documentRepository : (any DocumentRepository)?
  ~documentStorage : DocumentStorageProtocol?
  ~cloudStorage : CloudDocumentStorageProtocol?
  ~locationName : String?
  ~warranty : Warranty?
  ~showingWarrantyDetail
  ~showingAddWarranty
  ~itemsModule : ItemsModuleAPI?
  ~init(item:itemRepository:locationRepository:photoRepository:warrantyRepository:documentRepository:documentStorage:cloudStorage:itemsModule:)
  -loadLocationName()
  ~deleteItem()
  ~duplicateItem()
  ~makeEditView()
  ~loadPhotos()
  -loadWarranty()
  ~showWarrantyDetail()
  ~showAddWarranty()
  ~loadDocumentCount()
  ~loadPendingSyncCount() 
}
class "EditItemView" as EditItemView << (S, SkyBlue) struct >> { 
  -viewModel : EditItemViewModel
  -dismiss
  -focusedField : Field?
  ~init(viewModel:)
  ~body : some View 
}
class "Field" as EditItemView.Field << (E, LightSteelBlue) enum >> { 
  ~name 
}
class "EditItemViewModel" as EditItemViewModel << (C, DarkSeaGreen) >> { 
  ~item : Item
  -itemRepository : any ItemRepository
  -locationRepository : any LocationRepository
  -completion : (Item) -> Void
  ~scannerModule : ScannerModuleAPI?
  ~name : String
  ~brand : String
  ~model : String
  ~category : ItemCategory
  ~condition : ItemCondition
  ~quantity : Int
  ~purchasePrice : Decimal?
  ~currentValue : Decimal?
  ~purchaseDate : Date
  ~serialNumber : String
  ~barcode : String
  ~selectedLocationId : UUID?
  ~notes : String
  ~tags : [String]
  ~photoCount : Int
  ~locations : [Location]
  ~availableTags : [Tag]
  ~showError
  ~errorMessage
  ~showBarcodeScanner
  ~showPhotoOptions
  ~photoSource : PhotoSource?
  ~showCategorySuggestion
  ~suggestedCategory : ItemCategory
  ~suggestionConfidence : Double
  -originalCategory : ItemCategory
  ~isValid : Bool
  ~hasChanges : Bool
  ~init(item:itemRepository:locationRepository:completion:)
  -loadLocations()
  ~saveItem()
  ~makeBarcodeScanner()
  -updateCategorySuggestion()
  ~acceptCategorySuggestion() 
}
class "PhotoSource" as EditItemViewModel.PhotoSource << (E, LightSteelBlue) enum >> { 
  ~camera 
}
class "ItemsListView" as ItemsListView << (S, SkyBlue) struct >> { 
  -viewModel : ItemsListViewModel
  -showingAddItem
  -selectedItem : Item?
  -showingItemDetail
  -selectedSegment
  -showingImport
  -showingExport
  -itemToShare : Item?
  -showingShareView
  -onSearchTapped : (() -> Void)?
  -onBarcodeSearchTapped : (() -> Void)?
  ~init(viewModel:onSearchTapped:onBarcodeSearchTapped:)
  ~body : some View
  -emptyStateView : some View
  -itemsListContent : some View
  -statsHeader : some View
  -filterBar : some View 
}
class "ItemRowView" as ItemRowView << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "FilterChip" as FilterChip14 << (S, SkyBlue) struct >> { 
  ~title : String
  ~icon : String
  ~isSelected : Bool
  ~action : () -> Void
  ~body : some View 
}
class "AddEditTagView" as AddEditTagView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -selectedIcon : String
  -selectedColor : String
  -isLoading
  -errorMessage : String?
  ~tag : Tag?
  ~tagRepository : any TagRepository
  ~onComplete : (Tag) -> Void
  -isEditing : Bool
  ~availableIcons
  ~availableColors
  ~init(tag:tagRepository:onComplete:)
  ~body : some View
  -saveTag() 
}
class "TagsManagementView" as TagsManagementView << (S, SkyBlue) struct >> { 
  -viewModel : TagsManagementViewModel
  -showingAddTag
  -selectedTag : Tag?
  -showingDeleteAlert
  -tagToDelete : Tag?
  +init(tagRepository:)
  +body : some View 
}
class "TagRow" as TagRow << (S, SkyBlue) struct >> { 
  ~tag : Tag
  ~onEdit : () -> Void
  ~onDelete : () -> Void
  ~body : some View 
}
class "TagsManagementViewModel" as TagsManagementViewModel << (C, DarkSeaGreen) >> { 
  ~tags : [Tag]
  ~isLoading
  ~errorMessage : String?
  ~tagRepository : any TagRepository
  ~init(tagRepository:)
  ~loadTags()
  ~deleteTag(_:) 
}
class "TagSelectorView" as TagSelectorView << (S, SkyBlue) struct >> { 
  -viewModel : TagSelectorViewModel
  ~selectedTags : [String]
  -showingCreateTag
  -searchText
  +init(tagRepository:selectedTags:)
  +body : some View
  -tagExists(_:)
  -createNewTag(_:)
  -toggleTag(_:) 
}
class "TagSelectionRow" as TagSelectionRow << (S, SkyBlue) struct >> { 
  ~tag : Tag
  ~isSelected : Bool
  ~onToggle : () -> Void
  ~body : some View 
}
class "TagChip" as TagChip15 << (S, SkyBlue) struct >> { 
  ~tag : Tag
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "TagSelectorViewModel" as TagSelectorViewModel << (C, DarkSeaGreen) >> { 
  ~tags : [Tag]
  ~isLoading
  ~tagRepository : any TagRepository
  ~suggestedColors
  ~init(tagRepository:)
  ~loadTags() 
}
class "AddSavedSearchView" as AddSavedSearchView << (S, SkyBlue) struct >> { 
  -dismiss
  -name
  -query : String
  -searchType : SearchHistoryEntry.SearchType
  -selectedColor
  -selectedIcon
  -isPinned
  -showingIconPicker
  -showingColorPicker
  ~savedSearchRepository : any SavedSearchRepository
  ~onSave : (SavedSearch) -> Void
  ~init(savedSearchRepository:initialQuery:initialSearchType:onSave:)
  ~body : some View
  -saveSearch() 
}
class "EditSavedSearchView" as EditSavedSearchView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -query : String
  -searchType : SearchHistoryEntry.SearchType
  -selectedColor : String
  -selectedIcon : String
  -isPinned : Bool
  -showingIconPicker
  -showingColorPicker
  ~search : SavedSearch
  ~savedSearchRepository : any SavedSearchRepository
  ~onSave : (SavedSearch) -> Void
  ~init(search:savedSearchRepository:onSave:)
  ~body : some View
  -updateSearch() 
}
class "IconPickerView" as IconPickerView << (S, SkyBlue) struct >> { 
  -dismiss
  ~selectedIcon : String
  ~columns
  ~body : some View 
}
class "ColorPickerView" as ColorPickerView << (S, SkyBlue) struct >> { 
  -dismiss
  ~selectedColor : String
  ~columns
  ~body : some View 
}
class "FuzzySearchToggle" as FuzzySearchToggle << (S, SkyBlue) struct >> { 
  ~isEnabled : Bool
  ~threshold : Double
  -showingInfo
  ~body : some View 
}
class "FuzzySearchInfoView" as FuzzySearchInfoView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View 
}
class "ExampleRow" as ExampleRow << (S, SkyBlue) struct >> { 
  ~query : String
  ~matches : String
  ~body : some View 
}
class "ToleranceExample" as ToleranceExample << (S, SkyBlue) struct >> { 
  ~threshold : Double
  ~description : String
  ~body : some View 
}
class "CircularProgressView" as CircularProgressView << (S, SkyBlue) struct >> { 
  ~progress : Double
  ~body : some View
  ~colorForProgress : Color 
}
class "TipRow" as TipRow << (S, SkyBlue) struct >> { 
  ~text : String
  ~body : some View 
}
class "BarcodeSearchView" as BarcodeSearchView << (S, SkyBlue) struct >> { 
  -viewModel : BarcodeSearchViewModel
  -dismiss
  -showingScanner
  -selectedItem : Item?
  -manualBarcodeEntry
  -isManualEntryFocused : Bool
  ~init(itemRepository:scannerModule:searchHistoryRepository:)
  ~body : some View
  -searchResultView(_:)
  -noResultsView : some View 
}
class "BarcodeSearchViewModel" as BarcodeSearchViewModel << (C, DarkSeaGreen) >> { 
  ~searchResult : BarcodeSearchResult?
  ~isSearching
  ~hasSearched
  ~lastSearchedBarcode : String?
  -itemRepository : any ItemRepository
  -scannerModule : (any ScannerModuleAPI)?
  -searchHistoryRepository : any SearchHistoryRepository
  ~init(itemRepository:scannerModule:searchHistoryRepository:)
  ~searchByBarcode(_:)
  ~clearSearch()
  ~makeScannerView() 
}
class "BarcodeSearchResult" as BarcodeSearchResult << (S, SkyBlue) struct >> { 
  ~barcode : String
  ~item : Item?
  ~allItems : [Item] 
}
class "SearchHistoryView" as SearchHistoryView << (S, SkyBlue) struct >> { 
  -viewModel : SearchHistoryViewModel
  -dismiss
  -showingClearConfirmation
  ~init(searchHistoryRepository:onSelectEntry:)
  ~body : some View
  -emptyStateView : some View
  -historyContent : some View
  -groupedEntries : [(key: String, entries: [SearchHistoryEntry])]
  -formatSectionDate(_:) 
}
class "SearchHistoryRow" as SearchHistoryRow << (S, SkyBlue) struct >> { 
  ~entry : SearchHistoryEntry
  ~onTap : () -> Void
  ~onDelete : () -> Void
  ~body : some View
  -formatTime(_:) 
}
class "SearchHistoryViewModel" as SearchHistoryViewModel << (C, DarkSeaGreen) >> { 
  ~entries : [SearchHistoryEntry]
  ~isLoading
  -searchHistoryRepository : any SearchHistoryRepository
  -onSelectEntry : (SearchHistoryEntry) -> Void
  ~init(searchHistoryRepository:onSelectEntry:)
  ~loadHistory()
  ~deleteEntry(_:)
  ~clearHistory()
  ~selectEntry(_:) 
}
class "NaturalLanguageSearchView" as NaturalLanguageSearchView << (S, SkyBlue) struct >> { 
  -viewModel : NaturalLanguageSearchViewModel
  -searchQuery
  -showingSuggestions
  -selectedItem : Item?
  -showingSearchHistory
  -showingSavedSearches
  -showingSaveSearch
  -useFuzzySearch
  -fuzzyThreshold
  -isSearchFocused : Bool
  ~init(itemRepository:searchHistoryRepository:savedSearchRepository:locationRepository:categoryRepository:)
  ~body : some View 
}
class "QueryInterpretationView" as QueryInterpretationView << (S, SkyBlue) struct >> { 
  ~interpretation : QueryInterpretation
  ~body : some View 
}
class "InterpretationChip" as InterpretationChip << (S, SkyBlue) struct >> { 
  ~component : QueryComponent
  ~body : some View 
}
class "ExampleQueriesView" as ExampleQueriesView << (S, SkyBlue) struct >> { 
  ~onSelectQuery : (String) -> Void
  ~examples
  ~body : some View 
}
class "ExampleQueryCard" as ExampleQueryCard << (S, SkyBlue) struct >> { 
  ~icon : String
  ~query : String
  ~onTap : () -> Void
  ~body : some View 
}
class "NoResultsView" as NoResultsView << (S, SkyBlue) struct >> { 
  ~query : String
  ~body : some View 
}
class "BulletPoint" as BulletPoint << (S, SkyBlue) struct >> { 
  ~text : String
  ~init(_:)
  ~body : some View 
}
class "SearchResultsList" as SearchResultsList << (S, SkyBlue) struct >> { 
  ~items : [Item]
  ~onSelectItem : (Item) -> Void
  ~body : some View 
}
class "NaturalLanguageSearchViewModel" as NaturalLanguageSearchViewModel << (C, DarkSeaGreen) >> { 
  ~searchResults : [Item]
  ~isSearching
  ~queryInterpretation : QueryInterpretation?
  ~searchHistory : [String]
  ~itemRepository : any ItemRepository
  ~nlSearchService
  ~searchHistoryRepository : any SearchHistoryRepository
  ~savedSearchRepository : any SavedSearchRepository
  ~init(itemRepository:searchHistoryRepository:savedSearchRepository:)
  ~performNaturalLanguageSearch(_:useFuzzySearch:fuzzyThreshold:)
  ~clearSearch()
  ~performSavedSearch(_:useFuzzySearch:fuzzyThreshold:)
  -buildInterpretation(from:)
  -loadSearchHistory()
  -addToSearchHistory(_:) 
}
class "QueryInterpretation" as QueryInterpretation << (S, SkyBlue) struct >> { 
  ~components : [QueryComponent] 
}
class "QueryComponent" as QueryComponent << (S, SkyBlue) struct >> { 
  ~type : ComponentType
  ~value : String
  ~icon : String
  ~color : String 
}
class "ComponentType" as QueryComponent.ComponentType << (E, LightSteelBlue) enum >> { 
  ~color 
}
class "SavedSearchesView" as SavedSearchesView << (S, SkyBlue) struct >> { 
  -viewModel : SavedSearchesViewModel
  -dismiss
  -showingAddSearch
  -editingSearch : SavedSearch?
  -showingDeleteConfirmation
  -searchToDelete : SavedSearch?
  ~init(savedSearchRepository:onSelectSearch:)
  ~body : some View
  -emptyStateView : some View
  -searchesList : some View 
}
class "SavedSearchRow" as SavedSearchRow << (S, SkyBlue) struct >> { 
  ~search : SavedSearch
  ~onTap : () -> Void
  ~onEdit : () -> Void
  ~onDelete : () -> Void
  ~onTogglePin : () -> Void
  ~body : some View 
}
class "SavedSearchesViewModel" as SavedSearchesViewModel << (C, DarkSeaGreen) >> { 
  ~searches : [SavedSearch]
  ~isLoading
  ~pinnedSearches : [SavedSearch]?
  ~otherSearches : [SavedSearch]?
  ~savedSearchRepository : any SavedSearchRepository
  -onSelectSearch : (SavedSearch) -> Void
  ~init(savedSearchRepository:onSelectSearch:)
  ~loadSearches()
  ~deleteSearch(_:)
  ~togglePin(_:)
  ~selectSearch(_:) 
}
class "ItemSearchResultRow" as ItemSearchResultRow << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "StorageUnitDetailView" as StorageUnitDetailView << (S, SkyBlue) struct >> { 
  -viewModel : StorageUnitDetailViewModel
  -showingEditUnit
  -showingAddItems
  -selectedItems : Set<UUID>
  -isEditMode
  +init(unit:storageUnitRepository:itemRepository:locationRepository:)
  +body : some View
  -toggleSelection(for:) 
}
class "ItemRow" as ItemRow16 << (S, SkyBlue) struct >> { 
  ~item : Item
  ~isSelected : Bool
  ~isEditMode : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "CapacityIndicator" as CapacityIndicator << (S, SkyBlue) struct >> { 
  ~current : Int
  ~max : Int
  -percentage : Double
  -color : Color
  ~body : some View 
}
class "StorageUnitDetailViewModel" as StorageUnitDetailViewModel << (C, DarkSeaGreen) >> { 
  ~unit : StorageUnit
  ~items : [Item]
  ~location : Location?
  ~isLoading
  ~errorMessage : String?
  ~storageUnitRepository : any StorageUnitRepository
  ~itemRepository : any ItemRepository
  ~locationRepository : any LocationRepository
  ~init(unit:storageUnitRepository:itemRepository:locationRepository:)
  ~loadLocation()
  ~loadItems()
  ~updateUnit(_:)
  ~removeItems(_:) 
}
class "AddEditStorageUnitView" as AddEditStorageUnitView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -selectedType : StorageUnitType
  -selectedLocationId : UUID?
  -description : String
  -position : String
  -hasCapacity : Bool
  -capacity : String
  -width : String
  -height : String
  -depth : String
  -selectedUnit : MeasurementUnit
  -notes : String
  -isLoading
  -errorMessage : String?
  -locations : [Location]
  ~unit : StorageUnit?
  ~storageUnitRepository : any StorageUnitRepository
  ~locationRepository : any LocationRepository
  ~onComplete : (StorageUnit) -> Void
  -isEditing : Bool
  ~init(unit:storageUnitRepository:locationRepository:selectedLocationId:onComplete:)
  ~body : some View
  -canSave : Bool
  -loadLocations()
  -saveStorageUnit() 
}
class "StorageUnitsListView" as StorageUnitsListView << (S, SkyBlue) struct >> { 
  -viewModel : StorageUnitsListViewModel
  -showingAddUnit
  -selectedUnit : StorageUnit?
  -showingDeleteAlert
  -unitToDelete : StorageUnit?
  -selectedLocation : Location?
  +init(storageUnitRepository:locationRepository:itemRepository:)
  +body : some View 
}
class "StorageUnitRow" as StorageUnitRow << (S, SkyBlue) struct >> { 
  ~unit : StorageUnit
  ~location : Location?
  ~onTap : () -> Void
  ~onEdit : () -> Void
  ~onDelete : () -> Void
  ~body : some View
  -capacityColor(current:max:) 
}
class "StorageUnitsListViewModel" as StorageUnitsListViewModel << (C, DarkSeaGreen) >> { 
  ~storageUnits : [StorageUnit]
  ~filteredUnits : [StorageUnit]
  ~locations : [Location]
  ~searchText
  ~isLoading
  ~errorMessage : String?
  ~storageUnitRepository : any StorageUnitRepository
  ~locationRepository : any LocationRepository
  ~itemRepository : any ItemRepository
  ~init(storageUnitRepository:locationRepository:itemRepository:)
  -cancellables
  -selectedLocationId : UUID?
  ~loadData()
  ~filterByLocation(_:)
  -filterUnits()
  ~deleteUnit(_:) 
}
class "AddItemView" as AddItemView << (S, SkyBlue) struct >> { 
  -viewModel : AddItemViewModel
  -dismiss
  -focusedField : Field?
  ~init(viewModel:)
  ~body : some View 
}
class "Field" as AddItemView.Field << (E, LightSteelBlue) enum >> { 
  ~name 
}
class "AddItemViewModel" as AddItemViewModel << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -locationRepository : any LocationRepository
  -itemTemplateRepository : any ItemTemplateRepository
  -photoRepository : any PhotoRepository
  -barcodeLookupService : any BarcodeLookupService
  -completion : (Item) -> Void
  ~scannerModule : ScannerModuleAPI?
  ~name
  ~brand
  ~model
  ~category : ItemCategory
  ~condition : ItemCondition
  ~quantity
  ~purchasePrice : Decimal?
  ~currentValue : Decimal?
  ~purchaseDate
  ~serialNumber
  ~barcode
  ~selectedLocationId : UUID?
  ~notes
  ~tags : [String]
  ~selectedPhotos : [UIImage]
  ~photoCount : Int
  ~locations : [Location]
  ~templates : [ItemTemplate]
  ~availableTags : [Tag]
  ~showError
  ~errorMessage
  ~showBarcodeScanner
  ~showTemplateSheet
  ~showPhotoOptions
  ~photoSource : PhotoSource?
  ~showPhotoPicker
  ~showCamera
  ~isLookingUpBarcode
  ~showCategorySuggestion
  ~suggestedCategory : ItemCategory
  ~suggestionConfidence : Double
  ~isValid : Bool
  ~init(itemRepository:locationRepository:itemTemplateRepository:photoRepository:barcodeLookupService:completion:)
  -loadLocations()
  -loadTemplates()
  ~applyTemplate(_:)
  ~removePhoto(at:)
  ~saveItem()
  ~makeBarcodeScanner()
  -lookupBarcodeProduct(_:)
  -updateCategoryFromProductCategory(_:)
  -updateCategorySuggestion()
  ~acceptCategorySuggestion() 
}
class "PhotoSource" as AddItemViewModel.PhotoSource << (E, LightSteelBlue) enum >> { 
  ~camera 
}
class "DocumentThumbnailGrid" as DocumentThumbnailGrid << (S, SkyBlue) struct >> { 
  ~documents : [Document]
  ~documentStorage : DocumentStorageProtocol
  ~onSelectDocument : (Document) -> Void
  ~onDeleteDocument : ((Document) -> Void)?
  -thumbnails : [UUID: UIImage]
  -loadingThumbnails : Set<UUID>
  -selectedForPreview : Document?
  -showingQuickLook
  -thumbnailService
  -columns
  ~body : some View
  -loadThumbnail(for:) 
}
class "DocumentThumbnailCard" as DocumentThumbnailCard << (S, SkyBlue) struct >> { 
  ~document : Document
  ~thumbnail : UIImage?
  ~isLoading : Bool
  ~onTap : () -> Void
  ~onSelect : () -> Void
  ~onDelete : (() -> Void)?
  -isPressed
  ~body : some View
  -thumbnailView : some View
  -documentTypeBadge : some View
  -showContextMenu() 
}
class "DocumentQuickLookView" as DocumentQuickLookView << (S, SkyBlue) struct >> { 
  ~document : Document
  ~documentStorage : DocumentStorageProtocol
  ~thumbnailService : ThumbnailService?
  ~onClose : () -> Void
  ~onOpenFull : () -> Void
  -currentPage
  -pageThumbnails : [Int: UIImage]
  -isLoadingPages
  ~body : some View
  -loadPageThumbnails() 
}
class "DocumentPreviewController" as DocumentPreviewController << (S, SkyBlue) struct >> { 
  ~url : URL
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:)
  ~makeCoordinator() 
}
class "Coordinator" as DocumentPreviewController.Coordinator << (C, DarkSeaGreen) >> { 
  ~url : URL?
  ~numberOfPreviewItems(in:)
  ~previewController(_:previewItemAt:) 
}
class "ItemDocumentsView" as ItemDocumentsView << (S, SkyBlue) struct >> { 
  ~itemId : UUID
  -viewModel : ItemDocumentsViewModel
  -selectedDocument : Document?
  -showingDocumentPicker
  -showingPDFViewer
  -pdfURL : URL?
  -showingAddDocument
  -searchText
  ~init(itemId:documentRepository:documentStorage:)
  ~body : some View
  -categoryHeader(_:count:)
  -openPDF(_:)
  -searchBar : some View
  -filteredDocuments(for:) 
}
class "DocumentRow" as DocumentRow << (S, SkyBlue) struct >> { 
  ~document : Document
  ~onTap : () -> Void
  ~onDelete : () -> Void
  ~body : some View
  -iconColor : Color 
}
class "ItemDocumentsViewModel" as ItemDocumentsViewModel << (C, DarkSeaGreen) >> { 
  ~documents : [Document]
  ~documentsByCategory : [Document.DocumentCategory: [Document]]
  ~totalStorageSize : Int64
  ~showingError
  ~errorMessage
  ~itemId : UUID
  ~documentRepository : any DocumentRepository
  ~documentStorage : DocumentStorageProtocol
  -pdfService
  ~init(itemId:documentRepository:documentStorage:)
  ~formattedStorageSize : String
  ~loadDocuments()
  ~addDocuments(from:)
  ~deleteDocument(_:)
  -updateDocumentsByCategory()
  -calculateStorageSize()
  -getMimeType(for:)
  -suggestCategory(for:)
  ~addScannedDocument(pdfData:)
  -showError(_:) 
}
class "DocumentSearchView" as DocumentSearchView << (S, SkyBlue) struct >> { 
  -viewModel : DocumentSearchViewModel
  -searchText
  -showingAdvancedFilters
  -selectedDocument : Document?
  -selectedCategory : Document.DocumentCategory?
  -selectedTags : Set<String>
  -dateRangeEnabled
  -startDate
  -endDate
  -searchFieldFocused : Bool
  ~init(documentRepository:documentStorage:itemRepository:)
  ~body : some View
  -searchBar : some View
  -quickFilters : some View
  -emptyState : some View
  -loadingView : some View
  -noResultsView : some View
  -searchResultsList : some View
  -hasActiveFilters : Bool
  -performSearch()
  -clearAllFilters()
  -formatDateRange() 
}
class "SearchResultRow" as SearchResultRow << (S, SkyBlue) struct >> { 
  ~result : DocumentSearchResult
  ~searchQuery : String
  ~itemName : String?
  ~onTap : () -> Void
  ~body : some View
  -iconColor : Color
  -highlightedSnippet(_:)
  -matchFieldSummary() 
}
class "AdvancedFiltersSheet" as AdvancedFiltersSheet << (S, SkyBlue) struct >> { 
  ~selectedCategory : Document.DocumentCategory?
  ~selectedTags : Set<String>
  ~dateRangeEnabled : Bool
  ~startDate : Date
  ~endDate : Date
  ~availableTags : [String]
  ~onApply : () -> Void
  -dismiss
  ~body : some View 
}
class "DocumentSearchViewModel" as DocumentSearchViewModel << (C, DarkSeaGreen) >> { 
  ~searchResults : [DocumentSearchResult]
  ~isSearching
  ~availableTags : [String]
  ~recentSearches : [String]
  ~documentRepository : any DocumentRepository
  ~documentStorage : DocumentStorageProtocol
  -itemRepository : any ItemRepository
  -searchService : DocumentSearchService
  -items : [Item]
  -searchTask : Task<Void, Never>?
  ~init(documentRepository:documentStorage:itemRepository:)
  ~loadInitialData()
  ~search(with:)
  ~clearSearch()
  ~itemName(for:)
  -addToRecentSearches(_:) 
}
class "CloudSyncView" as CloudSyncView << (S, SkyBlue) struct >> { 
  -viewModel : CloudSyncViewModel
  -showingEncryptionAlert
  -documentToToggleEncryption : CloudDocumentMetadata?
  -showingRetryOptions
  -errorToRetry : CloudSyncError?
  ~init(cloudStorage:documentRepository:documentStorage:)
  ~body : some View
  -iCloudStatusCard : some View
  -storageUsageSection : some View
  -syncSettingsSection : some View
  -syncStatusSection : some View
  -documentsListSection : some View
  -syncErrorsSection : some View
  -storageGradientColor(for:) 
}
class "CloudDocumentRow" as CloudDocumentRow << (S, SkyBlue) struct >> { 
  ~metadata : CloudDocumentMetadata
  ~localDocument : Document?
  ~onToggleEncryption : () -> Void
  ~body : some View
  -documentIcon : String
  -documentColor : Color
  -syncStatusIcon : String
  -syncStatusColor : Color 
}
class "CloudSyncViewModel" as CloudSyncViewModel << (C, DarkSeaGreen) >> { 
  ~iCloudAvailable
  ~storageUsage
  ~automaticSyncEnabled
  ~isSyncing
  ~lastSyncDate : Date?
  ~syncStatusText
  ~syncStatusColor
  ~pendingDocuments
  ~cloudDocuments : [CloudDocumentMetadata]
  ~localDocuments : [Document]
  ~syncErrors : [CloudSyncError]
  -cloudStorage : CloudDocumentStorageProtocol
  -documentRepository : any DocumentRepository
  -documentStorage : DocumentStorageProtocol
  ~init(cloudStorage:documentRepository:documentStorage:)
  ~loadData()
  ~performManualSync()
  ~toggleEncryption(for:)
  ~retrySync(for:)
  ~retryAllFailed()
  ~localDocument(for:)
  -updateSyncStatus() 
}
class "CloudSyncError" as CloudSyncError << (S, SkyBlue) struct >> { 
  ~id
  ~documentId : UUID
  ~documentName : String
  ~errorDescription : String 
}
class "AddDocumentSheet" as AddDocumentSheet << (S, SkyBlue) struct >> { 
  ~documentRepository : any DocumentRepository
  ~documentStorage : DocumentStorageProtocol
  ~itemId : UUID?
  -dismiss
  -documentName
  -category : Document.DocumentCategory
  -subcategory : String?
  -tags : [String]
  -notes
  -showingDocumentPicker
  -showingScanner
  -isProcessing
  -errorMessage : String?
  -pdfService
  ~init(documentRepository:documentStorage:itemId:)
  ~body : some View
  -processSelectedDocument(_:)
  -processScannedDocument(_:)
  -saveDocument(data:fileName:)
  -getMimeType(for:)
  -suggestCategory(for:) 
}
class "ProcessingOverlay" as ProcessingOverlay << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "TagInputField" as TagInputField << (S, SkyBlue) struct >> { 
  ~tags : [String]
  -newTag
  ~body : some View
  -addTag() 
}
class "DocumentsDashboardView" as DocumentsDashboardView << (S, SkyBlue) struct >> { 
  -viewModel : DocumentsDashboardViewModel
  -selectedViewMode : ViewMode
  -searchText
  -selectedDocument : Document?
  -showingAddDocument
  -showingDocumentSearch
  ~init(documentRepository:documentStorage:itemRepository:)
  ~body : some View
  -thumbnailView : some View
  -categoryView : some View
  -itemView : some View
  -recentView : some View
  -allDocumentsView : some View
  -statisticsBar : some View 
}
class "ViewMode" as DocumentsDashboardView.ViewMode << (E, LightSteelBlue) enum >> { 
  ~byCategory
  ~byItem
  ~recent
  ~all
  ~thumbnails
  ~icon : String 
}
class "CategorySection" as CategorySection << (S, SkyBlue) struct >> { 
  ~category : Document.DocumentCategory
  ~documents : [Document]
  ~onSelectDocument : (Document) -> Void
  ~body : some View 
}
class "ItemDocumentSection" as ItemDocumentSection << (S, SkyBlue) struct >> { 
  ~item : Item
  ~documents : [Document]
  ~onSelectDocument : (Document) -> Void
  ~body : some View 
}
class "DocumentListRow" as DocumentListRow << (S, SkyBlue) struct >> { 
  ~document : Document
  ~showItemName : Bool
  ~itemName : String?
  ~onTap : () -> Void
  -syncStatus : SyncStatus
  ~body : some View
  -syncStatusIcon : String
  -updateSyncStatus() 
}
class "StatisticItem" as StatisticItem << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~body : some View 
}
class "DocumentsDashboardViewModel" as DocumentsDashboardViewModel << (C, DarkSeaGreen) >> { 
  ~documents : [Document]
  ~items : [Item]
  ~documentRepository : any DocumentRepository
  ~documentStorage : DocumentStorageProtocol
  ~itemRepository : any ItemRepository
  ~init(documentRepository:documentStorage:itemRepository:)
  ~loadDocuments()
  ~filteredDocuments(searchText:)
  ~recentDocuments(searchText:)
  ~documentsForItem(_:)
  ~itemsWithDocuments : [Item]
  ~itemName(for:)
  ~totalStorageSize : String
  ~deleteDocument(_:) 
}
class "DocumentGridCard" as DocumentGridCard << (S, SkyBlue) struct >> { 
  ~document : Document
  ~body : some View 
}
class "CSVExportView" as CSVExportView << (S, SkyBlue) struct >> { 
  -dismiss
  -viewModel : CSVExportViewModel
  -selectedTemplate
  -showingFieldSelector
  -showingShareSheet
  ~init(itemRepository:locationRepository:items:)
  ~body : some View
  -exportScopeSection : some View
  -templateSection : some View
  -configurationSection : some View
  -previewSection : some View 
}
class "FieldSelectorView" as FieldSelectorView << (S, SkyBlue) struct >> { 
  ~configuration : Core.CSVExportConfiguration
  -dismiss
  -selectedFields : Set<Core.CSVExportField>
  -includeAll : Bool
  ~init(configuration:)
  ~body : some View 
}
class "CSVFileDocument" as CSVFileDocument << (S, SkyBlue) struct >> { 
  ~result : Core.CSVExportResult
  ~{static} transferRepresentation : some TransferRepresentation 
}
class "CSVExportShareSheet" as CSVExportShareSheet << (S, SkyBlue) struct >> { 
  ~items : [Any]
  ~makeUIViewController(context:)
  ~updateUIViewController(_:context:) 
}
class "CSVExportViewModel" as CSVExportViewModel << (C, DarkSeaGreen) >> { 
  ~configuration
  ~isExporting
  ~isGeneratingPreview
  ~exportResult : Core.CSVExportResult?
  ~previewText
  ~showingError
  ~errorMessage
  ~exportService : Core.CSVExportService
  ~items : [Item]?
  ~exportScopeText : String
  ~init(exportService:items:)
  ~exportCSV()
  ~generatePreview()
  ~updateDelimiter(_:)
  ~updateIncludeHeaders(_:)
  ~updateDateFormat(_:)
  ~updateSortBy(_:)
  ~updateSortAscending(_:) 
}
class "ColumnMappingView" as ColumnMappingView << (S, SkyBlue) struct >> { 
  ~preview : Core.CSVPreviewData
  ~configuration : Core.CSVImportConfiguration
  ~onComplete : () -> Void
  -selectedMappings : [Core.CSVExportField: Int]
  -dismiss
  -fields : [(Core.CSVExportField, Bool)]
  ~body : some View
  -binding(for:)
  -sampleData(for:)
  -isValid : Bool
  -loadCurrentMappings()
  -applyMappings()
  -autoDetectMappings() 
}
class "MappingRow" as MappingRow << (S, SkyBlue) struct >> { 
  ~field : Core.CSVExportField
  ~isRequired : Bool
  ~columns : [String]
  ~selectedColumn : Int?
  ~sampleData : String?
  ~body : some View
  -iconForField(_:) 
}
class "CSVImportView" as CSVImportView << (S, SkyBlue) struct >> { 
  -dismiss
  -viewModel : CSVImportViewModel
  -showingFilePicker
  -selectedTemplate : Core.CSVImportTemplate?
  -showingMappingView
  ~init(itemRepository:locationRepository:onImportComplete:)
  ~body : some View
  -fileSelectionView : some View
  -previewView : some View
  -handleFileSelection(_:) 
}
class "TemplateCard" as TemplateCard << (S, SkyBlue) struct >> { 
  ~template : Core.CSVImportTemplate
  ~onTap : () -> Void
  ~onDownload : () -> Void
  ~body : some View 
}
class "InstructionRow" as InstructionRow << (S, SkyBlue) struct >> { 
  ~number : String
  ~text : String
  ~body : some View 
}
class "TemplateDetailView" as TemplateDetailView << (S, SkyBlue) struct >> { 
  ~template : Core.CSVImportTemplate
  -dismiss
  ~body : some View 
}
class "ConfigRow" as ConfigRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "CSVImportViewModel" as CSVImportViewModel << (C, DarkSeaGreen) >> { 
  ~csvData : Data?
  ~fileName
  ~configuration
  ~previewData : Core.CSVPreviewData?
  ~isLoadingPreview
  ~isImporting
  ~importProgress : Double
  ~importResult : Core.CSVImportResult?
  ~showingResult
  ~showingError
  ~errorMessage
  -importService : Core.CSVImportService
  -onImportComplete : (Core.CSVImportResult) -> Void
  ~init(importService:onImportComplete:)
  ~loadCSVFile(from:)
  ~clearFile()
  ~loadPreview()
  ~importCSV()
  ~downloadTemplate(_:) 
}
class "AddItemsToCollectionView" as AddItemsToCollectionView << (S, SkyBlue) struct >> { 
  -dismiss
  -viewModel : AddItemsToCollectionViewModel
  -searchText
  -selectedCategory : ItemCategory?
  ~init(collection:collectionRepository:itemRepository:onComplete:)
  ~filteredItems : [Item]
  ~body : some View
  -searchAndFilterSection : some View
  -categoryFilterChips : some View
  -emptyStateView : some View
  -itemsList : some View
  -loadingOverlay : some View
  -toolbarContent : some ToolbarContent 
}
class "ItemSelectionRow" as ItemSelectionRow << (S, SkyBlue) struct >> { 
  ~item : Item
  ~isSelected : Bool
  ~onToggle : () -> Void
  ~body : some View 
}
class "AddItemsToCollectionViewModel" as AddItemsToCollectionViewModel << (C, DarkSeaGreen) >> { 
  ~availableItems : [Item]
  ~selectedItemIds : Set<UUID>
  ~isLoading
  ~errorMessage : String?
  ~collection : Collection
  ~collectionRepository : any CollectionRepository
  ~itemRepository : any ItemRepository
  ~onComplete : () -> Void
  ~init(collection:collectionRepository:itemRepository:onComplete:)
  -loadAvailableItems()
  ~toggleItem(_:)
  ~addSelectedItems() 
}
class "CategoryChipView" as CategoryChipView << (S, SkyBlue) struct >> { 
  ~title : String
  ~icon : String
  ~count : Int
  ~isSelected : Bool
  ~action : () -> Void
  ~body : some View 
}
class "AddEditCollectionView" as AddEditCollectionView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -description : String
  -selectedIcon : String
  -selectedColor : String
  -isLoading
  -errorMessage : String?
  ~collection : Collection?
  ~collectionRepository : any CollectionRepository
  ~onComplete : (Collection) -> Void
  -isEditing : Bool
  ~availableIcons
  ~availableColors
  ~init(collection:collectionRepository:onComplete:)
  ~body : some View
  -saveCollection() 
}
class "CollectionsListView" as CollectionsListView << (S, SkyBlue) struct >> { 
  -viewModel : CollectionsListViewModel
  -showingAddCollection
  -selectedCollection : Collection?
  -showingDeleteAlert
  -collectionToDelete : Collection?
  +init(collectionRepository:itemRepository:onSelectCollection:)
  +body : some View 
}
class "CollectionRow" as CollectionRow << (S, SkyBlue) struct >> { 
  ~collection : Collection
  ~itemCount : Int
  ~isArchived : Bool
  ~onTap : () -> Void
  ~onEdit : (() -> Void)?
  ~onArchive : (() -> Void)?
  ~onUnarchive : (() -> Void)?
  ~onDelete : (() -> Void)?
  ~body : some View 
}
class "CollectionsListViewModel" as CollectionsListViewModel << (C, DarkSeaGreen) >> { 
  ~activeCollections : [Collection]
  ~archivedCollections : [Collection]
  ~itemCounts : [UUID: Int]
  ~isLoading
  ~errorMessage : String?
  ~collectionRepository : any CollectionRepository
  ~itemRepository : any ItemRepository
  ~onSelectCollection : (Collection) -> Void
  ~init(collectionRepository:itemRepository:onSelectCollection:)
  ~loadCollections()
  ~selectCollection(_:)
  ~archiveCollection(_:)
  ~unarchiveCollection(_:)
  ~deleteCollection(_:) 
}
class "CollectionDetailView" as CollectionDetailView << (S, SkyBlue) struct >> { 
  -viewModel : CollectionDetailViewModel
  -showingAddItems
  -showingEditCollection
  -selectedItems : Set<UUID>
  -isEditMode
  +init(collection:collectionRepository:itemRepository:onSelectItem:)
  +body : some View
  -toggleSelection(for:) 
}
class "ItemRow" as ItemRow17 << (S, SkyBlue) struct >> { 
  ~item : Item
  ~isSelected : Bool
  ~isEditMode : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "CollectionDetailViewModel" as CollectionDetailViewModel << (C, DarkSeaGreen) >> { 
  ~collection : Collection
  ~items : [Item]
  ~isLoading
  ~errorMessage : String?
  ~collectionRepository : any CollectionRepository
  ~itemRepository : any ItemRepository
  ~onSelectItem : (Item) -> Void
  ~totalValue : Decimal
  ~init(collection:collectionRepository:itemRepository:onSelectItem:)
  ~loadItems()
  ~selectItem(_:)
  ~updateCollection(_:)
  ~archiveCollection()
  ~unarchiveCollection()
  ~removeItems(_:) 
}
class "TimeBasedAnalyticsView" as TimeBasedAnalyticsView << (S, SkyBlue) struct >> { 
  -viewModel : TimeBasedAnalyticsViewModel
  -selectedPeriod : Core.AnalyticsPeriod
  -showingDatePicker
  -customStartDate
  -selectedTab
  ~init(itemRepository:)
  ~body : some View 
}
class "PeriodSelector" as PeriodSelector << (S, SkyBlue) struct >> { 
  ~selectedPeriod : Core.AnalyticsPeriod
  ~showingDatePicker : Bool
  ~body : some View 
}
class "MetricsOverviewCard" as MetricsOverviewCard << (S, SkyBlue) struct >> { 
  ~metrics : Core.TimeMetrics
  ~comparison : Core.PeriodComparison?
  ~body : some View 
}
class "ComparisonBadge" as ComparisonBadge << (S, SkyBlue) struct >> { 
  ~change : Decimal
  ~percentage : Double
  ~trend : Core.TrendDirection
  ~body : some View 
}
class "MetricCard" as MetricCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~subtitle : String?
  ~icon : String
  ~color : Color
  ~comparison : Int?
  ~body : some View 
}
class "SpendingTrendsChart" as SpendingTrendsChart << (S, SkyBlue) struct >> { 
  ~trends : [Core.TrendData]
  ~period : Core.AnalyticsPeriod
  ~body : some View
  ~formatAxisLabel(date:period:) 
}
class "TrendSummaryRow" as TrendSummaryRow << (S, SkyBlue) struct >> { 
  ~first : Core.TrendData
  ~last : Core.TrendData
  ~body : some View 
}
class "CategoryBreakdownChart" as CategoryBreakdownChart << (S, SkyBlue) struct >> { 
  ~categories : [Core.CategoryTimeMetric]
  ~body : some View 
}
class "CategoryTimeRow" as CategoryTimeRow << (S, SkyBlue) struct >> { 
  ~category : Core.CategoryTimeMetric
  ~body : some View 
}
class "StoreBreakdownChart" as StoreBreakdownChart << (S, SkyBlue) struct >> { 
  ~stores : [Core.StoreTimeMetric]
  ~body : some View 
}
class "StoreTimeBar" as StoreTimeBar << (S, SkyBlue) struct >> { 
  ~store : Core.StoreTimeMetric
  ~maxValue : Decimal
  ~body : some View 
}
class "InsightsSection" as InsightsSection << (S, SkyBlue) struct >> { 
  ~insights : [Core.TimeInsight]
  ~body : some View 
}
class "InsightCard" as InsightCard << (S, SkyBlue) struct >> { 
  ~insight : Core.TimeInsight
  ~body : some View 
}
class "AcquisitionRateCard" as AcquisitionRateCard << (S, SkyBlue) struct >> { 
  ~analysis : Core.AcquisitionAnalysis
  ~body : some View 
}
class "SeasonalPatternsView" as SeasonalPatternsView << (S, SkyBlue) struct >> { 
  ~patterns : [Core.SeasonalPattern]
  ~body : some View 
}
class "SeasonCard" as SeasonCard << (S, SkyBlue) struct >> { 
  ~pattern : Core.SeasonalPattern
  ~body : some View
  ~seasonColor(_:) 
}
class "SpendingHeatmapView" as SpendingHeatmapView << (S, SkyBlue) struct >> { 
  ~heatmapData : [[Double]]
  ~year : Int
  ~body : some View
  ~monthName(_:)
  ~maxHeatmapValue() 
}
class "HeatmapCell" as HeatmapCell << (S, SkyBlue) struct >> { 
  ~value : Double
  ~maxValue : Double
  ~body : some View
  ~cellColor : Color 
}
class "DatePickerSheet" as DatePickerSheet << (S, SkyBlue) struct >> { 
  ~date : Date
  ~onSelect : () -> Void
  -dismiss
  ~body : some View 
}
class "TimeBasedAnalyticsViewModel" as TimeBasedAnalyticsViewModel << (C, DarkSeaGreen) >> { 
  ~currentAnalytics : Core.TimeBasedAnalytics?
  ~monthlyTrends : [Core.TrendData]
  ~yearlyTrends : [Core.TrendData]
  ~seasonalPatterns : [Core.SeasonalPattern]
  ~spendingHeatmap : [[Double]]
  ~acquisitionAnalysis : Core.AcquisitionAnalysis?
  ~isLoading
  -analyticsService : Core.TimeBasedAnalyticsService
  ~init(itemRepository:)
  ~loadAnalytics(for:startDate:)
  ~loadSeasonalPatterns()
  ~exportData() 
}
class "DepreciationReportView" as DepreciationReportView << (S, SkyBlue) struct >> { 
  -viewModel : DepreciationReportViewModel
  -selectedMethod : Core.DepreciationMethod
  -selectedCategories : Set<Core.ItemCategory>
  -showingFilters
  -showingItemDetail
  -selectedItem : Core.DepreciatingItem?
  -selectedTab
  ~init(itemRepository:)
  ~body : some View
  -summaryCard : some View
  -methodSelector : some View
  -overviewSection(report:)
  -categoryBreakdownSection : some View
  -itemsListSection(report:)
  -scheduleSection(schedule:) 
}
class "DepreciationGauge" as DepreciationGauge << (S, SkyBlue) struct >> { 
  ~originalValue : Decimal
  ~currentValue : Decimal
  -percentage : Double
  ~body : some View 
}
class "MetricBox" as MetricBox << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "ValueOverTimeChart" as ValueOverTimeChart << (S, SkyBlue) struct >> { 
  ~items : [Core.DepreciatingItem]
  ~body : some View 
}
class "TopDepreciatingItemsCard" as TopDepreciatingItemsCard << (S, SkyBlue) struct >> { 
  ~items : [Core.DepreciatingItem]
  ~body : some View 
}
class "CategoryDepreciationCard" as CategoryDepreciationCard << (S, SkyBlue) struct >> { 
  ~category : Core.ItemCategory
  ~summary : Core.CategoryDepreciationSummary
  ~body : some View 
}
class "ItemDepreciationRow" as ItemDepreciationRow << (S, SkyBlue) struct >> { 
  ~item : Core.DepreciatingItem
  ~body : some View 
}
class "DepreciationScheduleChart" as DepreciationScheduleChart << (S, SkyBlue) struct >> { 
  ~schedule : Core.DepreciationSchedule
  ~body : some View 
}
class "DepreciationScheduleTable" as DepreciationScheduleTable << (S, SkyBlue) struct >> { 
  ~schedule : Core.DepreciationSchedule
  ~body : some View 
}
class "ItemDepreciationDetailView" as ItemDepreciationDetailView << (S, SkyBlue) struct >> { 
  ~item : Core.DepreciatingItem
  ~onScheduleRequest : (UUID) -> Void
  -dismiss
  ~body : some View 
}
class "ValueRow" as ValueRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~valueColor : Color
  ~body : some View 
}
class "CategoryFilterSheet" as CategoryFilterSheet << (S, SkyBlue) struct >> { 
  ~selectedCategories : Set<Core.ItemCategory>
  ~onApply : () -> Void
  -dismiss
  ~body : some View 
}
class "DepreciationReportViewModel" as DepreciationReportViewModel << (C, DarkSeaGreen) >> { 
  ~currentReport : Core.DepreciationReport?
  ~categoryBreakdown : [Core.ItemCategory: Core.CategoryDepreciationSummary]
  ~selectedItemSchedule : Core.DepreciationSchedule?
  ~isLoading
  -depreciationService : Core.DepreciationService
  -itemRepository : any ItemRepository
  ~init(itemRepository:)
  ~generateReport(method:categories:)
  ~loadScheduleForItem(itemId:)
  ~refreshReport()
  ~exportReport() 
}
class "CategoryAnalyticsView" as CategoryAnalyticsView << (S, SkyBlue) struct >> { 
  -viewModel : CategoryAnalyticsViewModel
  -selectedTimeRange : SpendingDashboardView.TimeRange
  -selectedCategory : ItemCategory?
  -showingCategoryDetail
  -chartType : ChartType
  ~init(viewModel:)
  ~body : some View
  -timeRangePicker : some View
  -chartTypePicker : some View
  -mainChartCard : some View
  -pieChart : some View
  -barChart : some View
  -trendChart : some View
  -categoryListCard : some View
  -insightsCard : some View 
}
class "ChartType" as CategoryAnalyticsView.ChartType << (E, LightSteelBlue) enum >> { 
  ~pie
  ~bar
  ~trend
  ~icon : String 
}
class "CategoryListRow" as CategoryListRow << (S, SkyBlue) struct >> { 
  ~data : CategorySpendingData
  ~totalSpent : Decimal
  ~rank : Int
  ~action : () -> Void
  -percentage : Double
  ~body : some View 
}
class "InsightRow" as InsightRow << (S, SkyBlue) struct >> { 
  ~icon : String
  ~title : String
  ~value : String
  ~subtitle : String
  ~color : Color
  ~body : some View 
}
class "EmptyChartView" as EmptyChartView << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "CategoryDetailView" as CategoryDetailView << (S, SkyBlue) struct >> { 
  ~category : ItemCategory
  ~timeRange : SpendingDashboardView.TimeRange
  ~viewModel : CategoryAnalyticsViewModel
  -dismiss
  ~body : some View
  -categoryStatsCard : some View
  -monthlyTrendCard : some View
  -itemsListCard : some View 
}
class "StatBox" as StatBox << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "PurchasePatternsView" as PurchasePatternsView << (S, SkyBlue) struct >> { 
  -viewModel : PurchasePatternsViewModel
  -selectedPatternType
  -showingPatternDetail
  -selectedPattern : Core.PatternType?
  -timeRange
  ~init(itemRepository:)
  ~body : some View
  -timeRangeSelector : some View
  -patternSummaryCard(pattern:)
  -patternTypeFilter : some View
  -insightsSection(insights:)
  -recommendationsSection(recommendations:)
  -patternDetailsSection(patterns:)
  -filteredPatterns(_:)
  -formatPeriod(_:) 
}
class "SummaryMetric" as SummaryMetric << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "PatternInsightCard" as PatternInsightCard << (S, SkyBlue) struct >> { 
  ~insight : Core.PatternInsight
  ~body : some View 
}
class "RecommendationCard" as RecommendationCard << (S, SkyBlue) struct >> { 
  ~recommendation : Core.PatternRecommendation
  ~body : some View
  ~iconForType(_:) 
}
class "PatternCard" as PatternCard << (S, SkyBlue) struct >> { 
  ~pattern : Core.PatternType
  ~body : some View
  ~patternIcon : String
  ~patternColor : Color
  ~patternTitle : String
  ~patternDescription : String 
}
class "PatternDetailView" as PatternDetailView << (S, SkyBlue) struct >> { 
  ~pattern : Core.PatternType
  -dismiss
  ~body : some View 
}
class "RecurringPatternDetail" as RecurringPatternDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.RecurringPattern
  ~body : some View 
}
class "SeasonalPatternDetail" as SeasonalPatternDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.SeasonalBuyingPattern
  ~body : some View 
}
class "DetailRow" as DetailRow18 << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "PurchasePatternsViewModel" as PurchasePatternsViewModel << (C, DarkSeaGreen) >> { 
  ~currentPattern : Core.PurchasePattern?
  ~isLoading
  -patternService : Core.PurchasePatternService
  ~init(itemRepository:)
  ~analyzePatterns(days:)
  ~refreshPatterns() 
}
class "CategoryPreferenceDetail" as CategoryPreferenceDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.CategoryPreference
  ~body : some View 
}
class "BrandLoyaltyDetail" as BrandLoyaltyDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.BrandLoyalty
  ~body : some View 
}
class "PriceRangeDetail" as PriceRangeDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.PriceRangePattern
  ~body : some View 
}
class "ShoppingTimeDetail" as ShoppingTimeDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.ShoppingTimePattern
  ~body : some View 
}
class "RetailerPreferenceDetail" as RetailerPreferenceDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.RetailerPreference
  ~body : some View 
}
class "BulkBuyingDetail" as BulkBuyingDetail << (S, SkyBlue) struct >> { 
  ~pattern : Core.BulkBuyingPattern
  ~body : some View 
}
class "RetailerAnalyticsView" as RetailerAnalyticsView << (S, SkyBlue) struct >> { 
  -viewModel : RetailerAnalyticsViewModel
  -selectedMetric : Core.RankingMetric
  -selectedStore : Core.RetailerAnalytics?
  -showingStoreDetail
  -selectedTimeRange
  ~init(itemRepository:receiptRepository:)
  ~body : some View 
}
class "InsightsSummaryCard" as InsightsSummaryCard << (S, SkyBlue) struct >> { 
  ~insights : Core.RetailerInsights
  ~body : some View 
}
class "InsightItem" as InsightItem << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "TimeRange" as TimeRange << (E, LightSteelBlue) enum >> { 
  ~lastMonth
  ~last3Months
  ~last6Months
  ~lastYear
  ~allTime
  ~dateInterval : DateInterval? 
}
class "TimeRangePicker" as TimeRangePicker << (S, SkyBlue) struct >> { 
  ~selection : TimeRange
  ~body : some View 
}
class "TopStoresChart" as TopStoresChart << (S, SkyBlue) struct >> { 
  ~analytics : [Core.RetailerAnalytics]
  ~onSelectStore : (String) -> Void
  ~body : some View 
}
class "MetricChip" as MetricChip << (S, SkyBlue) struct >> { 
  ~metric : Core.RankingMetric
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "RankingsList" as RankingsList << (S, SkyBlue) struct >> { 
  ~rankings : [Core.StoreRanking]
  ~body : some View
  ~rankColor(for:)
  ~formattedValue(_:metric:) 
}
class "CategoryLeadersSection" as CategoryLeadersSection << (S, SkyBlue) struct >> { 
  ~leaders : [Core.CategoryLeader]
  ~body : some View 
}
class "CategoryLeaderCard" as CategoryLeaderCard << (S, SkyBlue) struct >> { 
  ~leader : Core.CategoryLeader
  ~body : some View 
}
class "SpendingComparisonChart" as SpendingComparisonChart << (S, SkyBlue) struct >> { 
  ~comparison : [(store: String, amount: Decimal, percentage: Double)]
  ~body : some View
  ~barColor(for:) 
}
class "SpendingBar" as SpendingBar << (S, SkyBlue) struct >> { 
  ~store : String
  ~amount : Decimal
  ~percentage : Double
  ~color : Color
  ~body : some View 
}
class "RetailerAnalyticsViewModel" as RetailerAnalyticsViewModel << (C, DarkSeaGreen) >> { 
  ~analytics : [Core.RetailerAnalytics]
  ~insights : Core.RetailerInsights?
  ~rankings : [Core.StoreRanking]
  ~spendingComparison : [(store: String, amount: Decimal, percentage: Double)]
  ~isLoading
  ~itemRepository : any ItemRepository
  -analyticsService : Core.RetailerAnalyticsService
  ~init(itemRepository:receiptRepository:)
  ~loadAnalytics()
  ~loadRankings(for:) 
}
class "PortfolioValueView" as PortfolioValueView << (S, SkyBlue) struct >> { 
  -viewModel : PortfolioValueViewModel
  -selectedTimeRange : TimeRange
  -showingBreakdown
  -selectedDataPoint : PortfolioDataPoint?
  ~init(viewModel:)
  ~body : some View
  -currentValueCard : some View
  -timeRangePicker : some View
  -valueChartCard : some View
  -statisticsCard : some View
  -categoryBreakdownCard : some View
  -mostValuableItemsCard : some View
  -depreciationCard : some View
  -colorForCategory(_:) 
}
class "TimeRange" as PortfolioValueView.TimeRange << (E, LightSteelBlue) enum >> { 
  ~month
  ~quarter
  ~halfYear
  ~year
  ~all
  ~displayName : String 
}
class "ValueMetric" as ValueMetric << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~body : some View 
}
class "StatRow" as StatRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~date : Date?
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "DepreciationRow" as DepreciationRow << (S, SkyBlue) struct >> { 
  ~category : String
  ~rate : String
  ~annualLoss : String
  ~icon : String
  ~body : some View 
}
class "PortfolioBreakdownView" as PortfolioBreakdownView << (S, SkyBlue) struct >> { 
  ~viewModel : PortfolioValueViewModel
  -dismiss
  ~body : some View 
}
class "StoreDetailView" as StoreDetailView << (S, SkyBlue) struct >> { 
  ~analytics : Core.RetailerAnalytics
  ~itemRepository : any ItemRepository
  -items : [Item]
  -selectedCategory : ItemCategory?
  -isLoadingItems
  -dismiss
  ~body : some View
  -loadStoreItems() 
}
class "StoreHeaderCard" as StoreHeaderCard << (S, SkyBlue) struct >> { 
  ~analytics : Core.RetailerAnalytics
  ~body : some View
  ~daysSince(_:) 
}
class "MetricBadge" as MetricBadge << (S, SkyBlue) struct >> { 
  ~value : String
  ~label : String
  ~icon : String
  ~body : some View 
}
class "PurchaseFrequencyCard" as PurchaseFrequencyCard << (S, SkyBlue) struct >> { 
  ~frequency : Core.PurchaseFrequency
  ~body : some View
  ~frequencyDescription : String 
}
class "MonthlySpendingChart" as MonthlySpendingChart << (S, SkyBlue) struct >> { 
  ~monthlyData : [Core.MonthlySpending]
  ~body : some View 
}
class "CategoryBreakdownSection" as CategoryBreakdownSection << (S, SkyBlue) struct >> { 
  ~categories : [Core.CategorySpending]
  ~selectedCategory : ItemCategory?
  ~body : some View 
}
class "StoreCategoryRow" as StoreCategoryRow << (S, SkyBlue) struct >> { 
  ~category : Core.CategorySpending
  ~isSelected : Bool
  ~onTap : () -> Void
  ~body : some View 
}
class "RecentItemsSection" as RecentItemsSection << (S, SkyBlue) struct >> { 
  ~items : [Item]
  ~storeName : String
  ~body : some View 
}
class "RecentItemCard" as RecentItemCard << (S, SkyBlue) struct >> { 
  ~item : Item
  ~body : some View 
}
class "StoreStatsGrid" as StoreStatsGrid << (S, SkyBlue) struct >> { 
  ~analytics : Core.RetailerAnalytics
  ~body : some View 
}
class "StatCard" as StatCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "SpendingDashboardView" as SpendingDashboardView << (S, SkyBlue) struct >> { 
  -viewModel : SpendingDashboardViewModel
  -selectedTimeRange : TimeRange
  -showingCategoryDetail
  -selectedCategory : ItemCategory?
  ~init(viewModel:)
  ~body : some View
  -timeRangePicker : some View
  -totalSpendingCard : some View
  -spendingChartCard : some View
  -categoryBreakdownCard : some View
  -recentPurchasesCard : some View
  -topRetailersCard : some View
  -portfolioValueLink : some View
  -timeAnalysisLink : some View
  -depreciationReportLink : some View
  -purchasePatternsLink : some View
  -budgetTrackingLink : some View
  -warrantyDashboardLink : some View 
}
class "TimeRange" as SpendingDashboardView.TimeRange << (E, LightSteelBlue) enum >> { 
  ~week
  ~month
  ~quarter
  ~year
  ~all
  ~displayName : String 
}
class "StatItem" as StatItem19 << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~icon : String
  ~body : some View 
}
class "CategoryRow" as CategoryRow20 << (S, SkyBlue) struct >> { 
  ~data : CategorySpendingData
  ~totalSpent : Decimal
  ~action : () -> Void
  -percentage : Double
  ~body : some View 
}
class "CategorySpendingDetailView" as CategorySpendingDetailView << (S, SkyBlue) struct >> { 
  ~category : ItemCategory
  ~timeRange : SpendingDashboardView.TimeRange
  ~items : [Item]
  -dismiss
  ~body : some View 
}
class "WarrantyNotificationsView" as WarrantyNotificationsView << (S, SkyBlue) struct >> { 
  -viewModel : WarrantyNotificationsViewModel
  -showingAddCustomDays
  -customDays
  -showingPermissionDenied
  ~init(warrantyRepository:itemRepository:)
  ~body : some View 
}
class "WarrantyExpirationRow" as WarrantyExpirationRow << (S, SkyBlue) struct >> { 
  ~warranty : Warranty
  ~item : Item?
  ~isExpired : Bool
  -daysRemaining : Int
  -urgencyColor : Color
  ~body : some View 
}
class "WarrantyNotificationsViewModel" as WarrantyNotificationsViewModel << (C, DarkSeaGreen) >> { 
  ~notificationsEnabled
  ~notificationDays : [Int]
  ~upcomingExpirations : [Warranty]
  ~expiredWarranties : [Warranty]
  ~items : [UUID: Item]
  ~permissionDenied
  -warrantyRepository : any WarrantyRepository
  -itemRepository : any ItemRepository
  -notificationService
  ~init(warrantyRepository:itemRepository:)
  -setupBindings()
  -cancellables
  ~loadData()
  ~enableNotifications()
  ~addNotificationDay(_:)
  ~removeNotificationDay(_:)
  -rescheduleAllNotifications() 
}
class "AddEditWarrantyView" as AddEditWarrantyView << (S, SkyBlue) struct >> { 
  -viewModel : AddEditWarrantyViewModel
  -dismiss
  -focusedField : Field?
  ~init(viewModel:)
  ~body : some View
  -itemSection : some View
  -warrantyDetailsSection : some View
  -coveragePeriodSection : some View
  -contactSection : some View
  -additionalDetailsSection : some View
  -durationText(for:) 
}
class "Field" as AddEditWarrantyView.Field << (E, LightSteelBlue) enum >> { 
  ~provider 
}
class "AddEditWarrantyViewModel" as AddEditWarrantyViewModel << (C, DarkSeaGreen) >> { 
  -warrantyRepository : any WarrantyRepository
  -itemRepository : any ItemRepository
  -completion : (Warranty) -> Void
  ~warranty : Warranty?
  ~selectedItemId : UUID?
  ~provider
  ~type : WarrantyType
  ~startDate
  ~endDate
  ~coverageDetails
  ~registrationNumber
  ~phoneNumber
  ~email
  ~website
  ~notes
  ~isExtended
  ~cost : Decimal?
  ~items : [Item]
  ~showError
  ~errorMessage
  ~isValid : Bool
  ~init(warranty:itemId:warrantyRepository:itemRepository:completion:)
  -loadItems()
  ~selectProvider(_:)
  ~setDuration(days:)
  ~save() 
}
class "WarrantyDetailView" as WarrantyDetailView << (S, SkyBlue) struct >> { 
  ~warranty : Warranty
  ~itemRepository : any ItemRepository
  ~warrantyRepository : any WarrantyRepository
  -item : Item?
  -showingEditWarranty
  -showingDeleteAlert
  -showingContactOptions
  -dismiss
  ~body : some View
  -statusCard : some View
  -coverageDetailsCard : some View
  -contactCard : some View
  -documentsCard : some View
  -additionalInfoCard : some View
  -deleteButton : some View
  -statusColor : Color
  -loadItem()
  -deleteWarranty() 
}
class "InfoRow" as WarrantyDetailView.InfoRow << (S, SkyBlue) struct >> { 
  ~label : String
  ~value : String
  ~body : some View 
}
class "WarrantyDashboardView" as WarrantyDashboardView << (S, SkyBlue) struct >> { 
  -viewModel : WarrantyDashboardViewModel
  -selectedTimeframe
  -showingNotificationSettings
  ~init(warrantyRepository:itemRepository:)
  ~body : some View
  -summarySection : some View
  -expirationChartSection : some View
  -statusBreakdownSection : some View
  -upcomingExpirationsSection : some View
  -categoryBreakdownSection : some View
  -categoryColor(for:) 
}
class "SummaryCard" as SummaryCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "StatusRow" as StatusRow << (S, SkyBlue) struct >> { 
  ~status : String
  ~count : Int
  ~total : Int
  ~color : Color
  -percentage : Double
  ~body : some View 
}
class "UpcomingExpirationRow" as UpcomingExpirationRow << (S, SkyBlue) struct >> { 
  ~warranty : Warranty
  ~item : Item
  -daysRemaining : Int
  ~body : some View 
}
class "WarrantyDashboardViewModel" as WarrantyDashboardViewModel << (C, DarkSeaGreen) >> { 
  ~activeCount
  ~expiringSoonCount
  ~expiredCount
  ~totalCount
  ~totalValue : Decimal
  ~upcomingExpirations : [Warranty]
  ~expirationData : [ExpirationData]
  ~categoryData : [CategoryData]
  ~items : [UUID: Item]
  ~warrantyRepository : any WarrantyRepository
  ~itemRepository : any ItemRepository
  ~init(warrantyRepository:itemRepository:)
  ~loadData(timeframe:)
  -generateExpirationData(warranties:timeframe:)
  -generateCategoryData(warranties:items:) 
}
class "ExpirationData" as ExpirationData << (S, SkyBlue) struct >> { 
  ~id
  ~month : Date
  ~count : Int
  ~isExpired : Bool 
}
class "CategoryData" as CategoryData << (S, SkyBlue) struct >> { 
  ~id
  ~category : String
  ~count : Int 
}
class "TimeFrame" as TimeFrame << (E, LightSteelBlue) enum >> { 
  ~thisMonth
  ~thisQuarter
  ~thisYear
  ~id : String 
}
class "WarrantyListView" as WarrantyListView << (S, SkyBlue) struct >> { 
  -viewModel : WarrantyListViewModel
  -selectedFilter : WarrantyFilter
  -selectedWarranty : Warranty?
  -showingAddWarranty
  +init(itemRepository:warrantyRepository:)
  +body : some View
  -filterChips : some View
  -warrantyList : some View
  -emptyState : some View 
}
class "WarrantyRowView" as WarrantyRowView << (S, SkyBlue) struct >> { 
  ~warranty : Warranty
  ~item : Item?
  ~body : some View
  -statusColor : Color 
}
class "WarrantyListViewModel" as WarrantyListViewModel << (C, DarkSeaGreen) >> { 
  ~warranties : [Warranty]
  ~items : [UUID: Item]
  ~itemRepository : any ItemRepository
  ~warrantyRepository : any WarrantyRepository
  -currentFilter : WarrantyFilter
  -allWarranties : [Warranty]
  ~init(itemRepository:warrantyRepository:)
  ~loadWarranties()
  -loadItems()
  ~applyFilter(_:)
  ~getCount(for:)
  ~groupedWarranties : [(String, [Warranty])] 
}
class "WarrantyFilterChip" as WarrantyFilterChip << (S, SkyBlue) struct >> { 
  ~filter : WarrantyFilter
  ~isSelected : Bool
  ~count : Int
  ~action : () -> Void
  ~body : some View 
}
class "WarrantyFilter" as WarrantyFilter << (E, LightSteelBlue) enum >> { 
  ~all
  ~active
  ~expiringSoon
  ~expired
  ~electronics
  ~appliances
  ~icon : String 
}
class "BudgetAlertsView" as BudgetAlertsView << (S, SkyBlue) struct >> { 
  -viewModel : BudgetAlertsViewModel
  ~init(budgetRepository:)
  ~body : some View
  -sectionHeader(for:) 
}
class "AlertRow" as AlertRow << (S, SkyBlue) struct >> { 
  ~alert : Core.BudgetAlert
  ~budget : Core.Budget?
  ~onTap : () -> Void
  ~body : some View 
}
class "BudgetAlertsViewModel" as BudgetAlertsViewModel << (C, DarkSeaGreen) >> { 
  ~alerts : [Core.BudgetAlert]
  ~budgets : [UUID: Core.Budget]
  -budgetRepository : any BudgetRepository
  ~groupedAlerts : [Date: [Core.BudgetAlert]]
  ~init(budgetRepository:)
  ~loadAlerts()
  ~markAsRead(_:) 
}
class "BudgetDetailView" as BudgetDetailView << (S, SkyBlue) struct >> { 
  -dismiss
  -viewModel : BudgetDetailViewModel
  -showingEditBudget
  -showingDeleteConfirmation
  ~init(budget:budgetService:budgetRepository:)
  ~body : some View
  -currentStatusCard(status:)
  -spendingChartCard : some View
  -insightsCard(insights:)
  -transactionsCard : some View
  -historyCard : some View
  -progressColor(for:)
  -formatPeriod(_:) 
}
class "BudgetDetailViewModel" as BudgetDetailViewModel << (C, DarkSeaGreen) >> { 
  ~budget : Core.Budget
  ~currentStatus : Core.BudgetStatus?
  ~transactions : [Core.BudgetTransaction]
  ~history : [Core.BudgetHistoryEntry]
  ~insights : Core.BudgetInsights?
  ~spendingData : [BudgetSpendingDataPoint]
  ~budgetService : Core.BudgetService
  ~budgetRepository : any BudgetRepository
  ~init(budget:budgetService:budgetRepository:)
  ~loadData()
  ~toggleActive()
  ~deleteBudget()
  -generateSpendingData(from:in:) 
}
class "BudgetSpendingDataPoint" as BudgetSpendingDataPoint << (S, SkyBlue) struct >> { 
  ~id
  ~date : Date
  ~cumulativeAmount : Decimal 
}
class "AddBudgetView" as AddBudgetView << (S, SkyBlue) struct >> { 
  -dismiss
  -viewModel : AddBudgetViewModel
  ~init(budgetService:onSave:)
  ~body : some View
  -summaryView : some View 
}
class "AddBudgetViewModel" as AddBudgetViewModel << (C, DarkSeaGreen) >> { 
  ~name
  ~description
  ~amount : Decimal
  ~period : Core.BudgetPeriod
  ~startDate
  ~endDate
  ~hasEndDate
  ~hasCategory
  ~selectedCategory : ItemCategory?
  ~enableNotifications
  ~notificationThreshold
  ~showingError
  ~errorMessage
  -budgetService : Core.BudgetService
  -onSave : (Core.Budget) -> Void
  ~isValid : Bool
  ~init(budgetService:onSave:)
  ~saveBudget() 
}
class "BudgetDashboardView" as BudgetDashboardView << (S, SkyBlue) struct >> { 
  -viewModel : BudgetDashboardViewModel
  -showingAddBudget
  -selectedBudget : Core.Budget?
  -showingBudgetDetail
  ~init(budgetRepository:itemRepository:)
  ~body : some View
  -budgetSummaryCard : some View
  -activeBudgetsSection : some View
  -alertsSection : some View
  -performanceSection : some View
  -emptyStateView : some View 
}
class "BudgetCard" as BudgetCard << (S, SkyBlue) struct >> { 
  ~budget : Core.Budget
  ~status : Core.BudgetStatus?
  -percentageUsed : Double
  -progressColor : Color
  ~body : some View 
}
class "AlertCard" as AlertCard << (S, SkyBlue) struct >> { 
  ~alert : Core.BudgetAlert
  ~budget : Core.Budget?
  ~body : some View 
}
class "PerformanceCard" as PerformanceCard << (S, SkyBlue) struct >> { 
  ~performance : Core.BudgetPerformance
  ~budget : Core.Budget?
  ~body : some View 
}
class "BudgetDashboardViewModel" as BudgetDashboardViewModel << (C, DarkSeaGreen) >> { 
  ~activeBudgets : [Core.Budget]
  ~budgetStatuses : [UUID: Core.BudgetStatus]
  ~recentAlerts : [Core.BudgetAlert]
  ~budgetPerformance : [Core.BudgetPerformance]
  ~isLoading
  ~budgetService : Core.BudgetService
  ~budgetRepository : any BudgetRepository
  ~totalMonthlyBudget : Decimal
  ~totalSpentThisMonth : Decimal
  ~totalRemainingThisMonth : Decimal
  ~init(budgetService:budgetRepository:)
  ~loadBudgets()
  ~getBudget(for:) 
}
class "EditBudgetView" as EditBudgetView << (S, SkyBlue) struct >> { 
  -dismiss
  -name : String
  -description : String
  -amount : Decimal
  -notificationThreshold : Double
  -isActive : Bool
  ~budget : Core.Budget
  ~budgetService : Core.BudgetService
  ~onUpdate : (Core.Budget) -> Void
  ~init(budget:budgetService:onUpdate:)
  ~body : some View
  -updateBudget() 
}
class "PremiumTests" as PremiumTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "PremiumModule" as PremiumModule << (C, DarkSeaGreen) >> { 
  +isPremium : Bool
  +isPremiumPublisher : Published<Bool>.Publisher
  -dependencies : PremiumModuleDependencies
  -cancellables
  -freeItemLimit
  -freeLocationLimit
  +init(dependencies:)
  +makePremiumUpgradeView()
  +makeSubscriptionManagementView()
  +purchasePremium()
  +restorePurchases()
  +requiresPremium(_:)
  -loadPremiumStatus()
  -savePremiumStatus(_:)
  -checkSubscriptionStatus() 
}
class "PremiumError" as PremiumError << (E, LightSteelBlue) enum >> { 
  ~noProductsAvailable
  ~purchaseFailed
  ~errorDescription : String? 
}
class "PremiumFeature" as PremiumFeature << (E, LightSteelBlue) enum >> { 
  +unlimitedItems
  +cloudSync
  +advancedReports
  +multipleLocations
  +barcodeScanning
  +receiptOCR
  +exportData
  +themes
  +widgets
  +displayName : String
  +description : String
  +iconName : String 
}
class "PremiumModuleDependencies" as PremiumModuleDependencies << (S, SkyBlue) struct >> { 
  +purchaseService : PurchaseServiceProtocol
  +userDefaults : UserDefaults
  +init(purchaseService:userDefaults:) 
}
class "PremiumProduct" as PremiumProduct << (S, SkyBlue) struct >> { 
  +id : String
  +name : String
  +description : String
  +price : String
  +period : SubscriptionPeriod?
  +init(id:name:description:price:period:) 
}
class "SubscriptionPeriod" as SubscriptionPeriod << (E, LightSteelBlue) enum >> { 
  +monthly
  +yearly
  +displayName : String 
}
class "SubscriptionManagementView" as SubscriptionManagementView << (S, SkyBlue) struct >> { 
  ~module : PremiumModule
  -dismiss
  ~body : some View
  -statusSection : some View
  -featuresSection : some View
  -actionsSection : some View 
}
class "PremiumUpgradeView" as PremiumUpgradeView << (S, SkyBlue) struct >> { 
  ~module : PremiumModule
  -isLoading
  -showError
  -errorMessage
  -dismiss
  ~body : some View
  -headerSection : some View
  -featuresSection : some View
  -pricingSection : some View
  -actionButtons : some View
  -purchasePremium()
  -restorePurchases() 
}
class "PricingCard" as PricingCard << (S, SkyBlue) struct >> { 
  ~title : String
  ~price : String
  ~period : String
  ~isPopular : Bool
  ~savings : String?
  ~init(title:price:period:isPopular:savings:)
  ~body : some View 
}
class "WidgetsTests" as WidgetsTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "WidgetDataProvider" as WidgetDataProvider << (C, DarkSeaGreen) >> { 
  -itemRepository : any ItemRepository
  -receiptRepository : any ReceiptRepository
  -warrantyRepository : any WarrantyRepository
  -budgetRepository : (any BudgetRepository)?
  +init(itemRepository:receiptRepository:warrantyRepository:budgetRepository:)
  +getInventoryStats()
  +getSpendingSummary()
  +getWarrantyExpirations()
  +getRecentItems() 
}
class "WidgetsModuleDependencies" as WidgetsModuleDependencies << (S, SkyBlue) struct >> { 
  +itemRepository : any ItemRepository
  +receiptRepository : any ReceiptRepository
  +warrantyRepository : any WarrantyRepository
  +budgetRepository : (any BudgetRepository)?
  +init(itemRepository:receiptRepository:warrantyRepository:budgetRepository:) 
}
class "WidgetsModule" as WidgetsModule << (C, DarkSeaGreen) >> { 
  -dependencies : WidgetsModuleDependencies
  +init(dependencies:) 
}
class "ConfigureInventoryStatsIntent" as ConfigureInventoryStatsIntent << (S, SkyBlue) struct >> { 
  ~{static} title : LocalizedStringResource
  ~{static} description
  ~showValue : Bool
  ~showFavorites : Bool
  ~showCategories : Bool 
}
class "ConfigureSpendingIntent" as ConfigureSpendingIntent << (S, SkyBlue) struct >> { 
  ~{static} title : LocalizedStringResource
  ~{static} description
  ~timePeriod : SpendingPeriod
  ~showTrend : Bool
  ~showTopCategory : Bool 
}
class "SpendingPeriod" as ConfigureSpendingIntent.SpendingPeriod << (E, LightSteelBlue) enum >> { 
  ~week
  ~month
  ~year
  ~{static} typeDisplayRepresentation
  ~{static} caseDisplayRepresentations : [SpendingPeriod: DisplayRepresentation] 
}
class "OpenItemIntent" as OpenItemIntent << (S, SkyBlue) struct >> { 
  ~{static} title : LocalizedStringResource
  ~{static} description
  ~itemId : String
  ~init()
  ~init(itemId:)
  ~perform() 
}
class "QuickAddItemIntent" as QuickAddItemIntent << (S, SkyBlue) struct >> { 
  ~{static} title : LocalizedStringResource
  ~{static} description
  ~name : String
  ~category : ItemCategoryOption
  ~location : String?
  ~init()
  ~perform() 
}
class "ItemCategoryOption" as QuickAddItemIntent.ItemCategoryOption << (E, LightSteelBlue) enum >> { 
  ~electronics
  ~furniture
  ~clothing
  ~books
  ~appliances
  ~tools
  ~sports
  ~toys
  ~other
  ~{static} typeDisplayRepresentation
  ~{static} caseDisplayRepresentations : [ItemCategoryOption: DisplayRepresentation] 
}
class "RecentItemsWidgetView" as RecentItemsWidgetView << (S, SkyBlue) struct >> { 
  +entry : RecentItemsEntry
  ~family
  +init(entry:)
  +body : some View
  -mediumView : some View
  -largeView : some View 
}
class "RecentItemCard" as RecentItemCard21 << (S, SkyBlue) struct >> { 
  ~item : RecentItemsEntry.RecentItem
  ~body : some View 
}
class "RecentItemRow" as RecentItemRow << (S, SkyBlue) struct >> { 
  ~item : RecentItemsEntry.RecentItem
  ~body : some View 
}
class "InventoryStatsWidgetView" as InventoryStatsWidgetView << (S, SkyBlue) struct >> { 
  +entry : InventoryStatsEntry
  ~family
  +init(entry:)
  +body : some View
  -smallView : some View
  -mediumView : some View 
}
class "StatCard" as StatCard22 << (S, SkyBlue) struct >> { 
  ~title : String
  ~value : String
  ~icon : String
  ~color : Color
  ~body : some View 
}
class "CategoryBadge" as CategoryBadge << (S, SkyBlue) struct >> { 
  ~name : String
  ~count : Int
  ~body : some View 
}
class "WarrantyExpirationWidgetView" as WarrantyExpirationWidgetView << (S, SkyBlue) struct >> { 
  +entry : WarrantyExpirationEntry
  ~family
  +init(entry:)
  +body : some View
  -smallView : some View
  -mediumView : some View
  -warrantyColor(_:) 
}
class "StatBadge" as StatBadge << (S, SkyBlue) struct >> { 
  ~value : Int
  ~label : String
  ~color : Color
  ~body : some View 
}
class "WarrantyRow" as WarrantyRow << (S, SkyBlue) struct >> { 
  ~warranty : WarrantyExpirationEntry.ExpiringWarranty
  ~body : some View
  -warrantyColor(_:) 
}
class "SpendingSummaryWidgetView" as SpendingSummaryWidgetView << (S, SkyBlue) struct >> { 
  +entry : SpendingSummaryEntry
  ~family
  +init(entry:)
  +body : some View
  -smallView : some View
  -mediumView : some View
  -largeView : some View
  -trendIndicator : some View 
}
class "WidgetSharedContainer" as WidgetSharedContainer << (C, DarkSeaGreen) >> { 
  +{static} appGroupIdentifier
  +{static} sharedDefaults : UserDefaults?
  +{static} sharedContainerURL : URL?
  +{static} saveInventoryStats(_:)
  +{static} saveSpendingSummary(_:)
  +{static} saveWarrantyExpirations(_:)
  +{static} saveRecentItems(_:)
  +{static} loadInventoryStats()
  +{static} loadSpendingSummary()
  +{static} loadWarrantyExpirations()
  +{static} loadRecentItems()
  +{static} lastUpdateTime()
  +{static} updateAllWidgets() 
}
class "DataKey" as WidgetSharedContainer.DataKey << (E, LightSteelBlue) enum >> { 
  ~inventoryStats
  ~spendingSummary
  ~warrantyExpirations
  ~recentItems
  ~lastUpdate 
}
class "CodingKeys" as InventoryStatsEntry.CodingKeys << (E, LightSteelBlue) enum >> { 
  ~date 
}
class "WidgetUpdateService" as WidgetUpdateService << (C, DarkSeaGreen) >> { 
  +{static} shared
  -dataProvider : WidgetDataProvider?
  -updateTimer : Timer?
  -init()
  +configure(itemRepository:receiptRepository:warrantyRepository:budgetRepository:)
  +updateAllWidgets()
  +updateWidget(kind:)
  -startPeriodicUpdates()
  +stopPeriodicUpdates() 
}
class "WidgetKind" as WidgetUpdateService.WidgetKind << (E, LightSteelBlue) enum >> { 
  +inventoryStats
  +spendingSummary
  +warrantyExpiration
  +recentItems 
}
class "DataChangeType" as WidgetUpdateService.DataChangeType << (E, LightSteelBlue) enum >> { 
  +itemAdded
  +itemUpdated
  +itemDeleted
  +receiptAdded
  +receiptUpdated
  +warrantyAdded
  +warrantyUpdated 
}
class "SpendingSummaryWidget" as SpendingSummaryWidget << (S, SkyBlue) struct >> { 
  +kind : String
  +init()
  +body : some WidgetConfiguration 
}
class "SpendingSummaryEntry" as SpendingSummaryEntry << (S, SkyBlue) struct >> { 
  +date : Date
  +monthlySpending : Decimal
  +weeklySpending : Decimal
  +topCategory : (name: String, amount: Decimal)?
  +recentPurchases : [(name: String, price: Decimal, date: Date)]
  +spendingTrend : SpendingTrend
  +init(date:monthlySpending:weeklySpending:topCategory:recentPurchases:spendingTrend:) 
}
class "SpendingTrend" as SpendingSummaryEntry.SpendingTrend << (E, LightSteelBlue) enum >> { 
  +up(percentage:)
  +down(percentage:)
  +stable 
}
class "SpendingSummaryProvider" as SpendingSummaryProvider << (S, SkyBlue) struct >> { 
  +init()
  +placeholder(in:)
  +getSnapshot(in:completion:)
  +getTimeline(in:completion:) 
}
class "RecentItemsWidget" as RecentItemsWidget << (S, SkyBlue) struct >> { 
  +kind : String
  +init()
  +body : some WidgetConfiguration 
}
class "RecentItemsEntry" as RecentItemsEntry << (S, SkyBlue) struct >> { 
  +date : Date
  +items : [RecentItem]
  +totalAddedToday : Int
  +totalAddedThisWeek : Int
  +init(date:items:totalAddedToday:totalAddedThisWeek:) 
}
class "RecentItem" as RecentItemsEntry.RecentItem << (S, SkyBlue) struct >> { 
  +id
  +name : String
  +category : ItemCategory
  +price : Decimal?
  +imageData : Data?
  +addedDate : Date
  +location : String?
  +init(name:category:price:imageData:addedDate:location:) 
}
class "RecentItemsProvider" as RecentItemsProvider << (S, SkyBlue) struct >> { 
  +init()
  +placeholder(in:)
  +getSnapshot(in:completion:)
  +getTimeline(in:completion:) 
}
class "WarrantyExpirationWidget" as WarrantyExpirationWidget << (S, SkyBlue) struct >> { 
  +kind : String
  +init()
  +body : some WidgetConfiguration 
}
class "WarrantyExpirationEntry" as WarrantyExpirationEntry << (S, SkyBlue) struct >> { 
  +date : Date
  +expiringWarranties : [ExpiringWarranty]
  +expiredCount : Int
  +activeCount : Int
  +init(date:expiringWarranties:expiredCount:activeCount:) 
}
class "ExpiringWarranty" as WarrantyExpirationEntry.ExpiringWarranty << (S, SkyBlue) struct >> { 
  +id
  +itemName : String
  +provider : String
  +expirationDate : Date
  +daysRemaining : Int
  +status : Warranty.Status
  +init(itemName:provider:expirationDate:daysRemaining:status:) 
}
class "WarrantyExpirationProvider" as WarrantyExpirationProvider << (S, SkyBlue) struct >> { 
  +init()
  +placeholder(in:)
  +getSnapshot(in:completion:)
  +getTimeline(in:completion:) 
}
class "InventoryStatsWidget" as InventoryStatsWidget << (S, SkyBlue) struct >> { 
  +kind : String
  +init()
  +body : some WidgetConfiguration 
}
class "InventoryStatsEntry" as InventoryStatsEntry << (S, SkyBlue) struct >> { 
  +date : Date
  +totalItems : Int
  +totalValue : Decimal
  +favoriteItems : Int
  +recentlyAdded : Int
  +categories : [(name: String, count: Int)]
  +init(date:totalItems:totalValue:favoriteItems:recentlyAdded:categories:) 
}
class "InventoryStatsProvider" as InventoryStatsProvider << (S, SkyBlue) struct >> { 
  +init()
  +placeholder(in:)
  +getSnapshot(in:completion:)
  +getTimeline(in:completion:) 
}
class "OnboardingTests" as OnboardingTests << (C, DarkSeaGreen) >> { 
  ~testExample() 
}
class "OnboardingModuleDependencies" as OnboardingModuleDependencies << (S, SkyBlue) struct >> { 
  +userDefaults : UserDefaults
  +init(userDefaults:) 
}
class "OnboardingStep" as OnboardingStep << (S, SkyBlue) struct >> { 
  +title : String
  +description : String
  +imageName : String
  +buttonTitle : String
  +init(title:description:imageName:buttonTitle:) 
}
class "OnboardingModule" as OnboardingModule << (C, DarkSeaGreen) >> { 
  -dependencies : OnboardingModuleDependencies
  -onboardingKey
  +isOnboardingCompleted : Bool
  +init(dependencies:)
  +makeOnboardingView(completion:)
  +completeOnboarding()
  +resetOnboarding() 
}
class "LegalConsentView" as LegalConsentView << (S, SkyBlue) struct >> { 
  ~hasAcceptedLegal : Bool
  ~onAccept : () -> Void
  ~onDecline : () -> Void
  -showPrivacyPolicy
  -showTermsOfService
  -agreedToPrivacy
  -agreedToTerms
  -canProceed : Bool
  +init(hasAcceptedLegal:onAccept:onDecline:)
  +body : some View
  -bulletPoint(_:) 
}
class "FullTermsOfServiceView" as FullTermsOfServiceView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View
  -termsOfServiceText : String 
}
class "PrivacyConsentView" as PrivacyConsentView << (S, SkyBlue) struct >> { 
  ~hasAcceptedPrivacy : Bool
  ~onAccept : () -> Void
  ~onDecline : () -> Void
  -showFullPolicy
  +init(hasAcceptedPrivacy:onAccept:onDecline:)
  +body : some View
  -privacyPoint(icon:title:description:) 
}
class "FullPrivacyPolicyView" as FullPrivacyPolicyView << (S, SkyBlue) struct >> { 
  -dismiss
  ~body : some View
  -privacyPolicyText : String 
}
class "OnboardingView" as OnboardingView << (S, SkyBlue) struct >> { 
  ~steps : [OnboardingStep]
  ~completion : () -> Void
  -currentStep
  ~colorScheme
  ~body : some View
  -backgroundColors : [Color] 
}
class "OnboardingStepView" as OnboardingStepView << (S, SkyBlue) struct >> { 
  ~step : OnboardingStep
  ~isLastStep : Bool
  ~onNext : () -> Void
  ~body : some View 
}
class "PageIndicator" as PageIndicator << (S, SkyBlue) struct >> { 
  ~numberOfPages : Int
  ~currentPage : Int
  ~body : some View 
}
class "iPadSidebarView" as iPadSidebarView << (S, SkyBlue) struct >> { 
  -navigationState
  ~coordinator : AppCoordinator
  -horizontalSizeClass
  -columnVisibility
  ~body : some View
  -detailView : some View 
}
class "iPadNavigationState" as iPadNavigationState << (C, DarkSeaGreen) >> { 
  ~selectedTab : iPadTab
  ~showAddItem
  ~selectedItem : Item?
  ~selectedCollection : Collection?
  ~selectedLocation : Location?
  ~showExport
  ~showImport
  ~showDuplicate
  ~showDeleteConfirmation
  ~showQuickLook 
}
class "iPadTab" as iPadTab << (E, LightSteelBlue) enum >> { 
  ~items
  ~collections
  ~locations
  ~categories
  ~analytics
  ~reports
  ~budget
  ~scanner
  ~search
  ~importExport
  ~settings 
}
class "ItemsNavigationView" as ItemsNavigationView << (S, SkyBlue) struct >> { 
  -selectedItem : Item?
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "CollectionsNavigationView" as CollectionsNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "LocationsNavigationView" as LocationsNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "CategoriesNavigationView" as CategoriesNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "AnalyticsNavigationView" as AnalyticsNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ReportsNavigationView" as ReportsNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "BudgetNavigationView" as BudgetNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ScannerNavigationView" as ScannerNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "SearchNavigationView" as SearchNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ImportExportNavigationView" as ImportExportNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "SettingsNavigationView" as SettingsNavigationView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "LocationsListView" as LocationsListView << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "AnalyticsDashboardView" as AnalyticsDashboardView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ReportsDashboardView" as ReportsDashboardView << (S, SkyBlue) struct >> { 
  ~body : some View 
}
class "AdvancedSearchView" as AdvancedSearchView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ImportExportDashboardView" as ImportExportDashboardView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "AddItemSheet" as AddItemSheet << (S, SkyBlue) struct >> { 
  -dismiss
  ~coordinator : AppCoordinator
  ~body : some View 
}
class "ImportExportDashboard" as ImportExportDashboard << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  -showingImport
  -showingExport
  ~body : some View 
}
class "ContentView" as ContentView << (S, SkyBlue) struct >> { 
  ~coordinator : AppCoordinator
  -selectedTab
  -showingSearch
  -showingBarcodeSearch
  -horizontalSizeClass
  ~body : some View 
}
class "View" as View << (X, Orchid) extension >> { 
  ~itemContextMenu(_:)
  ~emptySpaceContextMenu(onNewItem:onImport:) 
}
class "XCUIApplication" as XCUIApplication << (X, Orchid) extension >> { 
  -currentUnusedActivityIndicator() 
}
class "View" as View23 << (X, Orchid) extension >> { 
  ~iPadDraggable(_:)
  ~iPadDropDestination(supportedTypes:onDrop:) 
}
class "Name" as Notification.Name << (X, Orchid) extension >> { 
  ~{static} importCSV
  ~{static} itemsDropped 
}
class "iPadKeyboardShortcutsModifier" as iPadKeyboardShortcutsModifier24 << (X, Orchid) extension >> { 
  ~{static} buildCommands() 
}
class "View" as View25 << (X, Orchid) extension >> { 
  ~iPadKeyboardShortcuts(navigationState:)
  ~keyboardNavigation() 
}
class "Name" as Notification.Name26 << (X, Orchid) extension >> { 
  ~{static} keyboardShortcutTriggered
  ~{static} refreshData 
}
class "View" as View27 << (X, Orchid) extension >> { 
  ~withSmartCategorySuggestion(itemName:brand:model:description:selectedCategory:) 
}
class "View" as View28 << (X, Orchid) extension >> { 
  ~enableMultitasking()
  ~enableSlideOver()
  ~pointerInteraction()
  ~pointerStyle(_:) 
}
class "Name" as Notification.Name29 << (X, Orchid) extension >> { 
  ~{static} showKeyboardShortcuts
  ~{static} increaseTextSize
  ~{static} decreaseTextSize
  ~{static} showImport 
}
class "ColorResource" as DeveloperToolsSupport.ColorResource << (X, Orchid) extension >> { 
  ~{static} accent 
}
class "ImageResource" as DeveloperToolsSupport.ImageResource << (X, Orchid) extension >> {  
}
class "ItemTemplateRepository" as ItemTemplateRepository30 << (X, Orchid) extension >> { 
  +getAllTemplates() 
}
class "ItemTemplate" as ItemTemplate31 << (X, Orchid) extension >> { 
  +{static} previews : [ItemTemplate] 
}
class "Result" as Result << (X, Orchid) extension >> { 
  +reportError(operation:file:function:line:) 
}
class "Task" as Task << (X, Orchid) extension >> { 
  +init(priority:operation:file:function:line:_:) 
}
class "DefaultCategoryRepository" as DefaultCategoryRepository32 << (X, Orchid) extension >> { 
  +{static} initializeWithBuiltInCategories(storage:) 
}
class "RetailerAnalytics" as RetailerAnalytics33 << (X, Orchid) extension >> { 
  +{static} preview
  +{static} previews 
}
class "CSVImportTemplate" as CSVImportTemplate34 << (X, Orchid) extension >> { 
  +{static} basic
  +{static} detailed
  +{static} allTemplates 
}
class "Location" as Location35 << (X, Orchid) extension >> { 
  +{static} preview
  +{static} previews : [Location] 
}
class "Collection" as Collection36 << (X, Orchid) extension >> { 
  +{static} preview
  +{static} previews : [Collection] 
}
class "Item" as Item37 << (X, Orchid) extension >> { 
  +{static} preview
  +{static} previews : [Item] 
}
class "Receipt" as Receipt38 << (X, Orchid) extension >> { 
  +{static} preview
  +{static} previews : [Receipt] 
}
class "Warranty" as Warranty39 << (X, Orchid) extension >> { 
  +status : Status
  +daysRemaining : Int
  +progress : Double 
}
class "BarcodeFormat" as BarcodeFormat40 << (X, Orchid) extension >> {  
}
class "ItemCategoryModel" as ItemCategoryModel41 << (X, Orchid) extension >> { 
  +{static} builtInCategories : [ItemCategoryModel]
  +{static} defaultCategoryId 
}
class "ItemCategoryModel" as ItemCategoryModel42 << (X, Orchid) extension >> { 
  +{static} fromItemCategory(_:) 
}
class "CSVExportTemplate" as CSVExportTemplate43 << (X, Orchid) extension >> { 
  +{static} basic
  +{static} full
  +{static} financial
  +{static} inventory
  +{static} allTemplates 
}
class "Tag" as Tag44 << (X, Orchid) extension >> { 
  +{static} previews : [Tag] 
}
class "CategoryDepreciationRule" as CategoryDepreciationRule45 << (X, Orchid) extension >> { 
  +{static} defaults : [ItemCategory: CategoryDepreciationRule] 
}
class "ScanHistoryEntry" as ScanHistoryEntry46 << (X, Orchid) extension >> { 
  +{static} previews : [ScanHistoryEntry] 
}
class "StorageUnit" as StorageUnit47 << (X, Orchid) extension >> { 
  +{static} previews : [StorageUnit] 
}
class "CIFilter" as CIFilter << (X, Orchid) extension >> { 
  ~{static} qrCodeGenerator()
  ~message : Data?
  ~correctionLevel : String? 
}
class "Storage" as Storage48 << (X, Orchid) extension >> { 
  +saveAll(_:)
  +delete(_:) 
}
class "WarrantyRepository" as WarrantyRepository49 << (X, Orchid) extension >> { 
  +fetchExpiring(within:)
  +fetchExpired() 
}
class "SettingsKey" as SettingsKey50 << (X, Orchid) extension >> { 
  +{static} textSizePreference
  +{static} enableBoldText
  +{static} increaseContrast
  +{static} reduceTransparency
  +{static} reduceMotion
  +{static} darkModeEnabled
  +{static} useSystemTheme
  +{static} notificationsEnabled
  +{static} biometricAuthEnabled
  +{static} defaultCurrency
  +{static} autoBackupEnabled
  +{static} offlineModeEnabled
  +{static} autoSyncOnWiFi
  +{static} voiceOverEnabled
  +{static} voiceOverSpeakingRate
  +{static} voiceOverVerbosity
  +{static} crashReportingEnabled
  +{static} crashReportingAutoSend
  +{static} crashReportingDetailLevel
  +{static} voiceOverAnnouncementDelay 
}
class "LocationRepository" as LocationRepository51 << (X, Orchid) extension >> { 
  +getAllLocations() 
}
class "ItemRepository" as ItemRepository52 << (X, Orchid) extension >> { 
  +createItem(_:) 
}
class "Array" as Array << (X, Orchid) extension >> { 
  +fuzzySearch(query:fuzzyService:) 
}
class "Name" as Notification.Name53 << (X, Orchid) extension >> { 
  +{static} itemAdded
  +{static} itemUpdated
  +{static} itemDeleted
  +{static} itemsBatchUpdated 
}
class "NotificationManager" as NotificationManager54 << (X, Orchid) extension >> { 
  +userNotificationCenter(_:willPresent:withCompletionHandler:)
  +userNotificationCenter(_:didReceive:withCompletionHandler:)
  +userNotificationCenter(_:openSettingsFor:) 
}
class "Name" as Notification.Name55 << (X, Orchid) extension >> { 
  +{static} notificationTapped
  +{static} notificationActionTapped
  +{static} openNotificationSettings 
}
class "MultiPageDocumentService" as MultiPageDocumentService56 << (X, Orchid) extension >> { 
  +documentCameraViewController(_:didFinishWith:)
  +documentCameraViewControllerDidCancel(_:)
  +documentCameraViewController(_:didFailWithError:) 
}
class "NSCache" as NSCache << (X, Orchid) extension >> { 
  ~allKeys : [NSString] 
}
class "Name" as Notification.Name57 << (X, Orchid) extension >> { 
  +{static} navigateToItem
  +{static} navigateToBudget
  +{static} navigateToReceipt 
}
class "NotificationTriggerService" as NotificationTriggerService58 << (X, Orchid) extension >> { 
  -calculateBudgetSpent(budget:itemRepository:) 
}
class "SpotlightService" as SpotlightService59 << (X, Orchid) extension >> { 
  +searchItems(query:) 
}
class "Item" as Item60 << (X, Orchid) extension >> { 
  +toSearchableItem(location:) 
}
class "View" as View61 << (X, Orchid) extension >> { 
  +textStyle(_:) 
}
class "View" as View62 << (X, Orchid) extension >> { 
  +appPadding(_:_:) 
}
class "View" as View63 << (X, Orchid) extension >> { 
  +dynamicTextStyle(_:) 
}
class "EnvironmentValues" as EnvironmentValues << (X, Orchid) extension >> { 
  +textSizePreference : TextSizePreference? 
}
class "View" as View64 << (X, Orchid) extension >> { 
  +textSizePreference(_:) 
}
class "View" as View65 << (X, Orchid) extension >> { 
  +accessibleLineSpacing() 
}
class "Color" as Color << (X, Orchid) extension >> { 
  +init(hex:) 
}
class "View" as View66 << (X, Orchid) extension >> { 
  +appCornerRadius(_:)
  +appCornerRadius(_:) 
}
class "Color" as Color67 << (X, Orchid) extension >> { 
  +{static} named(_:) 
}
class "AppColors" as AppColors68 << (X, Orchid) extension >> { 
  +{static} groupedBackground : Color
  +{static} divider : Color
  +{static} primaryMuted : Color
  +{static} successMuted : Color
  +{static} warningMuted : Color
  +{static} danger : Color
  +{static} dangerMuted : Color 
}
class "View" as View69 << (X, Orchid) extension >> { 
  +themedView() 
}
class "View" as View70 << (X, Orchid) extension >> { 
  +voiceOverLabel(_:)
  +voiceOverHint(_:)
  +voiceOverCombine()
  +voiceOverIgnore()
  +voiceOverContainer() 
}
class "View" as View71 << (X, Orchid) extension >> { 
  +voiceOverValue(_:)
  +voiceOverValue(_:in:) 
}
class "View" as View72 << (X, Orchid) extension >> { 
  +voiceOverButton()
  +voiceOverHeader()
  +voiceOverImage()
  +voiceOverSelected(_:)
  +voiceOverSearchField() 
}
class "View" as View73 << (X, Orchid) extension >> { 
  +voiceOverActions(_:) 
}
class "View" as View74 << (X, Orchid) extension >> { 
  +voiceOverFocus(when:equals:) 
}
class "View" as View75 << (X, Orchid) extension >> { 
  +voiceOverListItem(position:total:) 
}
class "View" as View76 << (X, Orchid) extension >> { 
  +accessibleImage(_:isDecorative:) 
}
class "View" as View77 << (X, Orchid) extension >> { 
  +voiceOverTextField(label:hint:errorMessage:) 
}
class "NavigationLink" as NavigationLink << (X, Orchid) extension >> { 
  +voiceOverNavigationLink(label:hint:) 
}
class "View" as View78 << (X, Orchid) extension >> { 
  +voiceOverTabItem(label:hint:) 
}
class "View" as View79 << (X, Orchid) extension >> { 
  +secureText(placeholder:) 
}
class "View" as View80 << (X, Orchid) extension >> { 
  +withOfflineIndicator() 
}
class "View" as View81 << (X, Orchid) extension >> { 
  +biometricLock() 
}
class "View" as View82 << (X, Orchid) extension >> { 
  +crashReportBanner() 
}
class "View" as View83 << (X, Orchid) extension >> { 
  +searchableItem(_:location:) 
}
class "View" as View84 << (X, Orchid) extension >> { 
  +applyDynamicType(settingsStorage:) 
}
class "View" as View85 << (X, Orchid) extension >> { 
  +accessibilityAdaptiveLayout() 
}
class "BatchScannerViewModel" as BatchScannerViewModel86 << (X, Orchid) extension >> { 
  ~metadataOutput(_:didOutput:from:) 
}
class "BarcodeScannerViewModel" as BarcodeScannerViewModel87 << (X, Orchid) extension >> { 
  ~metadataOutput(_:didOutput:from:) 
}
class "SettingsStorageProtocol" as SettingsStorageProtocol88 << (X, Orchid) extension >> { 
  +loadSettings()
  +saveSettings(_:)
  -loadBarcodeFormats()
  -saveBarcodeFormats(_:) 
}
class "SettingsKey" as SettingsKey89 << (X, Orchid) extension >> { 
  +{static} scannerSoundEnabled
  +{static} scannerSensitivity
  +{static} continuousScanDelay
  +{static} enabledBarcodeFormats
  +{static} autoBackupEnabled
  +{static} offlineModeEnabled
  +{static} autoSyncOnWiFi
  +{static} defaultCurrency
  +{static} notificationsEnabled
  +{static} darkModeEnabled
  +{static} biometricAuthEnabled 
}
class "SettingsKey" as SettingsKey90 << (X, Orchid) extension >> { 
  ~{static} crashReportingEnabled
  ~{static} crashReportingAutoSend
  ~{static} crashReportingIncludeDeviceInfo
  ~{static} crashReportingIncludeAppState
  ~{static} crashReportingDetailLevel 
}
class "SettingsKey" as SettingsKey91 << (X, Orchid) extension >> { 
  ~{static} voiceOverVerboseLabels
  ~{static} voiceOverReadPrices
  ~{static} voiceOverGroupRelatedItems
  ~{static} voiceOverAnnouncePositions
  ~{static} voiceOverAnnounceChanges
  ~{static} voiceOverAnnounceSyncStatus
  ~{static} voiceOverAnnouncementDelay
  ~{static} voiceOverCustomActions
  ~{static} voiceOverMagicTap 
}
class "UserDefaultsSettingsStorage" as Core.UserDefaultsSettingsStorage << (X, Orchid) extension >> { 
  -{static} settingsKey
  +loadSettings()
  +saveSettings(_:) 
}
class "CategorySpendingData" as CategorySpendingData92 << (X, Orchid) extension >> { 
  ~averagePrice : Decimal? 
}
class "SearchField" as SearchMatch.SearchField93 << (X, Orchid) extension >> { 
  ~icon : String 
}
class "Calendar" as Calendar << (X, Orchid) extension >> { 
  ~isDateInThisMonth(_:) 
}
class "Color" as Color94 << (X, Orchid) extension >> { 
  ~init(hex:) 
}
class "InventoryStatsEntry" as InventoryStatsEntry95 << (X, Orchid) extension >> { 
  +init(from:)
  +encode(to:) 
}
class "SpendingSummaryEntry" as SpendingSummaryEntry96 << (X, Orchid) extension >> {  
}
class "SpendingTrend" as SpendingSummaryEntry.SpendingTrend97 << (X, Orchid) extension >> {  
}
class "WarrantyExpirationEntry" as WarrantyExpirationEntry98 << (X, Orchid) extension >> {  
}
class "ExpiringWarranty" as WarrantyExpirationEntry.ExpiringWarranty99 << (X, Orchid) extension >> {  
}
class "RecentItemsEntry" as RecentItemsEntry100 << (X, Orchid) extension >> {  
}
class "RecentItem" as RecentItemsEntry.RecentItem101 << (X, Orchid) extension >> {  
}
class "WidgetUpdateService" as WidgetUpdateService102 << (X, Orchid) extension >> { 
  +appDidBecomeActive()
  +appDidEnterBackground()
  +significantDataChanged(type:) 
}
class "OnboardingStep" as OnboardingStep103 << (X, Orchid) extension >> { 
  +{static} welcome
  +{static} organize
  +{static} scan
  +{static} receipts
  +{static} protect
  +{static} allSteps : [OnboardingStep] 
}
AnyObject <|.. ReceiptsModuleAPI : inherits
Repository <|.. ItemTemplateRepository : inherits
Repository <|.. CollectionRepository : inherits
Repository <|.. TagRepository : inherits
Repository <|.. StorageUnitRepository : inherits
Sendable <|.. ScanHistoryRepository : inherits
Repository <|.. CategoryRepository : inherits
Repository <|.. DocumentRepository : inherits
Repository <|.. OfflineScanQueueRepository : inherits
Repository <|.. WarrantyRepository : inherits
AnyObject <|.. SettingsStorageProtocol : inherits
Repository <|.. ItemRepository : conforms to
Repository <|.. LocationRepository : conforms to
Repository <|.. ReceiptRepository : conforms to
AnyObject <|.. ScannerModuleAPI : inherits
AnyObject <|.. ItemsModuleAPI : inherits
ViewModifier <|-- ItemContextMenuModifier : inherits
View <|-- EditItemSheet : inherits
View <|-- MoveItemSheet : inherits
View <|-- CollectionPickerSheet : inherits
View <|-- MultiSelectionContextMenu : inherits
ObservableObject <|-- AppCoordinator : inherits
ItemRepository <|.. MockItemRepository : conforms to
LocationRepository <|.. MockLocationRepository : conforms to
ReceiptRepository <|.. MockReceiptRepository : conforms to
EmailServiceProtocol <|.. MockEmailService : conforms to
OCRServiceProtocol <|.. MockOCRService : conforms to
WarrantyRepository <|.. MockWarrantyRepository : conforms to
CloudServiceProtocol <|.. MockCloudService : conforms to
ItemTemplateRepository <|.. MockItemTemplateRepository : conforms to
PurchaseServiceProtocol <|.. MockPurchaseService : conforms to
Error -- SnapshotError : inherits
CustomDebugStringConvertible -- SnapshotError : inherits
NSObject <|-- Snapshot : inherits
XCTestCase <|-- ScreenshotDebug : inherits
XCTestCase <|-- HomeInventoryModularUITests : inherits
ViewModifier <|-- iPadDragDropModifier : inherits
ViewModifier <|-- iPadDropDestinationModifier : inherits
View <|-- DragPreview : inherits
ObservableObject <|-- DragSession : inherits
ViewModifier <|-- iPadKeyboardShortcutsModifier : inherits
ViewModifier <|-- KeyboardNavigationModifier : inherits
Hashable -- KeyboardNavigationModifier.FocusableField : inherits
View <|-- KeyboardShortcutHelpView : inherits
View <|-- ShortcutRow : inherits
View <|-- SmartCategoryDemoView : inherits
View <|-- SmartCategoryExampleUsage : inherits
PreviewProvider <|-- SmartCategoryDemo_Previews : inherits
WidgetBundle <|-- HomeInventoryWidgetBundle : inherits
View <|-- iPadApp : inherits
ViewModifier <|-- MultitaskingModifier : inherits
UIViewRepresentable <|-- WindowAccessor : inherits
App <|-- iPadSceneDelegate : inherits
ViewModifier <|-- SlideOverModifier : inherits
View <|-- SlideOverPanel : inherits
ViewModifier <|-- PointerInteractionModifier : inherits
View <|-- iPadColumnView : inherits
ObservableObject <|-- ColumnViewModel : inherits
View <|-- CategoryRow : inherits
View <|-- ItemRow : inherits
View <|-- ItemDetailPlaceholder : inherits
View <|-- DetailRow : inherits
App <|-- HomeInventoryModularApp : inherits
NSObject <|-- AppDelegate : inherits
UIApplicationDelegate <|-- AppDelegate : inherits
XCTestCase <|-- ReceiptsTests : inherits
ObservableObject <|-- ReceiptDetailViewModel : inherits
ObservableObject <|-- ReceiptsListViewModel : inherits
ObservableObject <|-- ReceiptImportViewModel : inherits
ObservableObject <|-- ReceiptPreviewViewModel : inherits
ReceiptRepository <|.. ReceiptRepositoryImplementation : conforms to
ReceiptsModuleAPI <|.. ReceiptsModule : conforms to
UIViewControllerRepresentable <|-- DocumentScannerView : inherits
NSObject <|-- DocumentScannerView.Coordinator : inherits
VNDocumentCameraViewControllerDelegate <|-- DocumentScannerView.Coordinator : inherits
View <|-- DocumentScannerWrapper : inherits
View <|-- MultiPageReceiptView : inherits
View <|-- ReceiptPreviewView : inherits
View <|-- ReceiptsListView : inherits
View <|-- ReceiptRowView : inherits
View <|-- ReceiptDetailView : inherits
View <|-- InfoRow : inherits
View <|-- LinkedItemRow : inherits
View <|-- FullScreenImageView : inherits
View <|-- AddReceiptView : inherits
Hashable -- AddReceiptView.Field : inherits
ObservableObject <|-- AddReceiptViewModel : inherits
UIViewControllerRepresentable <|-- ImagePicker : inherits
NSObject <|-- ImagePicker.Coordinator : inherits
UIImagePickerControllerDelegate <|-- ImagePicker.Coordinator : inherits
UINavigationControllerDelegate <|-- ImagePicker.Coordinator : inherits
View <|-- ItemPickerView : inherits
View <|-- ItemPickerRow : inherits
View <|-- ReceiptImportView : inherits
RetailerParser <|.. TargetParser : conforms to
RetailerParser <|.. WalmartParser : conforms to
RetailerParser <|.. AmazonParser : conforms to
RetailerParser <|.. AppleStoreParser : conforms to
RetailerParser <|.. BestBuyParser : conforms to
OCRServiceProtocol <|.. VisionOCRService : conforms to
LocalizedError -- OCRError : inherits
XCTestCase <|-- ItemTests : inherits
Identifiable <|-- ItemTemplate : inherits
Codable <|-- ItemTemplate : inherits
Equatable <|-- ItemTemplate : inherits
View <|-- ErrorBoundaryView : inherits
View <|-- ErrorFallbackView : inherits
StorageUnitRepository <|.. DefaultStorageUnitRepository : conforms to
SavedSearchRepository <|.. DefaultSavedSearchRepository : conforms to
DocumentRepository <|.. DefaultDocumentRepository : conforms to
DocumentStorageProtocol <|.. FileDocumentStorage : conforms to
LocalizedError -- DocumentStorageError : inherits
LocalizedError -- OfflineError : inherits
Codable <|-- OfflineItemOperation : inherits
ObservableObject <|-- OfflineSyncCoordinator : inherits
CollectionRepository <|.. DefaultCollectionRepository : conforms to
LocalizedError -- RepositoryError : inherits
OfflineScanQueueRepository <|.. DefaultOfflineScanQueueRepository : conforms to
ScanHistoryRepository <|.. DefaultScanHistoryRepository : conforms to
TagRepository <|.. DefaultTagRepository : conforms to
SearchHistoryRepository <|.. DefaultSearchHistoryRepository : conforms to
CategoryRepository <|.. InMemoryCategoryRepository : conforms to
Codable <|-- BudgetPerformance : inherits
Identifiable <|-- BudgetPerformance : inherits
CategoryRepository <|.. DefaultCategoryRepository : conforms to
LocalizedError -- CategoryError : inherits
BudgetRepository <|.. MockBudgetRepository : conforms to
PhotoRepository <|.. PhotoRepositoryImpl : conforms to
PhotoStorageProtocol <|.. FilePhotoStorage : conforms to
LocalizedError -- PhotoStorageError : inherits
WarrantyRepository <|.. MockWarrantyRepository : conforms to
Codable <|-- RetailerAnalytics : inherits
Identifiable <|-- RetailerAnalytics : inherits
Equatable <|-- RetailerAnalytics : inherits
String -- PurchaseFrequency : inherits
Codable -- PurchaseFrequency : inherits
CaseIterable -- PurchaseFrequency : inherits
Identifiable -- PurchaseFrequency : inherits
Codable <|-- CategorySpending : inherits
Identifiable <|-- CategorySpending : inherits
Equatable <|-- CategorySpending : inherits
Codable <|-- MonthlySpending : inherits
Identifiable <|-- MonthlySpending : inherits
Equatable <|-- MonthlySpending : inherits
Codable <|-- StoreRanking : inherits
Identifiable <|-- StoreRanking : inherits
String -- RankingMetric : inherits
Codable -- RankingMetric : inherits
CaseIterable -- RankingMetric : inherits
Codable <|-- RetailerInsights : inherits
Codable <|-- CategoryLeader : inherits
Identifiable <|-- CategoryLeader : inherits
Codable <|-- CSVImportConfiguration : inherits
Codable <|-- CSVColumnMapping : inherits
Error <|-- CSVImportError : inherits
Identifiable <|-- CSVImportError : inherits
String -- CSVImportErrorReason : inherits
Codable -- CSVImportErrorReason : inherits
Codable <|-- CSVImportTemplate : inherits
Identifiable <|-- CSVImportTemplate : inherits
Identifiable <|-- Location : inherits
Codable <|-- Location : inherits
Equatable <|-- Location : inherits
Identifiable <|-- Collection : inherits
Codable <|-- Collection : inherits
Equatable <|-- Collection : inherits
String -- ItemCategory : inherits
Codable -- ItemCategory : inherits
CaseIterable -- ItemCategory : inherits
Hashable -- ItemCategory : inherits
String -- ItemCondition : inherits
Codable -- ItemCondition : inherits
CaseIterable -- ItemCondition : inherits
Codable <|-- SearchHistoryEntry : inherits
Identifiable <|-- SearchHistoryEntry : inherits
Equatable <|-- SearchHistoryEntry : inherits
String -- SearchHistoryEntry.SearchType : inherits
Codable -- SearchHistoryEntry.SearchType : inherits
CaseIterable -- SearchHistoryEntry.SearchType : inherits
Codable <|-- PurchasePattern : inherits
Identifiable <|-- PurchasePattern : inherits
Codable -- PatternType : inherits
Identifiable -- PatternType : inherits
Codable <|-- RecurringPattern : inherits
Identifiable <|-- RecurringPattern : inherits
String -- PatternFrequency : inherits
Codable -- PatternFrequency : inherits
CaseIterable -- PatternFrequency : inherits
Codable <|-- SeasonalBuyingPattern : inherits
Identifiable <|-- SeasonalBuyingPattern : inherits
Codable <|-- CategoryPreference : inherits
Identifiable <|-- CategoryPreference : inherits
Codable <|-- BrandLoyalty : inherits
Identifiable <|-- BrandLoyalty : inherits
Codable <|-- PriceRangePattern : inherits
Identifiable <|-- PriceRangePattern : inherits
String -- PatternPriceRange : inherits
Codable -- PatternPriceRange : inherits
CaseIterable -- PatternPriceRange : inherits
Codable <|-- ShoppingTimePattern : inherits
Identifiable <|-- ShoppingTimePattern : inherits
String -- TimeOfDay : inherits
Codable -- TimeOfDay : inherits
CaseIterable -- TimeOfDay : inherits
String -- WeekdayPreference : inherits
Codable -- WeekdayPreference : inherits
Codable <|-- RetailerPreference : inherits
Identifiable <|-- RetailerPreference : inherits
Codable <|-- BulkBuyingPattern : inherits
Identifiable <|-- BulkBuyingPattern : inherits
Codable <|-- PatternInsight : inherits
Identifiable <|-- PatternInsight : inherits
Codable <|-- PatternRecommendation : inherits
Identifiable <|-- PatternRecommendation : inherits
String -- RecommendationType : inherits
Codable -- RecommendationType : inherits
String -- RecommendationPriority : inherits
Codable -- RecommendationPriority : inherits
Identifiable <|-- Item : inherits
Codable <|-- Item : inherits
Equatable <|-- Item : inherits
Codable <|-- SavedSearch : inherits
Identifiable <|-- SavedSearch : inherits
Equatable <|-- SavedSearch : inherits
Codable <|-- PrivacyPolicyAcceptance : inherits
Identifiable <|-- Receipt : inherits
Codable <|-- Receipt : inherits
Equatable <|-- Receipt : inherits
Identifiable <|-- Photo : inherits
Codable <|-- Photo : inherits
Equatable <|-- Photo : inherits
String -- Photo.CodingKeys : inherits
CodingKey -- Photo.CodingKeys : inherits
Identifiable <|-- Warranty : inherits
Codable <|-- Warranty : inherits
Equatable <|-- Warranty : inherits
String -- WarrantyType : inherits
Codable -- WarrantyType : inherits
CaseIterable -- WarrantyType : inherits
Equatable -- Warranty.Status : inherits
String -- BarcodeFormat.FormatGroup : inherits
CaseIterable -- BarcodeFormat.FormatGroup : inherits
Identifiable <|-- Document : inherits
Codable <|-- Document : inherits
Equatable <|-- Document : inherits
String -- Document.DocumentType : inherits
Codable -- Document.DocumentType : inherits
CaseIterable -- Document.DocumentType : inherits
String -- Document.DocumentCategory : inherits
Codable -- Document.DocumentCategory : inherits
CaseIterable -- Document.DocumentCategory : inherits
Identifiable <|-- ItemCategoryModel : inherits
Codable <|-- ItemCategoryModel : inherits
Equatable <|-- ItemCategoryModel : inherits
Codable <|-- Budget : inherits
Identifiable <|-- Budget : inherits
String -- BudgetPeriod : inherits
Codable -- BudgetPeriod : inherits
CaseIterable -- BudgetPeriod : inherits
Codable <|-- BudgetStatus : inherits
Identifiable <|-- BudgetStatus : inherits
Codable <|-- BudgetAlert : inherits
Identifiable <|-- BudgetAlert : inherits
String -- BudgetAlertType : inherits
Codable -- BudgetAlertType : inherits
Codable <|-- BudgetTransaction : inherits
Identifiable <|-- BudgetTransaction : inherits
Codable <|-- BudgetHistoryEntry : inherits
Identifiable <|-- BudgetHistoryEntry : inherits
Identifiable <|-- OfflineScanQueueEntry : inherits
Codable <|-- OfflineScanQueueEntry : inherits
Equatable <|-- OfflineScanQueueEntry : inherits
String -- OfflineScanQueueEntry.QueueStatus : inherits
Codable -- OfflineScanQueueEntry.QueueStatus : inherits
Codable <|-- CSVExportConfiguration : inherits
String -- CSVExportField : inherits
Codable -- CSVExportField : inherits
CaseIterable -- CSVExportField : inherits
String -- CSVExportSortField : inherits
Codable -- CSVExportSortField : inherits
CaseIterable -- CSVExportSortField : inherits
Codable <|-- CSVExportTemplate : inherits
Identifiable <|-- CSVExportTemplate : inherits
Identifiable <|-- Tag : inherits
Codable <|-- Tag : inherits
Equatable <|-- Tag : inherits
Hashable <|-- Tag : inherits
Codable <|-- TimeBasedAnalytics : inherits
Identifiable <|-- TimeBasedAnalytics : inherits
String -- AnalyticsPeriod : inherits
Codable -- AnalyticsPeriod : inherits
CaseIterable -- AnalyticsPeriod : inherits
Codable <|-- TimeMetrics : inherits
Codable <|-- CategoryTimeMetric : inherits
Identifiable <|-- CategoryTimeMetric : inherits
Codable <|-- StoreTimeMetric : inherits
Identifiable <|-- StoreTimeMetric : inherits
Codable <|-- TrendData : inherits
Identifiable <|-- TrendData : inherits
Codable <|-- PeriodComparison : inherits
String -- TrendDirection : inherits
Codable -- TrendDirection : inherits
Codable <|-- TimeInsight : inherits
Identifiable <|-- TimeInsight : inherits
String -- InsightType : inherits
Codable -- InsightType : inherits
String -- InsightImpact : inherits
Codable -- InsightImpact : inherits
Codable <|-- SeasonalPattern : inherits
String -- Season : inherits
Codable -- Season : inherits
CaseIterable -- Season : inherits
Codable <|-- DepreciationReport : inherits
Identifiable <|-- DepreciationReport : inherits
Codable <|-- DepreciatingItem : inherits
Identifiable <|-- DepreciatingItem : inherits
String -- DepreciationMethod : inherits
Codable -- DepreciationMethod : inherits
CaseIterable -- DepreciationMethod : inherits
Codable <|-- DepreciationSchedule : inherits
Identifiable <|-- DepreciationSchedule : inherits
Codable <|-- AnnualDepreciation : inherits
Identifiable <|-- AnnualDepreciation : inherits
Codable <|-- CategoryDepreciationRule : inherits
Identifiable <|-- ScanHistoryEntry : inherits
Codable <|-- ScanHistoryEntry : inherits
Equatable <|-- ScanHistoryEntry : inherits
String -- ScanHistoryEntry.ScanType : inherits
Codable -- ScanHistoryEntry.ScanType : inherits
Identifiable <|-- StorageUnit : inherits
Codable <|-- StorageUnit : inherits
Equatable <|-- StorageUnit : inherits
String -- StorageUnitType : inherits
Codable -- StorageUnitType : inherits
CaseIterable -- StorageUnitType : inherits
Codable <|-- Dimensions : inherits
Equatable <|-- Dimensions : inherits
String -- MeasurementUnit : inherits
Codable -- MeasurementUnit : inherits
CaseIterable -- MeasurementUnit : inherits
Codable <|-- ItemShareData : inherits
Codable <|-- TermsOfServiceAcceptance : inherits
Hashable <|-- SettingsKey : inherits
ExpressibleByStringLiteral <|-- SettingsKey : inherits
LocalizedError -- CSVExportError : inherits
ObservableObject <|-- SpotlightIntegrationManager : inherits
SettingsStorageProtocol <|.. UserDefaultsSettingsStorage : conforms to
ObservableObject <|-- UserDefaultsSettingsStorage : inherits
NSObject <|-- NotificationManager : inherits
ObservableObject <|-- NotificationManager : inherits
String -- NotificationManager.NotificationType : inherits
CaseIterable -- NotificationManager.NotificationType : inherits
ObservableObject <|-- NotificationSettings : inherits
LocalizedError -- NotificationError : inherits
Codable <|-- ItemSearchCriteria : inherits
Equatable <|-- ItemSearchCriteria : inherits
ObservableObject <|-- CrashReportingService : inherits
Identifiable <|-- CrashReport : inherits
Codable <|-- CrashReport : inherits
String -- CrashType : inherits
Codable -- CrashType : inherits
Codable <|-- DeviceInfo : inherits
Codable <|-- AppInfo : inherits
Codable <|-- SourceLocation : inherits
ObservableObject <|-- ItemSharingService : inherits
String -- ItemSharingService.ShareFormat : inherits
CaseIterable -- ItemSharingService.ShareFormat : inherits
LocalizedError -- ShareError : inherits
NSObject <|-- ItemActivityItemSource : inherits
UIActivityItemSource <|-- ItemActivityItemSource : inherits
NSObject <|-- MultiPageDocumentService : inherits
Codable <|-- CloudDocumentMetadata : inherits
Identifiable <|-- CloudDocumentMetadata : inherits
String -- CloudDocumentMetadata.SyncStatus : inherits
Codable -- CloudDocumentMetadata.SyncStatus : inherits
String -- SyncStatus : inherits
CaseIterable -- SyncStatus : inherits
CloudDocumentStorageProtocol <|.. ICloudDocumentStorage : conforms to
LocalizedError -- CloudStorageError : inherits
Error -- KeychainService.KeychainError : inherits
ObservableObject <|-- BiometricAuthService : inherits
LocalizedError -- BiometricAuthService.BiometricError : inherits
Equatable -- BiometricAuthService.BiometricError : inherits
LocalizedError -- KeychainService.KeychainError : inherits
ObservableObject <|-- CloudSyncService : inherits
Codable <|-- SyncQueueItem : inherits
Identifiable <|-- SyncQueueItem : inherits
String -- SyncQueueItem.SyncOperation : inherits
Codable -- SyncQueueItem.SyncOperation : inherits
Identifiable <|-- SyncConflict : inherits
Identifiable <|-- SyncError : inherits
CloudDocumentStorageProtocol <|.. MockCloudStorage : conforms to
Identifiable <|-- SearchSuggestion : inherits
Hashable <|-- SearchSuggestion : inherits
String -- SuggestionType : inherits
CaseIterable -- SuggestionType : inherits
ObservableObject <|-- WarrantyNotificationService : inherits
ObservableObject <|-- NotificationTriggerService : inherits
ObservableObject <|-- SpotlightService : inherits
Codable <|-- BarcodeProduct : inherits
Equatable <|-- BarcodeProduct : inherits
BarcodeLookupService <|.. DefaultBarcodeLookupService : conforms to
LocalizedError -- BarcodeLookupError : inherits
BarcodeProvider <|.. CachedBarcodeProvider : conforms to
BarcodeProvider <|.. OpenFoodFactsProvider : conforms to
BarcodeProvider <|.. UPCItemDBProvider : conforms to
BarcodeProvider <|.. BarcodespiderProvider : conforms to
BarcodeProvider <|.. BarcodeMonsterProvider : conforms to
BarcodeProvider <|.. DatakickProvider : conforms to
Codable <|-- OpenFoodFactsResponse : inherits
Codable <|-- OpenFoodFactsProduct : inherits
Codable <|-- UPCItemDBResponse : inherits
Codable <|-- UPCItemDBItem : inherits
Codable <|-- DatakickItem : inherits
Codable <|-- DatakickImage : inherits
ObservableObject <|-- NetworkMonitor : inherits
ObservableObject <|-- OfflineQueueManager : inherits
Codable <|-- QueuedOperation : inherits
Identifiable <|-- QueuedOperation : inherits
String -- QueuedOperation.OperationType : inherits
Codable -- QueuedOperation.OperationType : inherits
Identifiable <|-- DocumentSearchResult : inherits
XCTestCase <|-- ColorsTests : inherits
ObservableObject <|-- AdvancedFiltersViewModel : inherits
Equatable <|-- ItemFilters : inherits
ViewModifier <|-- TextStyle : inherits
ViewModifier <|-- AppPadding : inherits
ViewModifier <|-- DynamicTextStyle : inherits
String -- TextSizePreference : inherits
CaseIterable -- TextSizePreference : inherits
Codable -- TextSizePreference : inherits
EnvironmentKey <|-- TextSizePreferenceKey : inherits
ViewModifier <|-- AccessibleLineSpacingModifier : inherits
ViewModifier <|-- CornerRadiusModifier : inherits
View <|-- TagInputView : inherits
View <|-- TagChip : inherits
View <|-- TagPickerView : inherits
View <|-- TagPickerRow : inherits
View <|-- FeatureUnavailableView : inherits
View <|-- PrimaryButton : inherits
ObservableObject <|-- ThemeManager : inherits
ViewModifier <|-- ThemedView : inherits
View <|-- DynamicTypeExampleView : inherits
PreviewProvider <|-- DynamicTypeExampleView_Previews : inherits
ViewModifier <|-- VoiceOverActionsModifier : inherits
ViewModifier <|-- VoiceOverFocusModifier : inherits
View <|-- AccessibleItemCard : inherits
View <|-- AccessibleProgressView : inherits
View <|-- VoiceOverGuideView : inherits
PreviewProvider <|-- VoiceOverGuideView_Previews : inherits
View <|-- FilterChipsView : inherits
View <|-- FilterChip : inherits
View <|-- AdvancedFiltersView : inherits
View <|-- FilterToggleRow : inherits
View <|-- TagCloudView : inherits
View <|-- RangeSlider : inherits
View <|-- CategoryPickerView : inherits
View <|-- CategoryPickerRow : inherits
View <|-- CategoryDisplayView : inherits
View <|-- PDFViewerEnhanced : inherits
UIViewRepresentable <|-- PDFViewerRepresentable : inherits
NSObject <|-- PDFViewerRepresentable.Coordinator : inherits
PDFViewDelegate <|-- PDFViewerRepresentable.Coordinator : inherits
View <|-- PDFThumbnailsView : inherits
View <|-- PDFThumbnailView : inherits
UIViewControllerRepresentable <|-- DocumentPicker : inherits
NSObject <|-- DocumentPicker.Coordinator : inherits
UIDocumentPickerDelegate <|-- DocumentPicker.Coordinator : inherits
LocalizedError -- DocumentPickerError : inherits
View <|-- DocumentPickerButton : inherits
View <|-- SecureDataView : inherits
ViewModifier <|-- SecureTextModifier : inherits
View <|-- SecureCurrencyText : inherits
View <|-- SecureStatCard : inherits
PreviewProvider <|-- SecureDataView_Previews : inherits
View <|-- OfflineIndicator : inherits
ViewModifier <|-- OfflineAwareModifier : inherits
View <|-- SyncStatusView : inherits
View <|-- OfflineDataView : inherits
UIViewRepresentable <|-- PDFViewer : inherits
NSObject <|-- PDFViewer.Coordinator : inherits
PDFViewDelegate <|-- PDFViewer.Coordinator : inherits
View <|-- PDFViewerView : inherits
UIViewControllerRepresentable <|-- ShareSheet : inherits
View <|-- SearchBar : inherits
View <|-- PhotoGridView : inherits
View <|-- PhotoThumbnailView : inherits
View <|-- AddPhotoButton : inherits
View <|-- PhotoGalleryView : inherits
View <|-- PhotoDetailView : inherits
View <|-- PhotoPickerView : inherits
UIViewControllerRepresentable <|-- CameraCaptureView : inherits
NSObject <|-- CameraCaptureView.Coordinator : inherits
UIImagePickerControllerDelegate <|-- CameraCaptureView.Coordinator : inherits
UINavigationControllerDelegate <|-- CameraCaptureView.Coordinator : inherits
View <|-- LoadingOverlay : inherits
View <|-- DocumentCategoryPicker : inherits
View <|-- DocumentCategoryFilter : inherits
View <|-- CategoryFilterChip : inherits
View <|-- DocumentOrganizationView : inherits
View <|-- DocumentCard : inherits
View <|-- BiometricLockView : inherits
ViewModifier <|-- BiometricLockModifier : inherits
PreviewProvider <|-- BiometricLockView_Previews : inherits
View <|-- CrashReportBanner : inherits
UIViewControllerRepresentable <|-- MultiPageDocumentScanner : inherits
NSObject <|-- MultiPageDocumentScanner.Coordinator : inherits
VNDocumentCameraViewControllerDelegate <|-- MultiPageDocumentScanner.Coordinator : inherits
LocalizedError -- DocumentScannerError : inherits
View <|-- MultiPageDocumentScannerButton : inherits
ViewModifier <|-- SearchableItemModifier : inherits
ObservableObject <|-- SettingsStorageWrapper : inherits
ViewModifier <|-- DynamicTypeModifier : inherits
ViewModifier <|-- AccessibilityLayoutModifier : inherits
XCTestCase <|-- ScannerModuleTests : inherits
ScannerModuleAPI <|.. ScannerModule : conforms to
View <|-- BatchScannerView : inherits
NSObject <|-- BatchScannerViewModel : inherits
ObservableObject <|-- BatchScannerViewModel : inherits
View <|-- DocumentScannerView : inherits
ObservableObject <|-- DocumentScannerViewModel : inherits
View <|-- BarcodeScannerView : inherits
UIViewRepresentable <|-- CameraPreview : inherits
NSObject <|-- BarcodeScannerViewModel : inherits
ObservableObject <|-- BarcodeScannerViewModel : inherits
View <|-- OfflineScanQueueView : inherits
View <|-- OfflineScanQueueRow : inherits
View <|-- ScannerTabView : inherits
String -- ScannerTabView.ScanMode : inherits
CaseIterable -- ScannerTabView.ScanMode : inherits
View <|-- BarcodeScannerPlaceholder : inherits
View <|-- DocumentScannerPlaceholder : inherits
View <|-- ScanHistoryView : inherits
View <|-- ScanHistoryRow : inherits
ObservableObject <|-- ScanHistoryViewModel : inherits
ItemRepository <|.. MockItemRepository : conforms to
ObservableObject <|-- OfflineScanService : inherits
XCTestCase <|-- SettingsTests : inherits
ObservableObject <|-- SettingsViewModel : inherits
ObservableObject <|-- SettingsStorageWrapper : inherits
SettingsModuleAPI <|.. SettingsModule : conforms to
String -- ScannerSensitivity : inherits
Codable -- ScannerSensitivity : inherits
CaseIterable -- ScannerSensitivity : inherits
Codable <|-- AppSettings : inherits
View <|-- AboutView : inherits
View <|-- EnhancedSettingsView : inherits
View <|-- SettingsListView : inherits
Identifiable -- SheetContent : inherits
Identifiable <|-- SettingsSection : inherits
Identifiable <|-- SettingsItem : inherits
View <|-- SettingsSectionCard : inherits
View <|-- SettingsItemRow : inherits
View <|-- QuickStatCard : inherits
View <|-- SpotlightSettingsView : inherits
View <|-- ExportDataView : inherits
View <|-- ScannerSettingsView : inherits
View <|-- BarcodeFormatSettingsView : inherits
View <|-- BarcodeFormatRow : inherits
View <|-- AccessibilitySettingsView : inherits
View <|-- CrashReportingSettingsView : inherits
String -- CrashReportDetailLevel : inherits
CaseIterable -- CrashReportDetailLevel : inherits
Error -- TestError : inherits
View <|-- CrashReportingPrivacyView : inherits
View <|-- CrashReportDetailView : inherits
View <|-- InfoRow : inherits
View <|-- SettingsProfileHeaderView : inherits
View <|-- SettingsQuickStatsView : inherits
View <|-- SettingsSearchBarView : inherits
View <|-- SettingsFooterView : inherits
View <|-- RateAppView : inherits
View <|-- SettingsBackgroundView : inherits
View <|-- PatternOverlay : inherits
View <|-- FloatingShapes : inherits
View <|-- NotificationSettingsView : inherits
View <|-- NotificationTypeRow : inherits
View <|-- QuietHoursRow : inherits
PreviewProvider <|-- NotificationSettingsView_Previews : inherits
View <|-- ShareAppView : inherits
View <|-- CategoryManagementView : inherits
View <|-- CategoryRowView : inherits
View <|-- SubcategoryRowView : inherits
ObservableObject <|-- CategoryManagementViewModel : inherits
View <|-- AddCategoryView : inherits
View <|-- EditCategoryView : inherits
View <|-- VoiceOverSettingsView : inherits
View <|-- VoiceOverGesturesView : inherits
View <|-- TermsOfServiceView : inherits
CaseIterable -- TermsSection : inherits
View <|-- PrivacyPolicyView : inherits
CaseIterable -- PrivacySection : inherits
View <|-- ClearCacheView : inherits
View <|-- BiometricSettingsView : inherits
PreviewProvider <|-- BiometricSettingsView_Previews : inherits
XCTestCase <|-- SyncTests : inherits
Identifiable <|-- SyncConflict : inherits
String -- SyncConflict.EntityType : inherits
CaseIterable -- SyncConflict.EntityType : inherits
Identifiable <|-- FieldChange : inherits
Equatable -- ConflictResolution : inherits
Equatable -- MergeStrategy : inherits
Equatable <|-- FieldResolution : inherits
Equatable -- FieldResolution.FieldResolutionType : inherits
SyncModuleAPI <|.. SyncModule : conforms to
Equatable -- SyncStatus : inherits
View <|-- BatchResolutionView : inherits
View <|-- StatItem : inherits
View <|-- StrategyOption : inherits
View <|-- MergeStrategyOption : inherits
View <|-- FieldByFieldComparisonView : inherits
View <|-- FieldComparisonCard : inherits
View <|-- ValueOption : inherits
View <|-- ConflictDetailView : inherits
View <|-- VersionCard : inherits
View <|-- FieldChangeRow : inherits
View <|-- ResolutionOptionRow : inherits
View <|-- ConflictResolutionView : inherits
View <|-- ConflictGroupView : inherits
View <|-- ConflictRowView : inherits
View <|-- StatItem : inherits
ObservableObject <|-- ConflictResolutionViewModel : inherits
ObservableObject <|-- ConflictResolutionService : inherits
LocalizedError -- ConflictError : inherits
ConflictDetails <|.. ItemConflictDetails : conforms to
ConflictDetails <|.. ReceiptConflictDetails : conforms to
ConflictDetails <|.. LocationConflictDetails : conforms to
XCTestCase <|-- ItemsModuleTests : inherits
ObservableObject <|-- SpendingDashboardViewModel : inherits
Identifiable <|-- SpendingDataPoint : inherits
Identifiable <|-- CategorySpendingData : inherits
Identifiable <|-- RetailerSpendingData : inherits
ObservableObject <|-- ItemsListViewModel : inherits
String -- ItemsListViewModel.SortOption : inherits
CaseIterable -- ItemsListViewModel.SortOption : inherits
ObservableObject <|-- CategoryAnalyticsViewModel : inherits
Identifiable <|-- CategoryTrendData : inherits
ObservableObject <|-- PortfolioValueViewModel : inherits
Identifiable <|-- PortfolioDataPoint : inherits
Identifiable <|-- CategoryValueData : inherits
ItemRepository <|.. ItemRepositoryImplementation : conforms to
LocationRepository <|.. LocationRepositoryImplementation : conforms to
ItemTemplateRepository <|.. ItemTemplateRepositoryImplementation : conforms to
ItemsModuleAPI <|.. ItemsModule : conforms to
WarrantyRepository <|.. MockWarrantyRepository : conforms to
View <|-- TemplateSelectionView : inherits
View <|-- TemplateRowView : inherits
View <|-- ItemShareView : inherits
View <|-- ShareFormatRow : inherits
View <|-- SharePreviewSection : inherits
UIViewControllerRepresentable <|-- ShareSheet : inherits
View <|-- ItemDetailView : inherits
View <|-- PhotoThumbnailButton : inherits
View <|-- MorePhotosButton : inherits
View <|-- InfoRow : inherits
ObservableObject <|-- ItemDetailViewModel : inherits
View <|-- EditItemView : inherits
Hashable -- EditItemView.Field : inherits
ObservableObject <|-- EditItemViewModel : inherits
View <|-- ItemsListView : inherits
View <|-- ItemRowView : inherits
View <|-- FilterChip : inherits
View <|-- AddEditTagView : inherits
View <|-- TagsManagementView : inherits
View <|-- TagRow : inherits
ObservableObject <|-- TagsManagementViewModel : inherits
View <|-- TagSelectorView : inherits
View <|-- TagSelectionRow : inherits
View <|-- TagChip : inherits
ObservableObject <|-- TagSelectorViewModel : inherits
View <|-- AddSavedSearchView : inherits
View <|-- EditSavedSearchView : inherits
View <|-- IconPickerView : inherits
View <|-- ColorPickerView : inherits
View <|-- FuzzySearchToggle : inherits
View <|-- FuzzySearchInfoView : inherits
View <|-- ExampleRow : inherits
View <|-- ToleranceExample : inherits
View <|-- CircularProgressView : inherits
View <|-- TipRow : inherits
View <|-- BarcodeSearchView : inherits
ObservableObject <|-- BarcodeSearchViewModel : inherits
View <|-- SearchHistoryView : inherits
View <|-- SearchHistoryRow : inherits
ObservableObject <|-- SearchHistoryViewModel : inherits
View <|-- NaturalLanguageSearchView : inherits
View <|-- QueryInterpretationView : inherits
View <|-- InterpretationChip : inherits
View <|-- ExampleQueriesView : inherits
View <|-- ExampleQueryCard : inherits
View <|-- NoResultsView : inherits
View <|-- BulletPoint : inherits
View <|-- SearchResultsList : inherits
ObservableObject <|-- NaturalLanguageSearchViewModel : inherits
Hashable <|-- QueryComponent : inherits
View <|-- SavedSearchesView : inherits
View <|-- SavedSearchRow : inherits
ObservableObject <|-- SavedSearchesViewModel : inherits
View <|-- ItemSearchResultRow : inherits
View <|-- StorageUnitDetailView : inherits
View <|-- ItemRow : inherits
View <|-- CapacityIndicator : inherits
ObservableObject <|-- StorageUnitDetailViewModel : inherits
View <|-- AddEditStorageUnitView : inherits
View <|-- StorageUnitsListView : inherits
View <|-- StorageUnitRow : inherits
ObservableObject <|-- StorageUnitsListViewModel : inherits
View <|-- AddItemView : inherits
Hashable -- AddItemView.Field : inherits
ObservableObject <|-- AddItemViewModel : inherits
View <|-- DocumentThumbnailGrid : inherits
View <|-- DocumentThumbnailCard : inherits
View <|-- DocumentQuickLookView : inherits
UIViewControllerRepresentable <|-- DocumentPreviewController : inherits
NSObject <|-- DocumentPreviewController.Coordinator : inherits
QLPreviewControllerDataSource <|-- DocumentPreviewController.Coordinator : inherits
View <|-- ItemDocumentsView : inherits
View <|-- DocumentRow : inherits
ObservableObject <|-- ItemDocumentsViewModel : inherits
View <|-- DocumentSearchView : inherits
View <|-- SearchResultRow : inherits
View <|-- AdvancedFiltersSheet : inherits
ObservableObject <|-- DocumentSearchViewModel : inherits
View <|-- CloudSyncView : inherits
View <|-- CloudDocumentRow : inherits
ObservableObject <|-- CloudSyncViewModel : inherits
Identifiable <|-- CloudSyncError : inherits
View <|-- AddDocumentSheet : inherits
View <|-- ProcessingOverlay : inherits
View <|-- TagInputField : inherits
View <|-- DocumentsDashboardView : inherits
String -- DocumentsDashboardView.ViewMode : inherits
CaseIterable -- DocumentsDashboardView.ViewMode : inherits
View <|-- CategorySection : inherits
View <|-- ItemDocumentSection : inherits
View <|-- DocumentListRow : inherits
View <|-- StatisticItem : inherits
ObservableObject <|-- DocumentsDashboardViewModel : inherits
View <|-- DocumentGridCard : inherits
View <|-- CSVExportView : inherits
View <|-- FieldSelectorView : inherits
Transferable <|-- CSVFileDocument : inherits
UIViewControllerRepresentable <|-- CSVExportShareSheet : inherits
ObservableObject <|-- CSVExportViewModel : inherits
View <|-- ColumnMappingView : inherits
View <|-- MappingRow : inherits
View <|-- CSVImportView : inherits
View <|-- TemplateCard : inherits
View <|-- InstructionRow : inherits
View <|-- TemplateDetailView : inherits
View <|-- ConfigRow : inherits
ObservableObject <|-- CSVImportViewModel : inherits
View <|-- AddItemsToCollectionView : inherits
View <|-- ItemSelectionRow : inherits
ObservableObject <|-- AddItemsToCollectionViewModel : inherits
View <|-- CategoryChipView : inherits
View <|-- AddEditCollectionView : inherits
View <|-- CollectionsListView : inherits
View <|-- CollectionRow : inherits
ObservableObject <|-- CollectionsListViewModel : inherits
View <|-- CollectionDetailView : inherits
View <|-- ItemRow : inherits
ObservableObject <|-- CollectionDetailViewModel : inherits
View <|-- TimeBasedAnalyticsView : inherits
View <|-- PeriodSelector : inherits
View <|-- MetricsOverviewCard : inherits
View <|-- ComparisonBadge : inherits
View <|-- MetricCard : inherits
View <|-- SpendingTrendsChart : inherits
View <|-- TrendSummaryRow : inherits
View <|-- CategoryBreakdownChart : inherits
View <|-- CategoryTimeRow : inherits
View <|-- StoreBreakdownChart : inherits
View <|-- StoreTimeBar : inherits
View <|-- InsightsSection : inherits
View <|-- InsightCard : inherits
View <|-- AcquisitionRateCard : inherits
View <|-- SeasonalPatternsView : inherits
View <|-- SeasonCard : inherits
View <|-- SpendingHeatmapView : inherits
View <|-- HeatmapCell : inherits
View <|-- DatePickerSheet : inherits
ObservableObject <|-- TimeBasedAnalyticsViewModel : inherits
View <|-- DepreciationReportView : inherits
View <|-- DepreciationGauge : inherits
View <|-- MetricBox : inherits
View <|-- ValueOverTimeChart : inherits
View <|-- TopDepreciatingItemsCard : inherits
View <|-- CategoryDepreciationCard : inherits
View <|-- ItemDepreciationRow : inherits
View <|-- DepreciationScheduleChart : inherits
View <|-- DepreciationScheduleTable : inherits
View <|-- ItemDepreciationDetailView : inherits
View <|-- ValueRow : inherits
View <|-- CategoryFilterSheet : inherits
ObservableObject <|-- DepreciationReportViewModel : inherits
View <|-- CategoryAnalyticsView : inherits
String -- CategoryAnalyticsView.ChartType : inherits
CaseIterable -- CategoryAnalyticsView.ChartType : inherits
View <|-- CategoryListRow : inherits
View <|-- InsightRow : inherits
View <|-- EmptyChartView : inherits
View <|-- CategoryDetailView : inherits
View <|-- StatBox : inherits
View <|-- PurchasePatternsView : inherits
View <|-- SummaryMetric : inherits
View <|-- PatternInsightCard : inherits
View <|-- RecommendationCard : inherits
View <|-- PatternCard : inherits
View <|-- PatternDetailView : inherits
View <|-- RecurringPatternDetail : inherits
View <|-- SeasonalPatternDetail : inherits
View <|-- DetailRow : inherits
ObservableObject <|-- PurchasePatternsViewModel : inherits
View <|-- CategoryPreferenceDetail : inherits
View <|-- BrandLoyaltyDetail : inherits
View <|-- PriceRangeDetail : inherits
View <|-- ShoppingTimeDetail : inherits
View <|-- RetailerPreferenceDetail : inherits
View <|-- BulkBuyingDetail : inherits
View <|-- RetailerAnalyticsView : inherits
View <|-- InsightsSummaryCard : inherits
View <|-- InsightItem : inherits
String -- TimeRange : inherits
CaseIterable -- TimeRange : inherits
View <|-- TimeRangePicker : inherits
View <|-- TopStoresChart : inherits
View <|-- MetricChip : inherits
View <|-- RankingsList : inherits
View <|-- CategoryLeadersSection : inherits
View <|-- CategoryLeaderCard : inherits
View <|-- SpendingComparisonChart : inherits
View <|-- SpendingBar : inherits
ObservableObject <|-- RetailerAnalyticsViewModel : inherits
View <|-- PortfolioValueView : inherits
String -- PortfolioValueView.TimeRange : inherits
CaseIterable -- PortfolioValueView.TimeRange : inherits
View <|-- ValueMetric : inherits
View <|-- StatRow : inherits
View <|-- DepreciationRow : inherits
View <|-- PortfolioBreakdownView : inherits
View <|-- StoreDetailView : inherits
View <|-- StoreHeaderCard : inherits
View <|-- MetricBadge : inherits
View <|-- PurchaseFrequencyCard : inherits
View <|-- MonthlySpendingChart : inherits
View <|-- CategoryBreakdownSection : inherits
View <|-- StoreCategoryRow : inherits
View <|-- RecentItemsSection : inherits
View <|-- RecentItemCard : inherits
View <|-- StoreStatsGrid : inherits
View <|-- StatCard : inherits
View <|-- SpendingDashboardView : inherits
String -- SpendingDashboardView.TimeRange : inherits
CaseIterable -- SpendingDashboardView.TimeRange : inherits
View <|-- StatItem : inherits
View <|-- CategoryRow : inherits
View <|-- CategorySpendingDetailView : inherits
View <|-- WarrantyNotificationsView : inherits
View <|-- WarrantyExpirationRow : inherits
ObservableObject <|-- WarrantyNotificationsViewModel : inherits
View <|-- AddEditWarrantyView : inherits
Hashable -- AddEditWarrantyView.Field : inherits
ObservableObject <|-- AddEditWarrantyViewModel : inherits
View <|-- WarrantyDetailView : inherits
View <|-- WarrantyDetailView.InfoRow : inherits
View <|-- WarrantyDashboardView : inherits
View <|-- SummaryCard : inherits
View <|-- StatusRow : inherits
View <|-- UpcomingExpirationRow : inherits
ObservableObject <|-- WarrantyDashboardViewModel : inherits
Identifiable <|-- ExpirationData : inherits
Identifiable <|-- CategoryData : inherits
String -- TimeFrame : inherits
CaseIterable -- TimeFrame : inherits
Identifiable -- TimeFrame : inherits
View <|-- WarrantyListView : inherits
View <|-- WarrantyRowView : inherits
ObservableObject <|-- WarrantyListViewModel : inherits
View <|-- WarrantyFilterChip : inherits
String -- WarrantyFilter : inherits
CaseIterable -- WarrantyFilter : inherits
View <|-- BudgetAlertsView : inherits
View <|-- AlertRow : inherits
ObservableObject <|-- BudgetAlertsViewModel : inherits
View <|-- BudgetDetailView : inherits
ObservableObject <|-- BudgetDetailViewModel : inherits
Identifiable <|-- BudgetSpendingDataPoint : inherits
View <|-- AddBudgetView : inherits
ObservableObject <|-- AddBudgetViewModel : inherits
View <|-- BudgetDashboardView : inherits
View <|-- BudgetCard : inherits
View <|-- AlertCard : inherits
View <|-- PerformanceCard : inherits
ObservableObject <|-- BudgetDashboardViewModel : inherits
View <|-- EditBudgetView : inherits
XCTestCase <|-- PremiumTests : inherits
ObservableObject <|-- PremiumModule : inherits
PremiumModuleAPI <|.. PremiumModule : conforms to
LocalizedError -- PremiumError : inherits
String -- PremiumFeature : inherits
CaseIterable -- PremiumFeature : inherits
Identifiable <|-- PremiumProduct : inherits
View <|-- SubscriptionManagementView : inherits
View <|-- PremiumUpgradeView : inherits
View <|-- PricingCard : inherits
XCTestCase <|-- WidgetsTests : inherits
WidgetsModuleAPI <|.. WidgetsModule : conforms to
WidgetConfigurationIntent <|-- ConfigureInventoryStatsIntent : inherits
WidgetConfigurationIntent <|-- ConfigureSpendingIntent : inherits
String -- ConfigureSpendingIntent.SpendingPeriod : inherits
CaseIterable -- ConfigureSpendingIntent.SpendingPeriod : inherits
AppEnum -- ConfigureSpendingIntent.SpendingPeriod : inherits
AppIntent <|-- OpenItemIntent : inherits
AppIntent <|-- QuickAddItemIntent : inherits
String -- QuickAddItemIntent.ItemCategoryOption : inherits
CaseIterable -- QuickAddItemIntent.ItemCategoryOption : inherits
AppEnum -- QuickAddItemIntent.ItemCategoryOption : inherits
View <|-- RecentItemsWidgetView : inherits
View <|-- RecentItemCard : inherits
View <|-- RecentItemRow : inherits
View <|-- InventoryStatsWidgetView : inherits
View <|-- StatCard : inherits
View <|-- CategoryBadge : inherits
View <|-- WarrantyExpirationWidgetView : inherits
View <|-- StatBadge : inherits
View <|-- WarrantyRow : inherits
View <|-- SpendingSummaryWidgetView : inherits
String -- WidgetSharedContainer.DataKey : inherits
String -- InventoryStatsEntry.CodingKeys : inherits
CodingKey -- InventoryStatsEntry.CodingKeys : inherits
ObservableObject <|-- WidgetUpdateService : inherits
Widget <|-- SpendingSummaryWidget : inherits
TimelineEntry <|-- SpendingSummaryEntry : inherits
TimelineProvider <|-- SpendingSummaryProvider : inherits
Widget <|-- RecentItemsWidget : inherits
TimelineEntry <|-- RecentItemsEntry : inherits
Identifiable <|-- RecentItemsEntry.RecentItem : inherits
TimelineProvider <|-- RecentItemsProvider : inherits
Widget <|-- WarrantyExpirationWidget : inherits
TimelineEntry <|-- WarrantyExpirationEntry : inherits
Identifiable <|-- WarrantyExpirationEntry.ExpiringWarranty : inherits
TimelineProvider <|-- WarrantyExpirationProvider : inherits
Widget <|-- InventoryStatsWidget : inherits
TimelineEntry <|-- InventoryStatsEntry : inherits
TimelineProvider <|-- InventoryStatsProvider : inherits
XCTestCase <|-- OnboardingTests : inherits
OnboardingModuleAPI <|.. OnboardingModule : conforms to
View <|-- LegalConsentView : inherits
View <|-- FullTermsOfServiceView : inherits
View <|-- PrivacyConsentView : inherits
View <|-- FullPrivacyPolicyView : inherits
View <|-- OnboardingView : inherits
View <|-- OnboardingStepView : inherits
View <|-- PageIndicator : inherits
View <|-- iPadSidebarView : inherits
ObservableObject <|-- iPadNavigationState : inherits
String -- iPadTab : inherits
CaseIterable -- iPadTab : inherits
View <|-- ItemsNavigationView : inherits
View <|-- CollectionsNavigationView : inherits
View <|-- LocationsNavigationView : inherits
View <|-- CategoriesNavigationView : inherits
View <|-- AnalyticsNavigationView : inherits
View <|-- ReportsNavigationView : inherits
View <|-- BudgetNavigationView : inherits
View <|-- ScannerNavigationView : inherits
View <|-- SearchNavigationView : inherits
View <|-- ImportExportNavigationView : inherits
View <|-- SettingsNavigationView : inherits
View <|-- LocationsListView : inherits
View <|-- AnalyticsDashboardView : inherits
View <|-- ReportsDashboardView : inherits
View <|-- AdvancedSearchView : inherits
View <|-- ImportExportDashboardView : inherits
View <|-- AddItemSheet : inherits
View <|-- ImportExportDashboard : inherits
View <|-- ContentView : inherits
UNUserNotificationCenterDelegate <|-- NotificationManager : inherits
VNDocumentCameraViewControllerDelegate <|-- MultiPageDocumentService : inherits
AVCaptureMetadataOutputObjectsDelegate <|-- BatchScannerViewModel : inherits
AVCaptureMetadataOutputObjectsDelegate <|-- BarcodeScannerViewModel : inherits
Codable <|-- InventoryStatsEntry : inherits
Codable <|-- SpendingSummaryEntry : inherits
Codable -- SpendingSummaryEntry.SpendingTrend : inherits
Codable <|-- WarrantyExpirationEntry : inherits
Codable <|-- WarrantyExpirationEntry.ExpiringWarranty : inherits
Codable <|-- RecentItemsEntry : inherits
Codable <|-- RecentItemsEntry.RecentItem : inherits
KeyboardNavigationModifier +-- KeyboardNavigationModifier.FocusableField
DocumentScannerView +-- DocumentScannerView.Coordinator
AddReceiptView +-- AddReceiptView.Field
ImagePicker +-- ImagePicker.Coordinator
SearchHistoryEntry +-- SearchHistoryEntry.SearchType
Photo +-- Photo.CodingKeys
Warranty39 +-- Warranty.Status
BarcodeFormat40 +-- BarcodeFormat.FormatGroup
Document +-- Document.DocumentType
Document +-- Document.DocumentCategory
OfflineScanQueueEntry +-- OfflineScanQueueEntry.QueueStatus
ScanHistoryEntry +-- ScanHistoryEntry.ScanType
NotificationManager +-- NotificationManager.NotificationType
ItemSharingService +-- ItemSharingService.ShareFormat
CloudDocumentMetadata +-- CloudDocumentMetadata.SyncStatus
KeychainService +-- KeychainService.KeychainError
BiometricAuthService +-- BiometricAuthService.BiometricType
BiometricAuthService +-- BiometricAuthService.BiometricError
KeychainService1 +-- KeychainService.KeychainError2
SyncQueueItem +-- SyncQueueItem.SyncOperation
NetworkMonitor +-- NetworkMonitor.ConnectionType
QueuedOperation +-- QueuedOperation.OperationType
SearchMatch +-- SearchMatch.SearchField
TextStyle +-- TextStyle.Style
DynamicTextStyle +-- DynamicTextStyle.Style
FilterChipsView +-- FilterChipsView.FilterType
PDFViewerRepresentable +-- PDFViewerRepresentable.Coordinator
DocumentPicker +-- DocumentPicker.Coordinator
PDFViewer +-- PDFViewer.Coordinator
CameraCaptureView +-- CameraCaptureView.Coordinator
MultiPageDocumentScanner +-- MultiPageDocumentScanner.Coordinator
BatchScannerViewModel +-- BatchScannerViewModel.ScanMode
BatchScannerViewModel +-- BatchScannerViewModel.ScannedItem
ScannerTabView +-- ScannerTabView.ScanMode
SyncConflict7 +-- SyncConflict.EntityType
SyncConflict7 +-- SyncConflict.ConflictType
FieldResolution +-- FieldResolution.FieldResolutionType
ItemsListViewModel +-- ItemsListViewModel.SortOption
EditItemView +-- EditItemView.Field
EditItemViewModel +-- EditItemViewModel.PhotoSource
QueryComponent +-- QueryComponent.ComponentType
AddItemView +-- AddItemView.Field
AddItemViewModel +-- AddItemViewModel.PhotoSource
DocumentPreviewController +-- DocumentPreviewController.Coordinator
DocumentsDashboardView +-- DocumentsDashboardView.ViewMode
CategoryAnalyticsView +-- CategoryAnalyticsView.ChartType
PortfolioValueView +-- PortfolioValueView.TimeRange
SpendingDashboardView +-- SpendingDashboardView.TimeRange
AddEditWarrantyView +-- AddEditWarrantyView.Field
WarrantyDetailView +-- WarrantyDetailView.InfoRow
ConfigureSpendingIntent +-- ConfigureSpendingIntent.SpendingPeriod
QuickAddItemIntent +-- QuickAddItemIntent.ItemCategoryOption
WidgetSharedContainer +-- WidgetSharedContainer.DataKey
InventoryStatsEntry95 +-- InventoryStatsEntry.CodingKeys
WidgetUpdateService +-- WidgetUpdateService.WidgetKind
WidgetUpdateService102 +-- WidgetUpdateService.DataChangeType
SpendingSummaryEntry +-- SpendingSummaryEntry.SpendingTrend
RecentItemsEntry +-- RecentItemsEntry.RecentItem
WarrantyExpirationEntry +-- WarrantyExpirationEntry.ExpiringWarranty
iPadKeyboardShortcutsModifier <.. iPadKeyboardShortcutsModifier24 : ext
ItemTemplateRepository <.. ItemTemplateRepository30 : ext
ItemTemplate <.. ItemTemplate31 : ext
DefaultCategoryRepository <.. DefaultCategoryRepository32 : ext
RetailerAnalytics <.. RetailerAnalytics33 : ext
CSVImportTemplate <.. CSVImportTemplate34 : ext
Location <.. Location35 : ext
Collection <.. Collection36 : ext
Item <.. Item37 : ext
Receipt <.. Receipt38 : ext
Warranty <.. Warranty39 : ext
BarcodeFormat <.. BarcodeFormat40 : ext
ItemCategoryModel <.. ItemCategoryModel41 : ext
ItemCategoryModel <.. ItemCategoryModel42 : ext
CSVExportTemplate <.. CSVExportTemplate43 : ext
Tag <.. Tag44 : ext
CategoryDepreciationRule <.. CategoryDepreciationRule45 : ext
ScanHistoryEntry <.. ScanHistoryEntry46 : ext
StorageUnit <.. StorageUnit47 : ext
Storage <.. Storage48 : ext
WarrantyRepository <.. WarrantyRepository49 : ext
SettingsKey <.. SettingsKey50 : ext
LocationRepository <.. LocationRepository51 : ext
ItemRepository <.. ItemRepository52 : ext
NotificationManager <.. NotificationManager54 : ext
MultiPageDocumentService <.. MultiPageDocumentService56 : ext
NotificationTriggerService <.. NotificationTriggerService58 : ext
SpotlightService <.. SpotlightService59 : ext
Item <.. Item60 : ext
AppColors <.. AppColors68 : ext
BatchScannerViewModel <.. BatchScannerViewModel86 : ext
BarcodeScannerViewModel <.. BarcodeScannerViewModel87 : ext
SettingsStorageProtocol <.. SettingsStorageProtocol88 : ext
SettingsKey <.. SettingsKey89 : ext
SettingsKey <.. SettingsKey90 : ext
SettingsKey <.. SettingsKey91 : ext
CategorySpendingData <.. CategorySpendingData92 : ext
InventoryStatsEntry <.. InventoryStatsEntry95 : ext
SpendingSummaryEntry <.. SpendingSummaryEntry96 : ext
WarrantyExpirationEntry <.. WarrantyExpirationEntry98 : ext
RecentItemsEntry <.. RecentItemsEntry100 : ext
WidgetUpdateService <.. WidgetUpdateService102 : ext
OnboardingStep <.. OnboardingStep103 : ext
@enduml
